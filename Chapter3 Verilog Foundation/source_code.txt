code/                                                                                               0000775 0000765 0000765 00000000000 14353254245 007363  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.7.4/                                                                                         0000775 0000765 0000765 00000000000 14353305542 010034  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/                                                                                           0000775 0000765 0000765 00000000000 14347266251 007673  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.2/                                                                                        0000775 0000765 0000765 00000000000 14344276264 010124  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/                                                                                           0000775 0000765 0000765 00000000000 14351430636 007670  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.1/                                                                                        0000775 0000765 0000765 00000000000 14344246611 010114  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.11/                                                                                       0000775 0000765 0000765 00000000000 14353440234 010171  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.10/                                                                                       0000775 0000765 0000765 00000000000 14353440216 010170  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.9/                                                                                        0000775 0000765 0000765 00000000000 14353440202 010113  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.6/                                                                                        0000775 0000765 0000765 00000000000 14353440141 010112  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.5/                                                                                        0000775 0000765 0000765 00000000000 14353440127 010115  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.4/                                                                                        0000775 0000765 0000765 00000000000 14353440112 010106  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.3/                                                                                        0000775 0000765 0000765 00000000000 14353440077 010117  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.2/                                                                                        0000775 0000765 0000765 00000000000 14353440063 010111  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.16.3/                                                                                        0000775 0000765 0000765 00000000000 14353440043 010107  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.16.2/                                                                                        0000775 0000765 0000765 00000000000 14353440013 010103  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.16.1/                                                                                        0000775 0000765 0000765 00000000000 14353437774 010126  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/                                                                                           0000775 0000765 0000765 00000000000 14347317340 007670  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.10/                                                                                       0000775 0000765 0000765 00000000000 14322664255 010174  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.9/                                                                                        0000775 0000765 0000765 00000000000 14353437676 010135  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.7/                                                                                        0000775 0000765 0000765 00000000000 14353437660 010124  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.6/                                                                                        0000775 0000765 0000765 00000000000 14353437647 010130  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.5/                                                                                        0000775 0000765 0000765 00000000000 14353437636 010125  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.4/                                                                                        0000775 0000765 0000765 00000000000 14353437621 010116  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.12/                                                                                       0000775 0000765 0000765 00000000000 14353437454 010200  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.11/                                                                                       0000775 0000765 0000765 00000000000 14353437442 010174  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.10/                                                                                       0000775 0000765 0000765 00000000000 14353437431 010171  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.9/                                                                                        0000775 0000765 0000765 00000000000 14353437420 010117  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.7/                                                                                        0000775 0000765 0000765 00000000000 14353437376 010127  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.5/                                                                                        0000775 0000765 0000765 00000000000 14353437355 010122  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.4/                                                                                        0000775 0000765 0000765 00000000000 14353437343 010116  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.2/                                                                                        0000775 0000765 0000765 00000000000 14353437310 010106  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.1.4/                                                                                      0000775 0000765 0000765 00000000000 14353437265 010260  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.3/                                                                                        0000775 0000765 0000765 00000000000 14316715770 010114  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.1.2/                                                                                      0000775 0000765 0000765 00000000000 14356513102 010242  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.1/                                                                                        0000775 0000765 0000765 00000000000 14316450100 010071  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.7.2/                                                                                       0000775 0000765 0000765 00000000000 14353305664 010206  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.7.1/                                                                                       0000775 0000765 0000765 00000000000 14353305650 010200  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.6/                                                                                         0000775 0000765 0000765 00000000000 14353305636 010044  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.9/                                                                                         0000775 0000765 0000765 00000000000 14353305716 010046  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.8/                                                                                         0000775 0000765 0000765 00000000000 14353305704 010042  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.8/                                                                                           0000775 0000765 0000765 00000000000 14353305552 007674  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.7.3/                                                                                         0000775 0000765 0000765 00000000000 14353305532 010032  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.6/                                                                                           0000775 0000765 0000765 00000000000 14353305475 007676  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.5.3/                                                                                         0000775 0000765 0000765 00000000000 14353305463 010033  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.5.2/                                                                                         0000775 0000765 0000765 00000000000 14353305451 010027  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.4.2/                                                                                         0000775 0000765 0000765 00000000000 14353305366 010033  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.4.1/                                                                                         0000775 0000765 0000765 00000000000 14353305355 010030  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.3.2/                                                                                         0000775 0000765 0000765 00000000000 14353305345 010027  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.3.1/                                                                                         0000775 0000765 0000765 00000000000 14353305333 010023  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.8.3/                                                                                       0000775 0000765 0000765 00000000000 14353305307 010172  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.8.2/                                                                                       0000775 0000765 0000765 00000000000 14353305300 010162  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.2/                                                                                           0000775 0000765 0000765 00000000000 14353305321 007660  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.8.1/                                                                                       0000775 0000765 0000765 00000000000 14356511736 010200  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.7/                                                                                         0000775 0000765 0000765 00000000000 14353305257 010034  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.6.2/                                                                                       0000775 0000765 0000765 00000000000 14353305244 010167  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.4.5.3/                                                                                     0000775 0000765 0000765 00000000000 14353304570 010332  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.4.5.2/                                                                                     0000775 0000765 0000765 00000000000 14353304557 010336  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.4.5.1/                                                                                     0000775 0000765 0000765 00000000000 14353304545 010332  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.4.4/                                                                                       0000775 0000765 0000765 00000000000 14353304533 010167  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.4.3/                                                                                       0000775 0000765 0000765 00000000000 14353304521 010163  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.4.2/                                                                                       0000775 0000765 0000765 00000000000 14353304510 010160  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.11.2/                                                                                        0000775 0000765 0000765 00000000000 14353304257 010104  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.10.8/                                                                                        0000775 0000765 0000765 00000000000 14353304235 010105  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.10.7/                                                                                        0000775 0000765 0000765 00000000000 14353304220 010076  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.10.5/                                                                                        0000775 0000765 0000765 00000000000 14353304173 010103  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.10.1/                                                                                        0000775 0000765 0000765 00000000000 14353304152 010074  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.9.2/                                                                                         0000775 0000765 0000765 00000000000 14353304137 010030  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.9.1/                                                                                         0000775 0000765 0000765 00000000000 14353304124 010023  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.7.3/                                                                                         0000775 0000765 0000765 00000000000 14353304105 010022  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.7.1/                                                                                         0000775 0000765 0000765 00000000000 14353304071 010022  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.6.3/                                                                                         0000775 0000765 0000765 00000000000 14353304054 010024  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.8/                                                                                        0000775 0000765 0000765 00000000000 14353440166 010123  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.6.2/                                                                                         0000775 0000765 0000765 00000000000 14353304043 010021  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.3.10/                                                                                        0000775 0000765 0000765 00000000000 14353304031 010072  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.5/                                                                                         0000775 0000765 0000765 00000000000 14353305624 010040  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.4/                                                                                         0000775 0000765 0000765 00000000000 14353305612 010034  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.3.5/                                                                                         0000775 0000765 0000765 00000000000 14353304017 010022  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.6/                                                                                        0000775 0000765 0000765 00000000000 14353437366 010125  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.3/                                                                                        0000775 0000765 0000765 00000000000 14353437330 010111  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.1.3/                                                                                      0000775 0000765 0000765 00000000000 14353437253 010254  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.4/                                                                                        0000775 0000765 0000765 00000000000 14316706146 010112  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.3/                                                                                         0000700 0000765 0000765 00000000000 14353305600 010014  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.12/                                                                                          0000775 0000765 0000765 00000000000 14353437162 007752  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.7.1/                                                                                         0000775 0000765 0000765 00000000000 14353305507 010032  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.2/                                                                                        0000775 0000765 0000765 00000000000 14316556114 010106  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.7.2/                                                                                         0000775 0000765 0000765 00000000000 14353305520 010026  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.8/                                                                                        0000775 0000765 0000765 00000000000 14353437407 010123  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.1.1/                                                                                      0000775 0000765 0000765 00000000000 14353437174 010254  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.5.1/                                                                                         0000775 0000765 0000765 00000000000 14353305407 010027  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.15/                                                                                          0000775 0000765 0000765 00000000000 14356513456 007761  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.3/                                                                                        0000775 0000765 0000765 00000000000 14353437607 010121  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.11/                                                                                          0000775 0000765 0000765 00000000000 14353437140 007745  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.4.1/                                                                                       0000775 0000765 0000765 00000000000 14353304473 010167  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.5/                                                                                         0000775 0000765 0000765 00000000000 14353305221 010021  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.6.1/                                                                                       0000775 0000765 0000765 00000000000 14353305233 010164  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.13.13/                                                                                       0000775 0000765 0000765 00000000000 14353437544 010201  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.3/                                                                                         0000775 0000765 0000765 00000000000 14353304463 010026  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.3/                                                                                           0000775 0000765 0000765 00000000000 14243117370 007663  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.4/                                                                                           0000775 0000765 0000765 00000000000 14243160736 007670  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.2/                                                                                           0000775 0000765 0000765 00000000000 14243111023 007647  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.9.2/                                                                                         0000775 0000765 0000765 00000000000 14353305566 010042  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.1/                                                                                           0000775 0000765 0000765 00000000000 14243105317 007657  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.17.7/                                                                                        0000775 0000765 0000765 00000000000 14353440154 010117  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.3/                                                                                           0000775 0000765 0000765 00000000000 14243076771 007673  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.2/                                                                                         0000775 0000765 0000765 00000000000 14353304451 010022  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.2/                                                                                           0000775 0000765 0000765 00000000000 14242664571 007672  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.1/                                                                                           0000775 0000765 0000765 00000000000 14242633422 007660  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.3.4/                                                                                         0000775 0000765 0000765 00000000000 14353303773 010031  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.2.3/                                                                                         0000775 0000765 0000765 00000000000 14275716522 010032  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.1.1/                                                                                         0000775 0000765 0000765 00000000000 14353304440 010017  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.19.2/                                                                                        0000775 0000765 0000765 00000000000 14353440342 010113  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/sim/                                                                                       0000775 0000765 0000765 00000000000 14353440361 010454  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/src/                                                                                       0000775 0000765 0000765 00000000000 14347266251 010462  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.2/sim/                                                                                    0000775 0000765 0000765 00000000000 14353440301 010675  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.2/src/                                                                                    0000775 0000765 0000765 00000000000 14344276264 010713  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/sim/                                                                                       0000775 0000765 0000765 00000000000 14353545500 010457  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/src/                                                                                       0000775 0000765 0000765 00000000000 14351430636 010457  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.1/sim/                                                                                    0000775 0000765 0000765 00000000000 14353440255 010704  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.1/src/                                                                                    0000775 0000765 0000765 00000000000 14344275236 010710  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/sim/                                                                                       0000775 0000765 0000765 00000000000 14353440411 010451  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/src/                                                                                       0000775 0000765 0000765 00000000000 14347317340 010457  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.10/sim/                                                                                   0000775 0000765 0000765 00000000000 14353437722 010765  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.10/src/                                                                                   0000775 0000765 0000765 00000000000 14346773061 010765  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.3/sim/                                                                                    0000775 0000765 0000765 00000000000 14353306025 010672  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.3/src/                                                                                    0000775 0000765 0000765 00000000000 14316715770 010703  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.1/sim/                                                                                    0000775 0000765 0000765 00000000000 14353305737 010701  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.1/src/                                                                                    0000775 0000765 0000765 00000000000 14316450100 010660  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.4/sim/                                                                                    0000775 0000765 0000765 00000000000 14353437114 010677  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.4/src/                                                                                    0000775 0000765 0000765 00000000000 14316712302 010670  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.2/sim/                                                                                    0000775 0000765 0000765 00000000000 14353305756 010703  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.2/src/                                                                                    0000775 0000765 0000765 00000000000 14316561756 010705  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.3/sim/                                                                                       0000775 0000765 0000765 00000000000 14353304404 010451  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.3/src/                                                                                       0000775 0000765 0000765 00000000000 14300153130 010436  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.4/sim/                                                                                       0000775 0000765 0000765 00000000000 14353304417 010456  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.4/src/                                                                                       0000775 0000765 0000765 00000000000 14302060246 010446  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.2/sim/                                                                                       0000775 0000765 0000765 00000000000 14353304371 010453  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.2/src/                                                                                       0000775 0000765 0000765 00000000000 14277645350 010464  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.1/sim/                                                                                       0000775 0000765 0000765 00000000000 14353304355 010454  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.1/src/                                                                                       0000775 0000765 0000765 00000000000 14244141362 010447  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.3/sim/                                                                                       0000775 0000765 0000765 00000000000 14353304340 010447  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.3/src/                                                                                       0000775 0000765 0000765 00000000000 14277612123 010454  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.2/sim/                                                                                       0000775 0000765 0000765 00000000000 14353304320 010444  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.2/src/                                                                                       0000775 0000765 0000765 00000000000 14344252162 010451  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.1/src/                                                                                       0000775 0000765 0000765 00000000000 14330634514 010450  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.1/sim/                                                                                       0000775 0000765 0000765 00000000000 14353304302 010443  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.2.3/sim/                                                                                     0000775 0000765 0000765 00000000000 14353303731 010611  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.2.3/src/                                                                                     0000775 0000765 0000765 00000000000 14276305710 010613  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14353210000 012414  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/sim/.__solver_cache__/                                                                     0000775 0000765 0000765 00000000000 14347266251 013772  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14347266251 012276  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/src/dut/                                                                                   0000775 0000765 0000765 00000000000 14350220632 011241  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.2/sim/bind/                                                                               0000775 0000765 0000765 00000000000 14344302651 011616  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.2/sim/filelist/                                                                           0000775 0000765 0000765 00000000000 14344302663 012520  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14353545403 012440  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/sim/.__solver_cache__/                                                                     0000775 0000765 0000765 00000000000 14351430636 013767  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14351601125 012264  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/src/dut/                                                                                   0000775 0000765 0000765 00000000000 14353545137 011260  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.1/sim/bind/                                                                               0000775 0000765 0000765 00000000000 14344274422 011621  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.18.1/sim/filelist/                                                                           0000775 0000765 0000765 00000000000 14344276215 012522  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14353210027 012426  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/sim/.__solver_cache__/                                                                     0000775 0000765 0000765 00000000000 14347317340 013767  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14350074471 012272  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/src/dut/                                                                                   0000775 0000765 0000765 00000000000 14351430612 011244  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.14.10/sim/filelist/                                                                          0000775 0000765 0000765 00000000000 14346771602 012600  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.3/sim/testbench/                                                                          0000775 0000765 0000765 00000000000 14316721371 012655  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.3/sim/filelist/                                                                           0000775 0000765 0000765 00000000000 14316715770 012517  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.1/sim/testbench/                                                                          0000775 0000765 0000765 00000000000 14316555474 012664  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.1/sim/filelist/                                                                           0000775 0000765 0000765 00000000000 14316555356 012517  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.4/sim/testbench/                                                                          0000775 0000765 0000765 00000000000 14316722540 012655  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.4/sim/filelist/                                                                           0000775 0000765 0000765 00000000000 14316706146 012515  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.2/sim/testbench/                                                                          0000775 0000765 0000765 00000000000 14351637154 012660  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.10.2/sim/filelist/                                                                           0000775 0000765 0000765 00000000000 14316557214 012513  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.3/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14316450767 012445  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.3/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14243117714 012270  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.4/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14302051455 012430  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.4/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14302047646 012273  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.2/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14277646645 012454  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.2/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14243117165 012267  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.1/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14277627324 012444  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/5.1/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14243106222 012256  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.3/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14277612105 012434  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.3/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14243100564 012262  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.2/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14277574661 012451  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.2/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14242672034 012266  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.1/sim/testbench/                                                                             0000775 0000765 0000765 00000000000 14301701076 012424  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/4.1/sim/filelist/                                                                              0000775 0000765 0000765 00000000000 14277173053 012272  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.2.3/sim/testbench/                                                                           0000775 0000765 0000765 00000000000 14277052621 012574  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/3.2.3/sim/filelist/                                                                            0000775 0000765 0000765 00000000000 14275724360 012434  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/sim/testbench/component/                                                                   0000775 0000765 0000765 00000000000 14353040754 014437  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/sim/testbench/interface/                                                                   0000775 0000765 0000765 00000000000 14351766446 014410  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/sim/testbench/transaction/                                                                 0000775 0000765 0000765 00000000000 14351430075 014757  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.1/sim/testbench/testcase/                                                                    0000775 0000765 0000765 00000000000 14351430041 014236  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/sim/testbench/component/                                                                   0000775 0000765 0000765 00000000000 14353545363 014447  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/sim/testbench/interface/                                                                   0000775 0000765 0000765 00000000000 14355235764 014410  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/sim/testbench/transaction/                                                                 0000775 0000765 0000765 00000000000 14351765023 014765  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.3/sim/testbench/testcase/                                                                    0000775 0000765 0000765 00000000000 14351764752 014263  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/sim/testbench/component/                                                                   0000775 0000765 0000765 00000000000 14353041005 014426  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/sim/testbench/interface/                                                                   0000775 0000765 0000765 00000000000 14351562733 014402  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/sim/testbench/transaction/                                                                 0000775 0000765 0000765 00000000000 14351430437 014762  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/7.2/sim/testbench/testcase/                                                                    0000775 0000765 0000765 00000000000 14351430421 014241  5                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     code/6.7.4/demo_tb.sv                                                                               0000775 0000765 0000765 00000002505 14352061662 012025  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  process job[4];

  initial begin
    $display("%0t -> Start!!!",$time);
    $display("%0t -> fork ... join start",$time);
    fork
      begin
        job[0] = process::self();
        $display("%0t -> get job[0] handle",$time);
        #10;
      end
      begin
        job[1] = process::self();
        $display("%0t -> get job[1] handle",$time);
        $display("%0t -> suspend job[1]",$time);
        job[1].suspend();
        #100;
        $display("%0t -> job[1] finish",$time);
      end
      begin
        job[2] = process::self();
        $display("%0t -> get job[2] handle",$time);
        job[0].await();
        $display("%0t -> wait job[0] finish",$time);
        if(job[0].status() != process::FINISHED)
          $display("%0t -> ERROR : job[0] should be already finished",$time);
        #30;
        $display("%0t -> resume job[1]",$time);
        job[1].resume();
      end
      begin
        job[3] = process::self();
        $display("%0t -> get job[3] handle",$time);
        #100;
        $display("%0t -> kill job[3]",$time);
        job[3].kill();
        #100;
      end
    join
    $display("%0t -> fork ... join end",$time);

    if(job[3].status == process::KILLED)
      $display("%0t -> kill job[3] successful",$time);

    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                                                                                                                                                                           code/6.7.4/run.do                                                                                   0000775 0000765 0000765 00000000227 14352056415 011171  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.7.4/tb.f                                                                                     0000775 0000765 0000765 00000000014 14352056415 010607  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    code/6.17.11/demo_tb.sv                                                                             0000775 0000765 0000765 00000002037 14344040052 012153  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  bit[2:0] values[$] = '{0,1,2,3,3};
  bit[2:0] a;
  bit[2:0] b;

  covergroup cg1;
    option.per_instance = 1;
    cover_point_a: coverpoint a;
    cover_point_b: coverpoint b;
  endgroup

  covergroup cg2 with function sample(bit[2:0] x, bit[2:0] y);
    cover_point_x: coverpoint x;
    cover_point_y: coverpoint y;
  endgroup

  initial begin
    cg1 cg_h1 = new();
    cg1 cg_h2 = new();
    cg2 cg_h3 = new();

    cg_h1.start();
    cg_h2.start();
    cg_h3.start();

    foreach(values[i])begin
      a = values[i];
      b = values[i];
      cg_h1.sample();
      if(i >= 2)
        cg_h2.stop();
      else
        cg_h2.sample();
      cg_h3.sample(a,b);
    end
    $display("cg_h1 get_coverage: %g%%",cg_h1.get_coverage());
    $display("cg_h2 get_coverage: %g%%",cg_h2.get_coverage());
    $display("cg_h1 get_inst_coverage: %g%%",cg_h1.get_inst_coverage());
    $display("cg_h2 get_inst_coverage: %g%%",cg_h2.get_inst_coverage());
    $display("cg_h3 get_coverage: %g%%",cg_h3.get_coverage());
    $finish;
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 code/6.17.11/run.do                                                                                 0000775 0000765 0000765 00000000305 14344027046 011324  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.17.10/demo_tb.sv                                                                             0000775 0000765 0000765 00000003746 14344005515 012167  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  bit[2:0] a;
  bit[2:0] b;

  covergroup cg1;
    option.name = "cg1";
    option.per_instance = 1;
    option.goal = 90;
    option.at_least = 1;
    option.detect_overlap = 1;
    option.cross_num_print_missing = 100;
    option.comment = "here covergroup cg1 is just a demo";

    cover_point_a: coverpoint a;
    cover_point_b: coverpoint b{
      option.weight = 1;
      option.auto_bin_max = 128;
    }
    cover_point_a_ignore: coverpoint a{
      option.weight = 2;
      ignore_bins user_bins = {0,1,2,3};
    }
    cross_cover_point_a_b: cross cover_point_a, cover_point_b;
    cross_cover_point_a_b_ignore: cross cover_point_a, cover_point_b{
      option.weight = 3;
      ignore_bins user_bins1 = binsof(cover_point_a) intersect {0} && binsof(cover_point_b) intersect {0};
      ignore_bins user_bins2 = binsof(cover_point_a) intersect {1} && binsof(cover_point_b) intersect {1};
      ignore_bins user_bins3 = binsof(cover_point_a) intersect {2} && binsof(cover_point_b) intersect {2};
      ignore_bins user_bins4 = binsof(cover_point_a) intersect {3} && binsof(cover_point_b) intersect {3};
    }
  endgroup

  function new();
    cg1 = new();
    cg1.option.comment = "we know covergroup cg1 is just a demo";
    cg1.cover_point_b.option.weight = 1;
  endfunction

endclass

module top;
  bit[2:0] values[$] = '{0,1,2,3,3};

  initial begin
    demo_class c1 = new();
    foreach(values[i])begin
      c1.a = values[i];
      c1.b = values[i];
      c1.cg1.sample();
    end
    $display("cg1 cover_point_a coverage: %g%%",c1.cg1.cover_point_a.get_coverage());
    $display("cg1 cover_point_b coverage: %g%%",c1.cg1.cover_point_b.get_coverage());
    $display("cg1 cover_point_a_ignore coverage: %g%%",c1.cg1.cover_point_a_ignore.get_coverage());
    $display("cg1 cross_cover_point_a_b coverage: %g%%",c1.cg1.cross_cover_point_a_b.get_coverage());
    $display("cg1 cross_cover_point_a_b_ignore coverage: %g%%",c1.cg1.cross_cover_point_a_b_ignore.get_coverage());
  end

endmodule


                          code/6.17.10/run.do                                                                                 0000775 0000765 0000765 00000000324 14344002463 011320  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -lca \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                            code/6.17.9/demo_tb.sv                                                                              0000775 0000765 0000765 00000003175 14340501635 012113  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  bit[2:0] a;
  bit[2:0] b;

  covergroup cg1;
    cover_point_a: coverpoint a;
    cover_point_b: coverpoint b;
    cover_point_a_ignore: coverpoint a{
      ignore_bins user_bins = {0,1,2,3};
    }
    cross_cover_point_a_b: cross cover_point_a, cover_point_b;
    cross_cover_point_a_b_ignore: cross cover_point_a, cover_point_b{
      ignore_bins user_bins1 = binsof(cover_point_a) intersect {0} && binsof(cover_point_b) intersect {0};
      ignore_bins user_bins2 = binsof(cover_point_a) intersect {1} && binsof(cover_point_b) intersect {1};
      ignore_bins user_bins3 = binsof(cover_point_a) intersect {2} && binsof(cover_point_b) intersect {2};
      ignore_bins user_bins4 = binsof(cover_point_a) intersect {3} && binsof(cover_point_b) intersect {3};
    }
    //cover_point_b_ignore: coverpoint b{
    //  illegal_bins user_bins = {0,1,2,3};
    //}
  endgroup

  function new();
    cg1 = new();
  endfunction

endclass

module top;
  bit[2:0] values[$] = '{0,1,2,3,3};

  initial begin
    demo_class c1 = new();
    foreach(values[i])begin
      c1.a = values[i];
      c1.b = values[i];
      c1.cg1.sample();
    end
    $display("cg1 cover_point_a coverage: %g%%",c1.cg1.cover_point_a.get_coverage());
    $display("cg1 cover_point_b coverage: %g%%",c1.cg1.cover_point_b.get_coverage());
    $display("cg1 cover_point_a_ignore coverage: %g%%",c1.cg1.cover_point_a_ignore.get_coverage());
    $display("cg1 cross_cover_point_a_b coverage: %g%%",c1.cg1.cross_cover_point_a_b.get_coverage());
    $display("cg1 cross_cover_point_a_b_ignore coverage: %g%%",c1.cg1.cross_cover_point_a_b_ignore.get_coverage());
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                                                   code/6.17.9/run.do                                                                                  0000775 0000765 0000765 00000000324 14340477432 011260  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -lca \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                            code/6.17.6/demo_tb.sv                                                                              0000775 0000765 0000765 00000003676 14340055620 012114  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  bit[2:0] a;

  covergroup cg1;
    cover_point_a: coverpoint a{
      bins a_bins1 = (0 => 1);
      bins a_bins2 = (1 => 2);
    }
  endgroup

  covergroup cg2;
    cover_point_a: coverpoint a{
      bins a_bins1 = (0 => 1),(0 => 2);
      bins a_bins2 = (0 => 3),(1 => 3);
    }
  endgroup

  covergroup cg3;
    cover_point_a: coverpoint a{
      bins a_bins1 = (0 => 1 => 2 => 3);
      bins a_bins2 = (1 => 2 => 3 => 3);
    }
  endgroup

  covergroup cg4;
    cover_point_a: coverpoint a{
      bins a_bins1 = (0,1 => 2,3);
    }
  endgroup

  covergroup cg5;
    cover_point_a: coverpoint a{
      bins a_bins1 = (3[*4]); // equal to 3 => 3  => 3  => 3
    }
  endgroup

  covergroup cg6;
    cover_point_a: coverpoint a{
      bins a_bins1 = (3[*2:4]); // equal to 3 => 3, 3 => 3 => 3, 3 => 3  => 3  => 3
    }
  endgroup

  covergroup cg7;
    cover_point_a: coverpoint a{
      bins a_bins1 = (3[-> 2]); // equal to ... => 3 ... => 3 
      bins a_bins2 = (0 => 2[-> 2] => 3); // equal to 0 => ... => 2 ... => 2 => 3 
    }
  endgroup

  function new();
    cg1 = new();
    cg2 = new();
    cg3 = new();
    cg4 = new();
    cg5 = new();
    cg6 = new();
    cg7 = new();
  endfunction

endclass

module top;
  bit[2:0] values[$] = '{0,1,2,3,3,3,3,0,1,2,3,2};

  initial begin
    demo_class c1 = new();
    foreach(values[i])begin
      c1.a = values[i];
      c1.cg1.sample();
      c1.cg2.sample();
      c1.cg3.sample();
      c1.cg4.sample();
      c1.cg5.sample();
      c1.cg6.sample();
      c1.cg7.sample();
    end
    $display("cg1 coverage: %g%%",c1.cg1.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg2.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg3.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg4.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg5.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg6.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg7.get_coverage());
  end

endmodule


                                                                  code/6.17.6/run.do                                                                                  0000775 0000765 0000765 00000000324 14340045260 011243  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -lca \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                            code/6.17.5/run.do                                                                                  0000775 0000765 0000765 00000000324 14340031502 011234  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -lca \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                            code/6.17.5/demo_tb.sv                                                                              0000775 0000765 0000765 00000001776 14340044163 012112  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  bit[2:0] a;
  bit[2:0] b;

  covergroup cg1;
    cover_point_a: coverpoint a{
      bins a_bins1 = {[0:3]};
      bins a_bins2 = {[4:7]};
    }
    cover_point_b: coverpoint b{
      bins b_bins1 = {[0:3]};
      bins b_bins2 = {[4:7]};
    }
  endgroup

  covergroup cg2 (bit[2:0] a_i,b_i, int var1,var2,var3,var4);
    cover_point_a: coverpoint a_i{
      bins a_bins1 = {[var1:var2]};
      bins a_bins2 = {[var3:var4]};
    }
    cover_point_b: coverpoint b_i{
      bins b_bins1 = {[var1:var2]};
      bins b_bins2 = {[var3:var4]};
    }
  endgroup

  function new();
    cg1 = new();
    cg2 = new(a,b,0,3,4,7);
  endfunction

endclass

module top;
  bit[2:0] values[$] = '{0,1,2,3,3};

  initial begin
    demo_class c1 = new();
    foreach(values[i])begin
      c1.a = values[i];
      c1.b = values[i];
      c1.cg1.sample();
      c1.cg2.sample();
    end
    $display("cg1 coverage: %g%%",c1.cg1.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg2.get_coverage());
  end

endmodule


  code/6.17.4/run.do                                                                                  0000775 0000765 0000765 00000000324 14340027204 011237  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -lca \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                            code/6.17.4/demo_tb.sv                                                                              0000775 0000765 0000765 00000001721 14340030253 012072  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  bit[2:0] a;
  bit[2:0] b;
  bit c;

  covergroup cg1;
    cover_point_a: coverpoint a{
      bins a_bins1 = {[0:3]};
      bins a_bins2 = {[4:7]};
    }
    cover_point_b: coverpoint b{
      bins b_bins1 = {[0:3]};
      bins b_bins2 = {[4:7]};
    }
  endgroup

  covergroup cg2;
    cover_point_a: coverpoint a iff(c){
      bins a_bins1 = {[0:3]};
      bins a_bins2 = {[4:7]};
    }
    cover_point_b: coverpoint b iff(c){
      bins b_bins1 = {[0:3]};
      bins b_bins2 = {[4:7]};
    }
  endgroup


  function new();
    cg1 = new();
    cg2 = new();
  endfunction

endclass

module top;
  bit[2:0] values[$] = '{0,1,2,3,3};

  initial begin
    demo_class c1 = new();
    c1.c = 0;
    foreach(values[i])begin
      c1.a = values[i];
      c1.b = values[i];
      c1.cg1.sample();
      c1.cg2.sample();
    end
    $display("cg1 coverage: %g%%",c1.cg1.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg2.get_coverage());
  end

endmodule


                                               code/6.17.3/run.do                                                                                  0000775 0000765 0000765 00000000324 14337357352 011256  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -lca \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                            code/6.17.3/demo_tb.sv                                                                              0000775 0000765 0000765 00000003371 14340021377 012103  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  bit[2:0] a;
  bit[2:0] b;

  covergroup cg1;
    cover_point_a: coverpoint a{
      bins a_bins1 = {[0:3]};
      bins a_bins2 = {[4:7]};
    }
    cover_point_b: coverpoint b{
      bins b_bins1 = {[0:3]};
      bins b_bins2 = {[4:7]};
    }
  endgroup

  covergroup cg2;
    cover_point_a: coverpoint a{
      bins a_bins1 = {[0:1]};
      bins a_bins2 = {[2:7]};
    }
    cover_point_b: coverpoint b{
      bins b_bins1 = {[0:1]};
      bins b_bins2 = {[2:7]};
    }
  endgroup

  covergroup cg3;
    cover_point_a: coverpoint a{
      bins a_bins[4] = {[0:7]};
    }
    cover_point_b: coverpoint b{
      bins b_bins[4] = {[0:7]};
    }
  endgroup

  covergroup cg4;
    cover_point_a: coverpoint a{
      bins a_bins[] = {[0:7]};
    }
    cover_point_b: coverpoint b{
      bins b_bins[] = {[0:7]};
    }
  endgroup

  covergroup cg5;
    cover_point_a: coverpoint a{
      bins a_bins[] = {[0:7]} with(item % 2 == 0);
    }
    cover_point_b: coverpoint b{
      bins b_bins[] = {[0:7]} with(item % 2 == 0);
    }
  endgroup

  function new();
    cg1 = new();
    cg2 = new();
    cg3 = new();
    cg4 = new();
    cg5 = new();
  endfunction

endclass

module top;
  bit[2:0] values[$] = '{0,1,2,3,3};

  initial begin
    demo_class c1 = new();
    foreach(values[i])begin
      c1.a = values[i];
      c1.b = values[i];
      c1.cg1.sample();
      c1.cg2.sample();
      c1.cg3.sample();
      c1.cg4.sample();
      c1.cg5.sample();
    end
    $display("cg1 coverage: %g%%",c1.cg1.get_coverage());
    $display("cg2 coverage: %g%%",c1.cg2.get_coverage());
    $display("cg3 coverage: %g%%",c1.cg3.get_coverage());
    $display("cg4 coverage: %g%%",c1.cg4.get_coverage());
    $display("cg5 coverage: %g%%",c1.cg5.get_coverage());
  end

endmodule


                                                                                                                                                                                                                                                                       code/6.17.2/demo_tb.sv                                                                              0000775 0000765 0000765 00000002372 14340021341 012071  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  bit[2:0] a;
  bit[2:0] b;
  bit c;

  covergroup cg1;
    cover_point_a: coverpoint a;
    cover_point_b: coverpoint b;
  endgroup

  covergroup cg2 @(c);
    cover_point_a: coverpoint a;
    cover_point_b: coverpoint b;
  endgroup

  function new();
    cg1 = new();
    cg2 = new();
  endfunction

endclass

module top;
  bit[2:0] values[$] = '{0,1,2,3,3};
  bit[2:0] a;
  bit[2:0] b;
  bit clk;

  covergroup cg @(posedge clk);
    cover_point_a: coverpoint a;
    cover_point_b: coverpoint b;
  endgroup

  initial begin
    cg cg_h = new();
    foreach(values[i])begin
      #10;
      a = values[i];
      b = values[i];
    end
    $display("cg coverage: %g%%",cg_h.get_coverage());
    $finish;
  end

  initial begin
    clk = 0;
    forever begin
      #5;
      clk = ~clk;
    end
  end

  initial begin
    demo_class c1 = new();
    foreach(values[i])begin
      c1.a = values[i];
      c1.b = values[i];
      $display("before -> c1.a: %0d, c1.b: %0d, c1.c: %0d",c1.a,c1.b,c1.c);
      #10;
      c1.c = ~c1.c;
      c1.cg1.sample();
      $display("after -> c1.a: %0d, c1.b: %0d, c1.c: %0d",c1.a,c1.b,c1.c);
      $display("cg1 coverage: %g%%, cg2 coverage: %g%%",c1.cg1.get_coverage(),c1.cg2.get_coverage());
    end
  end

endmodule


                                                                                                                                                                                                                                                                      code/6.17.2/run.do                                                                                  0000775 0000765 0000765 00000000305 14337033573 011250  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.16.3/demo_tb.sv                                                                              0000775 0000765 0000765 00000003273 14325117060 012101  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  initial begin
    event a,b,c;

    $display("%0t -> --- start ---",$time);
    fork
      begin
        #10;
        -> a;
        $display("PROCESS 1 -> %0t -> trigger the event a",$time);
        #10;
      end
      begin
        $display("PROCESS 2 -> %0t -> waiting the event a be triggered",$time);
        @ a;
        $display("PROCESS 2 -> %0t -> got the event a be triggered",$time);
        do_task1;
        -> b;
        $display("PROCESS 2 -> %0t -> trigger the event b",$time);
        #10;
      end
      begin
        $display("PROCESS 3 -> %0t -> waiting the event b be triggered",$time);
        wait(b.triggered);
        $display("PROCESS 3 -> %0t -> got the event b be triggered",$time);
        do_task2;
        -> c;
        $display("PROCESS 3 -> %0t -> trigger the event c",$time);
        #10;
      end
      begin
        $display("PROCESS 4 -> %0t -> waiting the event a,b,c be triggered in turn",$time);
        wait_order(a,b,c);
        $display("PROCESS 4 -> %0t -> got the event a,b,c be triggered in turn",$time);
        //wait_order(a,b,c)
        //  $display("PROCESS 4 -> %0t -> got the event a,b,c be triggered in turn",$time);
        //else
        //  $display("PROCESS 4 -> %0t -> event a,b,c be triggered out of order",$time);
        #10;
      end
    join
    $display("%0t -> --- finish ---",$time);
  end

  task do_task1;
    $display("PROCESS 2 -> %0t -> do_task1 start",$time);
    #10; // do something
    $display("PROCESS 2 -> %0t -> do_task1 end",$time);
  endtask

  task do_task2;
    $display("PROCESS 3 -> %0t -> do_task2 start",$time);
    #20; // do something
    $display("PROCESS 3 -> %0t -> do_task2 end",$time);
  endtask

endmodule


                                                                                                                                                                                                                                                                                                                                     code/6.16.3/run.do                                                                                  0000775 0000765 0000765 00000000305 14324706764 011255  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.16.2/run.do                                                                                  0000775 0000765 0000765 00000000305 14324670640 011245  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.16.2/demo_tb.sv                                                                              0000775 0000765 0000765 00000001563 14324675524 012115  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  parameter TIMEOUT = 100;

  initial begin
    //mailbox mb = new();
    mailbox#(int) mb = new();
    $display("%0t -> --- start ---",$time);
    fork
      begin
        int data = 0;
        forever begin
          #10;
          mb.put(data);
          $display("PROCESS 1 -> %0t -> putting the data: %0d to mailbox",$time,data);
          data++;
        end
      end
      begin
        int data;
        #50;
        $display("PROCESS 2 -> %0t -> here exist %0d messages data in mailbox",$time,mb.num());
        forever begin
          #10;
          mb.get(data);
          $display("PROCESS 2 -> %0t -> got the data: %0d from mailbox",$time,data);
        end
      end
      begin
        #TIMEOUT;
        $display("PROCESS 3 -> %0t -> time is out",$time);
      end
    join_any
    $display("%0t -> --- finish ---",$time);
    $finish;
  end
endmodule


                                                                                                                                             code/6.16.1/demo_tb.sv                                                                              0000775 0000765 0000765 00000002444 14324662601 012103  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  parameter TIMEOUT = 100;

  initial begin
    semaphore sema = new(1);
    $display("%0t -> --- start ---",$time);
    fork
      begin
        forever begin
          $display("PROCESS 1 -> %0t -> waiting the key",$time);
          sema.get(1);
          $display("PROCESS 1 -> %0t -> got the key",$time);
          do_task1;
          sema.put(1);
          $display("PROCESS 1 -> %0t -> return the key",$time);
          #10;
        end
      end
      begin
        forever begin
          $display("PROCESS 2 -> %0t -> waiting the key",$time);
          sema.get(1);
          $display("PROCESS 2 -> %0t -> got the key",$time);
          do_task2;
          sema.put(1);
          $display("PROCESS 2 -> %0t -> return the key",$time);
          #10;
        end
      end
      begin
        #TIMEOUT;
        $display("PROCESS 3 -> %0t -> time is out",$time);
      end
    join_any
    $finish;
    $display("%0t -> --- finish ---",$time);
  end

  task do_task1;
    $display("PROCESS 1 -> %0t -> do_task1 start",$time);
    #10; // do something
    $display("PROCESS 1 -> %0t -> do_task1 end",$time);
  endtask

  task do_task2;
    $display("PROCESS 2 -> %0t -> do_task1 start",$time);
    #20; // do something
    $display("PROCESS 2 -> %0t -> do_task1 end",$time);
  endtask

endmodule


                                                                                                                                                                                                                            code/6.16.1/run.do                                                                                  0000775 0000765 0000765 00000000305 14324661156 011246  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.14.9/demo_tb.sv                                                                              0000775 0000765 0000765 00000001716 14322436020 012102  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  parameter int MEM_SIZE = 1024;
  parameter int ADDR_SIZE = $clog2(MEM_SIZE);
  parameter int DATA_SIZE = 32;
  bit[DATA_SIZE-1:0] mem[MEM_SIZE];
  bit[ADDR_SIZE-1:0] addr;
  bit[DATA_SIZE-1:0] data;
  bit[DATA_SIZE-1:0] mem_data;

  integer file_h;

  initial begin
    $display("%0t -> --- start ---",$time);
    write_mem;
    read_and_print_mem_file;
    $display("%0t -> --- finish ---",$time);
  end

  task write_mem;
    file_h = $fopen("file.txt","w"); 

    foreach(mem[idx])begin
      mem[idx] = std::randomize(data);
      $fdisplay(file_h,"%0h",data);
    end
    $fclose(file_h);
  endtask

  task read_and_print_mem_file;
    integer c;
    int line = 0;

    file_h = $fopen("file.txt","r"); 
    while(!$feof(file_h)) begin
      c = $fscanf(file_h,"%h",mem_data);
      $display("mem[%0h] -> %0h",line,mem_data);
      line++;
    end;
    $display("end of file , eof value is %0d",$feof(file_h));
    $fclose(file_h);
  endtask
endmodule


                                                  code/6.14.9/file.txt                                                                                0000664 0000765 0000765 00000021701 14322436023 011573  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     5e23536
57dea13c
be7fe77d
30aa33e2
279440b
b9b381df
f350a940
d51778f7
6d7e79a6
30d4b41b
25b9db5
82e394fa
19bc7a4e
5a98a215
7985c17d
e43a5f72
ffbd4196
217cb731
9df554c4
cac8ccaa
f58bc0c4
11ab26cf
38646d4f
e8478af4
7337dd17
76264a88
2f9fc9f1
2da1e52c
94d34dce
9bee7505
93fee0cb
3af0db8c
ac13f71a
8ef14f37
4c23c660
1ac5a95f
bb91ab7a
b1487ba2
8a4b2cf0
f7fb42c9
7dc155dc
4a089e41
84285d3f
2890cc12
cded48f4
a8be83df
53a24ec5
cf8028d7
92d2a694
a5568088
c4f6001
867b8d31
26b88d29
65a127d6
14ecc7f4
c20e5ad9
3d77c14f
fc69c200
fe1f66dd
13f29dd2
d3f72ea6
98bd5359
3aa79d43
52577345
b4a83bf2
55ed68a2
87c4da1
e730e6fd
6095c8ea
89552bc1
b079bb20
ddc0e0c7
4c054120
af80c4e1
b262af97
b5544c6
8e54f7cf
f8cd44cd
2f835717
76391499
390ffb49
f67d4ab8
f8aa371c
560cd5df
85bf82e6
e2b5631a
54e7acce
1325d8c
8fef25ec
cab78db6
39c7e4bb
a49501a5
e035917
3d6ccdcb
5b732c32
c84102e1
4d9cbe83
f8e97a96
e348df0e
9f67d9ee
83fad457
70cb0133
83085fcd
dcdcf262
5b611488
5d9d827b
f1ec7e6
fb503141
38f99ead
7b324a26
5b7ce1ee
33ae2b9c
355a495
e2b2eda7
d9d350b8
b18ec783
ed66280f
59c1d8ca
6e113cec
c2c8d8b5
61ff938d
b757dcd8
b5c5352f
dc12fc6f
95c861ea
4270484c
dd822335
9c315b41
dfbf48f2
1715c44e
b8418c89
cd9878d8
eec4e678
974ae2f1
a25d580d
bc95bd6
903f6fd5
2f602708
e9b6c90c
c5c81bde
b34715a9
69469a1d
dab000a0
bac3bfae
81bbcd99
44ff2ff5
73639c53
450ac6d8
721bd37a
1da2ed4c
96afb9d4
61ad15b8
67805c54
7af75b7
1a1ad3c3
22344bc9
88ebfb7b
9b5a74a3
7d6b8671
4a3a6a2b
474fc8b4
7f004150
46ab8854
7d386222
43a31a95
567708df
3eb0f117
8494e6c9
b050a341
57d9a980
17aa3e2b
a6385ff0
f1fd14ba
dc267a4a
823d8ea9
4b6d537f
b5b8a013
2de75a1e
d1bd2812
706ceca8
8b492202
403c3303
8baac13d
e0585c71
a1625ee6
de461796
e619b489
6a7fbec6
5ee9bc46
71b9dad6
483b4a1b
249fd35f
f7436520
7e3328a0
f06a64a3
5b206f49
9387979
789b0209
c8aa4dd3
5869b5cc
c78ec16c
15f31d66
7c19086f
f7f9c6c6
2bb3e0fd
b24f851e
6e9b8c80
ca36d7ef
6e6e22e0
f42ac5dd
8523440
b326a6d8
fb6dac29
d4653537
2694ea37
f036c6d8
10887aa0
2a72a2ef
e56bcb9b
a73aa47e
3e644ff5
53cc5644
968b6df0
d969b5b6
e88b6437
53facef2
af7790fa
1db7586f
39bf5584
1c0567f1
4322b11c
419b99c3
2de1d363
2ff37478
9c48ad50
4a70bcd5
60089de8
8f0f669d
c05a4237
7f2ae110
8e47cb47
155a807b
9b492845
83752b62
67c0f36a
2e749af5
6945987
63b8ab6e
1f541ca6
5b0c9a9a
404ab31b
dd61da9d
35a7ab4
92a5981f
1eed5eb7
4714ce7f
81a4dc9f
fe4549ca
b31c6566
2c3efaa6
d635909
496f8d3f
a778f2ca
b73e3447
c037e0c6
a5039f0e
aa5eba34
b0e1af72
d9d4cb0d
59377f3e
f7ca2f95
3cc63a6b
161eff1f
9a318e18
4b4d136b
f3d1123a
82a2b4c7
447712bd
a001484
2dedb5c3
dee4883
3ad06ed2
3ab7b04
42e92790
70ba91ba
b3a3837e
ecc5be87
b7dd3eac
2c09121c
8a07adb3
8b8436cd
26174398
9e9e77c8
7969c197
7df7318
8484c004
f6225c43
d914669f
3ab90e61
30e1a5b
300f0f
6f8f0b04
e877d2cc
318750dd
4c07b6
56e302a
bdf43ea5
fe8d2ff0
aa104797
15b60fc7
ea87356f
6ca66ba0
233c35df
29312ee
908a89de
8211aa34
75f1ca02
4ef7bb45
96ded69e
1ad0482c
5cdddbe6
3e28c975
ced7f7d8
de3830c
8e2cc6c0
2020b1d9
c84a2701
ec0cbab3
f315903b
1ded33c0
a8026fe2
5d0b97b6
de5116cc
41c8c8f9
78a9ca8f
58ecf02e
de54f552
910b6371
3ba1a6c3
73829159
4fd93eef
d4834fc6
6a9e96d
1c420fa8
33a4f098
81d77a9b
3862fece
6e8e1fe6
367bb9c0
1a986a4f
a8a0266b
772f983
6aa5e8c6
e8274ed6
f3c6e921
ac7ab961
d0da1e6c
a179e055
6ad5170a
b55600af
2f7c7f89
3d3c118b
125c481d
c29ec99b
565cfaca
5618c24f
b251c270
43c5ee20
8aa331d3
384180cc
e961955f
420c40b0
157438f3
2f14d81b
754bb004
3d4f4ba0
2541512f
6fc454b2
bda83915
921f3b64
9abccf2f
cde54549
e6ac73bb
f8e25c92
3fa5677e
4aa8b16b
5ece13e0
c6f8eda
7c13a4f0
f5342e8f
16a47a3
8d1338a0
c8298352
f7cdd911
811b48f
b24d5d9f
d8acfb9b
45a72749
c60b448c
3d0256d3
f9b31520
3f314483
167fa15
cff00930
f498e565
3f479127
1241bbad
9b3341d8
3057190b
327494f2
e5ca653c
27c767a6
5190fd72
8067b09f
69cf2976
aa4eec20
8ee06dda
402b55b1
c0f885bf
467b02c9
79a5a8b0
f756dba2
5cf4fb73
950bd9e7
1567425b
cdf5faf3
607bfb83
5482d30d
8baae5f9
b74bf9da
a8540e3
47405502
9b5c9d6c
18824397
5ee6e976
9bec1769
5c720a4c
d4bebdd2
61bae392
bb77e084
5b619003
e6425cb5
ba1166de
2348f1a3
dbba7f32
c1510bf8
25d4c9e2
7ffe8df4
9efccb90
72e98dce
2553989e
2b2dbcdf
dfbb2ad1
c60b1825
11170b5a
1cf7671b
e4549e9b
10764e9
69a49753
61766455
a85cc67b
c37912fc
b336870e
e7cd1fc7
30581b55
428ad06b
f7dcdae7
cc2c95b5
dd4cacb4
cab97deb
edd4582b
bd3eae2b
79303c1a
1f52f1ce
c4cc906e
6ce7fd27
53b82161
b06f9436
b7d15b17
73f6f1b8
5d7d9084
ee3526d6
9b080e56
f83ea27d
ada8e360
4e766306
8859de9b
3145703d
d96cda4e
c8d86aac
bf5dcbc9
b8afc4e7
4d7f51eb
f902bd3b
e30f562f
a7244df1
1e50daf6
57226584
ff646951
ab68bab8
f70067cb
3c95d69c
cc713adb
b9daf500
f708e19b
577e9d2
5a578ea5
4de0933a
8c298faf
e197636a
e0622d59
ea5d4122
6447222e
866dbbf0
19a5be0f
23d6c35
2eadf9c2
a89fa509
8947cbb4
e58d56f5
d253cabe
d924fab1
ba9e4c8a
ab858d82
5435238b
aa0ffeba
c4ff2ec
b2d54125
1fd3f889
11b4c50d
43550a9d
64a5ad9a
aac25afc
92f6a548
9142a57b
ef0ae2b2
5b84691a
6d11f409
4c9a05be
280416b9
8df787ca
215d4594
d8058acf
65ed15a3
1003fe18
120a0447
a023abdd
cee585ef
14f783b6
71e4b478
c5611879
b1ffb621
bc6aee39
7944b6a6
72b5e9f
eaeabe2c
b0be9f55
b9e6a697
61af118e
94f504e2
42129852
79ebd3a5
9e0e6098
f62bf3cd
7dfc9cee
ff52a153
b4086d4b
f0c846cd
a046b82e
4929c50f
5cedfa2
6dfd6d5d
45bb1f23
34df93f1
58e05445
6a1d9f30
e6736298
3fbc20aa
e59f20af
c93b6c1c
29729f2f
9aae5df3
aed44dbf
3c5d4ea0
6e10df62
cc2f4ce9
6f7be676
71863f1e
527e4073
bc8b34c7
e9442988
1355f44c
617cc51c
ecd742a8
1959eccb
8533c951
f3773079
2c3be663
62548777
f0f6d28b
f2066981
2ae0d9f6
6e9a1363
1fb14b29
cc1a3bb5
3d071c96
13db20ce
f3109eac
c0e1ea85
f1f9321a
cd472517
ab67df11
d2a31a14
af3a260c
3490d905
fb015f75
20cd3843
c555d3de
6fce6021
7b8e85af
10578dab
3d29b953
7c58adf0
f6896c42
97c23d8f
f8511af
4ddf520e
4f989de5
53c1a365
c736cb55
eacfe37d
59201b69
ad28fae
c8ee3bb4
558a81c4
f4e1835d
f1f1d39a
ba3b7ed1
71fcb69a
ff735c51
83355f4c
7b39a4f6
1e308d9c
ae224577
327205fe
81ead03
33c73e14
4a67bc99
a5db11f0
80d94b9c
ec77628f
1c0a3422
7e34dc8f
b8d79029
4a52c8ed
64c58adb
39ea14fe
7b6c8b21
f3f3cbb5
ac6c82f0
779267ba
7b89dc28
72572d66
4b9ab42b
76f7c83d
8f34fdd9
da8258ba
88ccc511
c8a09018
1f33cb7e
712122bb
d4cc31eb
65fa5e6d
3fb9fd27
25ca0374
26cc6f1b
86c0c4e4
28731767
95604092
db11751d
91b98817
9ebd3905
b0517184
766af572
b24a1fc9
e8247e2b
3a47a8d0
b4e00fca
bafac9cb
7badb03a
30cafef1
683157be
ed8b5fd1
7f83e385
f49ad194
b131df74
17be51bc
c07b9f5f
5e41ba32
ff208380
4feeaa9c
e92d5b75
ce8fc366
28180128
fcdf3b33
9891bf75
75acb55c
234c77a6
bc2dccb0
4fb444ed
5898b6a1
cc42ef76
d143ff2d
cba70fd7
d6eea93
c98f2369
2e160e05
1ab2bad1
9d4cbde7
4355fa9
c63d6418
753e11af
600f9d0e
2906d250
2bffac5
666d0980
1814c7c
c3b7cfa6
5024a429
f7de0289
721f3689
2d709c6b
eb248a91
fb291b69
b49893c3
f502a5ac
fe1827bf
cce0f0f9
5a741675
d134ae80
eae87828
abf49a94
bf211659
86b7deac
a94e991d
d9880c7f
e00fb777
d9bef0c9
3cff3ebe
c571f491
7b007842
6a3ea8aa
9a2e9fa4
f0077219
33e359c9
eaf029af
13b09f29
4baf4713
ebb68da8
5c5cda32
36b7f496
be104b5
6570c8b2
ec4a113b
38e5bfb0
ea1c5813
689f0ed4
8e6b1d41
55cb7610
e5da14d7
614d97b8
91e35066
328a1b52
d14d7569
5bbac56e
12e0f017
ec5eda57
22965c20
e5950a7e
75eaa781
ece83e5a
9fb7dcd7
a191c9da
2d4c901e
7d18333c
f092140a
4cc9c341
b3ff4cda
c591e166
66467535
4b52be50
a647f9b7
e5f05b62
b44c3e8e
455c550d
ec916a8c
e4995316
cb225d
3281cbbe
69deac44
7ce076a1
e5d1bb1d
cdbb74ae
19025061
cc7ae7c5
453f1318
d6b6a223
29d15564
a09cea95
71f881a7
3bd81c7f
b44f1904
a1f6d13b
5cf356c7
c073811b
9878c44e
6c7c8fc6
82009fcb
52930ea8
2c7b00fd
11a89ec7
dd7dac7b
c25d55f6
2ecafb59
79509ab2
9e792f8b
783e5392
2d521540
932fd57f
d19879c7
e84e11bb
240aa6d7
65c3a786
a3d840f3
cfa2a4c4
d91eb310
eb9e8c74
97ec06cf
5383ca9e
d0f70040
55e20b17
8f6da8cb
348ed4d7
1a7a96e7
b6e5a23e
459f8d19
d58c9fb6
dea7c7f1
988f661f
2e53deb
209efb38
3d4ba13a
4f4b23c7
a075a96a
7cc433aa
55714a0f
5da36f48
bb452fe7
9cbaf884
39d7985f
f7842fcd
8f77376
d0327fdc
ff0b9bd7
a7a5406e
d2c67540
af5694a9
bf13b37d
4b19bc48
e41537f8
b8360d85
f7943f9f
6b86da5
8ed4fc13
a19c7221
87506b2
67d56661
8b98c746
7fcb86d4
301af9b1
99e54272
c205232c
7a9d7f24
a28a7237
4ca0543c
5a3aa976
5dfa2843
91b07a57
fd4c1d42
d6b2818c
6f9c9a7b
2cf54cf5
a7ce5a7b
bfe58bd0
2a5961af
89303aa7
cef10f6e
46794505
eff9dc0d
99499834
a37e5ae4
ec439848
ee8b9160
3ea75719
df2dcf0f
28deb197
68c63572
f2ba0d71
875c0eff
8c20fa7a
2605c5d2
2502161b
45cdd64e
ba2dfd49
42ad67b5
7cd06a53
6641b64
693b7595
460a5303
a9b6657f
ce283080
438ee41
ce4ae42e
f988fd7
3cc5bb77
bee7aaac
7495f091
b28a3694
d3d49383
3e585579
cfc2d7ad
d075cc80
8ea74caf
f2fc282d
3bfbff15
9d4a24d3
25792e35
f95b72a4
2b5358b1
3e79c28a
2a30a66f
b52e6fa9
34d6f701
6f94f584
a270b0ad
15fa1516
5b0889d8
ccd4d63d
f76baf20
c074b49e
7f8378c4
f9ea1ba7
2d0d6502
3086e90f
127445a6
ace2331a
da9612d7
a0cacf5c
7e5e03b1
1552c591
ef20f02f
675bdb5e
897369e2
5915e8a
d86f1b85
3ee14cd4
5c692d24
959ea89a
b8bb6093
c2a7006e
7c981509
ac715deb
a27af015
7b8cc26b
9a44a5c3
c20ed3b
b1fabbbb
f4a88db5
885050e2
6ab14b6f
f12b52fd
3008fcd0
90984e8f
b598e17c
9e0a92e4
e8dc5a02
24e9edcc
cc4195d8
7ac65e40
df7a1076
6d5bba0
a8582acb
56d12ff9
79316776
8371a644
61e45ffa
54b04df4
32bd8aaf
7000dc51
18b0a871
f1f0c719
e07548a5
c7976de9
6a3451f2
ff9bda47
29d1ea74
2e5b57b
e488601c
8a6816b9
5b195054
7e16df6f
386a4789
8c8b1b3a
5c944fb8
a8eb3a18
cb53031a
f8378b32
75fe2588
a0b493c9
73993e9a
cf855c6a
43c1364c
9377b0c2
d9e75ce2
                                                               code/6.14.9/run.do                                                                                  0000775 0000765 0000765 00000000305 14322425016 011243  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.14.7/demo_tb.sv                                                                              0000775 0000765 0000765 00000001143 14322434162 012077  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  parameter int MEM_SIZE = 1024;
  parameter int ADDR_SIZE = $clog2(MEM_SIZE);
  parameter int DATA_SIZE = 32;
  bit[DATA_SIZE-1:0] mem[MEM_SIZE];
  bit[ADDR_SIZE-1:0] addr;
  bit[DATA_SIZE-1:0] data;

  initial begin
    $display("%0t -> --- start ---",$time);
    $display("mem addr size: %0d, data size: %0d, entry size: %0d",ADDR_SIZE,DATA_SIZE,MEM_SIZE);
    foreach(mem[idx])begin
      mem[idx] = std::randomize(data);
      //$display("mem[%0h] -> %0h",idx,data);
      $display($sformatf("mem[%0h] -> %0h",idx,data));
    end
    $display("%0t -> --- finish ---",$time);
  end
endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                             code/6.14.7/run.do                                                                                  0000775 0000765 0000765 00000000305 14322423116 011240  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.14.6/demo_tb.sv                                                                              0000775 0000765 0000765 00000001413 14322421146 012074  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  bit[63:0]   a[8];
  logic[15:0] b[16];
  int         c[32];
  int         d[32][8];

  initial begin
    $display("%0t -> --- start ---",$time);
    $display("a left dimension is %0d, right dimension is %0d, size is %0d, dimension is %0d",$left(a),$right(a),$size(a),$dimensions(a));
    $display("b left dimension is %0d, right dimension is %0d, size is %0d, dimension is %0d",$left(b),$right(b),$size(b),$dimensions(b));
    $display("c left dimension is %0d, right dimension is %0d, size is %0d, dimension is %0d",$left(c),$right(c),$size(c),$dimensions(c));
    $display("d left dimension is %0d, right dimension is %0d, size is %0d, dimension is %0d",$left(d),$right(d),$size(d),$dimensions(d));
    $display("%0t -> --- finish ---",$time);
  end
endmodule


                                                                                                                                                                                                                                                     code/6.14.6/run.do                                                                                  0000775 0000765 0000765 00000000305 14322420242 011234  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.14.5/demo_tb.sv                                                                              0000775 0000765 0000765 00000000500 14322417367 012101  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  bit[63:0]   a;
  logic[15:0] b;
  int         c;

  initial begin
    $display("%0t -> --- start ---",$time);
    $display("a width is %s",$typename(a));
    $display("b width is %s",$typename(b));
    $display("c width is %s",$typename(c));
    $display("%0t -> --- finish ---",$time);
  end
endmodule


                                                                                                                                                                                                code/6.14.5/run.do                                                                                  0000775 0000765 0000765 00000000305 14322417332 011241  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.14.4/demo_tb.sv                                                                              0000775 0000765 0000765 00000000467 14322417265 012111  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  bit[63:0]   a;
  logic[15:0] b;
  int         c;

  initial begin
    $display("%0t -> --- start ---",$time);
    $display("a width is %0d",$bits(a));
    $display("b width is %0d",$bits(b));
    $display("c width is %0d",$bits(c));
    $display("%0t -> --- finish ---",$time);
  end
endmodule


                                                                                                                                                                                                         code/6.14.4/run.do                                                                                  0000775 0000765 0000765 00000000305 14322416763 011247  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.12/run.do                                                                                 0000775 0000765 0000765 00000000305 14320302263 011310  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.12/demo_tb.sv                                                                             0000775 0000765 0000765 00000002302 14335166145 012157  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class Packet;
  rand bit mode;
  rand int length;
  constraint deflt {
    soft length inside {32,1024};
    soft mode == 0;
}
endclass

class demo_class1;
  rand int x;
  constraint cons1 { soft x == 3; }
  constraint cons2 { soft x inside { 1,2,3 }; }
  constraint cons3 { soft x == 4; }
endclass

class demo_class2;
  rand int x;
  constraint cons1 { soft x == 3; }
  constraint cons2 { disable soft x; } 
  constraint cons3 { soft x inside { 1,2,3 }; }
endclass

module top;

  initial begin
    Packet p = new();
    $display("%0t -> --- soft constraint test start ---",$time);
    p.randomize() with { length == 1512;};
    $display("random mode: %b, length: %0d",p.mode,p.length);
    p.randomize() with { length == 1512; mode == 1;};
    $display("random mode: %b, length: %0d",p.mode,p.length);
    $display("\n");

    begin
      demo_class1 c1 = new();
      repeat(5)begin
        c1.randomize();
        $display("random a: %0d",c1.x);
      end
    end
    $display("\n");

    begin
      demo_class2 c2 = new();
      repeat(5)begin
        c2.randomize();
        $display("random a: %0d",c2.x);
      end
    end
    $display("%0t -> --- soft constraint test finish ---",$time);
  end

endmodule


                                                                                                                                                                                                                                                                                                                              code/6.13.11/demo_tb.sv                                                                             0000775 0000765 0000765 00000001764 14317757771 012204  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  int a;
  int b;

  initial begin
    $display("%0t -> --- demo_class randomize test start ---",$time);
    randcase
      2: a = 1;
      5: a = 2;
      3: a = 3;
    endcase
    $display("a value is %0d",a);

    repeat(3)begin
      randcase
        2: rand_task1;
        5: rand_task2;
        3: rand_task3;
      endcase
      $display("a value is %0d, b value is %0d",a,b);
    end
    $display("%0t -> --- demo_class randomize test finish ---",$time);
  end

  task rand_task1;
    randcase
      2: begin
        a = $urandom_range(5,0);
        b = $urandom_range(5,0);
      end
      4: begin
        a = $urandom_range(10,5);
        b = $urandom_range(10,5);
      end
      4: begin
        a = $urandom_range(20,10);
        b = $urandom_range(20,10);
      end
    endcase
  endtask

  task rand_task2;
    a = $urandom_range(30,20);
    b = $urandom_range(30,20);
  endtask

  task rand_task3;
    a = $urandom_range(40,30);
    b = $urandom_range(40,30);
  endtask
endmodule


            code/6.13.11/run.do                                                                                 0000775 0000765 0000765 00000000305 14317756520 011326  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.10/demo_tb.sv                                                                             0000775 0000765 0000765 00000000714 14317566665 012175  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class B;
  rand bit s;
  rand bit [31:0] d;
  constraint c { s -> d == 0; }
  constraint order { solve s before d; }
endclass

module top;

  initial begin
    $display("%0t -> --- randomize test start ---",$time);
    begin
      B b_h;
      b_h = new();
      repeat(10)begin
        b_h.randomize();
        $display("random value s: %b, d: %h",b_h.s,b_h.d);
      end
    end
    $display("%0t -> --- randomize test finish ---",$time);
  end
endmodule


                                                    code/6.13.10/run.do                                                                                 0000775 0000765 0000765 00000000305 14317566121 011321  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.9/run.do                                                                                  0000775 0000765 0000765 00000000305 14317556472 011261  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.9/demo_tb.sv                                                                              0000775 0000765 0000765 00000001463 14317557606 012122  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;

  constraint cons_block {a >= 'd0 ; a <= 'd3; b > 'd3;}
endclass

module top;

  initial begin
    $display("%0t -> --- demo_class randomize test start ---",$time);
    begin
      demo_class c1;
      c1 = new();
      c1.a = 2;
      c1.b = 5;
      if(c1.randomize(null))
        $display("a: %0d, b: %0d value is satisfy cons_block",c1.a,c1.b);
      else
        $display("a: %0d, b: %0d value is not satisfy cons_block",c1.a,c1.b);
      c1.a = 4;
      c1.b = 5;
      if(c1.randomize(null))
        $display("a: %0d, b: %0d value is satisfy cons_block",c1.a,c1.b);
      else
        $display("a: %0d, b: %0d value is not satisfy cons_block",c1.a,c1.b);
    end
    $display("%0t -> --- demo_class randomize test finish ---",$time);
  end
endmodule


                                                                                                                                                                                                             code/6.13.7/run.do                                                                                  0000775 0000765 0000765 00000000305 14317553337 011254  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.7/demo_tb.sv                                                                              0000775 0000765 0000765 00000003012 14317554042 012077  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;
endclass

module top;

  initial begin
    $display("%0t -> --- demo_class randomize test start ---",$time);
    begin
      demo_class c1;
      c1 = new();
      c1.rand_mode(0);
      if(c1.a.rand_mode())
        $display("%0t -> randomize a of class is active",$time);
      else
        $display("%0t -> randomize a of class is inactive",$time);
      repeat(3)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
      c1.rand_mode(1);
      if(c1.a.rand_mode())
        $display("%0t -> randomize a of class is active",$time);
      else
        $display("%0t -> randomize a of class is inactive",$time);
      repeat(3)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
      c1.b.rand_mode(0);
      if(c1.b.rand_mode())
        $display("%0t -> randomize b of class is active",$time);
      else
        $display("%0t -> randomize b of class is inactive",$time);
      repeat(3)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
      c1.b.rand_mode(1);
      if(c1.b.rand_mode())
        $display("%0t -> randomize b of class is active",$time);
      else
        $display("%0t -> randomize b of class is inactive",$time);
      repeat(3)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
    end
    $display("%0t -> --- demo_class randomize test finish ---",$time);
  end
endmodule


code/6.13.5/demo_tb.sv                                                                              0000775 0000765 0000765 00000002377 14317525416 012115  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  rand  bit[2:0] b;
endclass

class demo_class_weight_constraint extends demo_class;
  constraint cons_name {
    a dist {'d0:=20, 'd1:=20, ['d2:'d7]:=60};
    //a = 'd0, weight =  20/(20+20+6*60)
    //a = 'd1, weight =  20/(20+20+6*60)
    //a = 'd2, weight =  60/(20+20+6*60)
    //a = 'd3, weight =  60/(20+20+6*60)
    //a = 'd4, weight =  60/(20+20+6*60)
    //a = 'd5, weight =  60/(20+20+6*60)
    //a = 'd6, weight =  60/(20+20+6*60)
    //a = 'd7, weight =  60/(20+20+6*60)
    b dist {'d0:/20, 'd1:/20, ['d2:'d7]:/60};
    //b = 'd0, weight =  20/(20+20+60)
    //b = 'd1, weight =  20/(20+20+60)
    //b = 'd2, weight =  10/(20+20+60)
    //b = 'd3, weight =  10/(20+20+60)
    //b = 'd4, weight =  10/(20+20+60)
    //b = 'd5, weight =  10/(20+20+60)
    //b = 'd6, weight =  10/(20+20+60)
    //b = 'd7, weight =  10/(20+20+60)
  }
endclass

module top;

  initial begin
    $display("%0t -> --- class weight constraint test start ---",$time);
    begin
      demo_class_weight_constraint c4;
      c4 = new();
      repeat(15)begin
        c4.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c4.a,c4.b);
      end
    end
    $display("%0t -> --- class weight constraint test finish ---",$time);
  end
endmodule


                                                                                                                                                                                                                                                                 code/6.13.5/run.do                                                                                  0000775 0000765 0000765 00000000305 14317523661 011247  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.4/demo_tb.sv                                                                              0000775 0000765 0000765 00000001116 14317524262 012100  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  rand  bit[2:0] b;
endclass

class demo_class_equivalence_constraint extends demo_class;
  constraint cons_name {(a >= 'd3) <-> (b <= 'd3);}
endclass

module top;

  initial begin
    $display("%0t -> --- class equivalence constraint test start ---",$time);
    begin
      demo_class_equivalence_constraint c3;
      c3 = new();
      repeat(15)begin
        c3.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c3.a,c3.b);
      end
    end
    $display("%0t -> --- class equivalence constraint test finish ---",$time);
  end
endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                                  code/6.13.4/run.do                                                                                  0000775 0000765 0000765 00000000305 14317523024 011237  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.2/demo_tb.sv                                                                              0000775 0000765 0000765 00000001232 14317517624 012101  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;
endclass

module top;
  bit[2:0] c;

  initial begin
    $display("%0t -> ---  class rand seed test start ---",$time);
    begin
      int seed1 = 300;
      int seed2 = 500;
      demo_class c1;
      demo_class c2;
      c1 = new();
      c1.srandom(seed1);
      c2 = new();
      c2.srandom(seed2);
      repeat(10)begin
        c1.randomize();
        c2.randomize();
        $display("%0t -> c1 -> a: %0d, b: %0d",$time,c1.a,c1.b);
        $display("%0t -> c2 -> a: %0d, b: %0d",$time,c2.a,c2.b);
      end
    end
    $display("%0t -> ---  class rand seed test finish ---",$time);
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                      code/6.13.2/run.do                                                                                  0000775 0000765 0000765 00000000261 14317514540 011241  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                               code/6.13.1.4/demo_tb.sv                                                                            0000775 0000765 0000765 00000003470 14317315176 012246  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;
  rand  bit[2:0] c;

  extern constraint cons1;
  extern constraint cons2;

  task print;
    $display("print -> here is in super class");
  endtask
endclass

constraint demo_class::cons1 {a >= 'd0 ; a <= 'd3; b > 'd3;}
constraint demo_class::cons2 {c >= 'd3 ; c <= 'd5;}

class demo_class_constraint extends demo_class;
  extern constraint cons1;
  extern constraint cons3;

  task print;
    $display("print -> here is in child class");
  endtask
endclass

constraint demo_class_constraint::cons1 {a >= 'd0 ; a <= 'd3; b <= 'd3;}
constraint demo_class_constraint::cons3 {a == 'd1 ;}

module top;

  initial begin
    $display("%0t -> --- demo_class randomize test start ---",$time);
    begin
      demo_class c1;
      c1 = new();
      c1.print();
      repeat(15)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d, c: %0d",$time,c1.a,c1.b,c1.c);
      end
    end
    $display("%0t -> --- demo_class randomize test finish ---",$time);
    $display("\n");

    $display("%0t -> --- demo_class_constraint randomize test start ---",$time);
    begin
      demo_class_constraint c2;
      c2 = new();
      c2.print();
      repeat(15)begin
        c2.randomize();
        $display("%0t -> a: %0d, b: %0d, c: %0d",$time,c2.a,c2.b,c2.c);
      end
    end
    $display("%0t -> --- demo_class_constraint randomize test finish ---",$time);
    $display("\n");

    $display("%0t -> --- class cast randomize test start ---",$time);
    begin
      demo_class c1;
      demo_class_constraint c2;
      c2 = new();
      c1 = c2;
      c1.print();
      repeat(15)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d, c: %0d",$time,c1.a,c1.b,c1.c);
      end
    end
    $display("%0t -> --- class cast randomize test finish ---",$time);

  end

endmodule


                                                                                                                                                                                                        code/6.13.1.4/run.do                                                                                0000775 0000765 0000765 00000000305 14317306772 011407  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.1.2/run.do                                                                                0000775 0000765 0000765 00000000305 14317300272 011372  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.1.2/demo_tb.sv                                                                            0000775 0000765 0000765 00000002321 14353521070 012226  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;
endclass

class demo_class_constraint extends demo_class;
  //constraint cons_name {a >= 'd0 ; a <= 'd3; b > 'd3;}
  extern constraint cons_name;
endclass

//constraint demo_class_constraint::cons_name {a >= 'd0 ; a <= 'd3; b > 'd3;}
constraint demo_class_constraint::cons_name {a inside{'d0,'d1, 'd2, 'd3}; b > 'd3;}
//constraint demo_class_constraint::cons_name {a inside{[0:3]}; b > 'd3;}

module top;

  initial begin
    $display("%0t -> --- class randomize constraint test start ---",$time);
    begin
      demo_class_constraint c1;
      c1 = new();
      repeat(15)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
    end
    $display("%0t -> --- class randomize constraint test finish ---",$time);
    $display("\n");

    $display("%0t -> --- class randomize simple constraint test start ---",$time);
    begin
      demo_class c2;
      c2 = new();
      repeat(15)begin
        c2.randomize() with {a >= 'd0 ; a <= 'd3; b > 'd3;};
        $display("%0t -> a: %0d, b: %0d",$time,c2.a,c2.b);
      end
    end
    $display("%0t -> --- class randomize simple constraint test finish ---",$time);
  end

endmodule


                                                                                                                                                                                                                                                                                                               code/6.9.7.2/filelist.f                                                                             0000775 0000765 0000765 00000000055 14316013025 012155  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/baozi.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   code/6.9.7.2/run.do                                                                                 0000775 0000765 0000765 00000000203 14316013025 011316  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.7.2/baozi.svh                                                                              0000775 0000765 0000765 00000004211 14316052231 012021  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class baozi;
  string name;
  int weight;
  protected int skin;
  protected int filling;
  protected int flavor;

  extern function new(string name,int weight);
  extern function void init(int skin,int filling,int flavor);
  extern function void make_baozi();
  extern static function void eat1();
  extern function automatic void eat2();
  extern function void eat3();

endclass

function baozi::new(string name,int weight);
  this.name = name;
  this.weight = weight;
endfunction

function void baozi::init(int skin,int filling,int flavor);
  this.skin = skin;
  this.filling = filling;
  this.flavor = flavor;
endfunction

function void baozi::make_baozi();
  $display("A baozi is completed!");
  $display("Baozi name is %s",name);
  $display("Baozi weight is %d",weight);
  $display("Baozi skin is %d",skin);
  $display("Baozi filling is %d",filling);
  $display("Baozi flavor is %d",flavor);
endfunction

function void baozi::eat1();
  static int eat_cnt1 = 0;
  automatic int eat_cnt2 = 0;
  int eat_cnt3 = 0;
  $display("static eat -> Put it straight in your mouth!");
  $display("static eat -> We have already eat static cnt: %0d baozi",++eat_cnt1);
  $display("static eat -> We have already eat automatic cnt: %0d baozi",++eat_cnt2);
  $display("static eat -> We have already eat cnt: %0d baozi",++eat_cnt3);
endfunction

function void baozi::eat2();
  static int eat_cnt1 = 0;
  automatic int eat_cnt2 = 0;
  int eat_cnt3 = 0;
  $display("automatic eat -> Put it straight in your mouth!");
  $display("automatic eat -> We have already eat static cnt: %0d baozi",++eat_cnt1);
  $display("automatic eat -> We have already eat automatic cnt: %0d baozi",++eat_cnt2);
  $display("automatic eat -> We have already eat cnt: %0d baozi",++eat_cnt3);
endfunction

function void baozi::eat3();
  static int eat_cnt1 = 0;
  automatic int eat_cnt2 = 0;
  int eat_cnt3 = 0;
  $display("normal eat -> Put it straight in your mouth!");
  $display("normal eat -> We have already eat static cnt: %0d baozi",++eat_cnt1);
  $display("normal eat -> We have already eat automatic cnt: %0d baozi",++eat_cnt2);
  $display("normal eat -> We have already eat cnt: %0d baozi",++eat_cnt3);
endfunction
                                                                                                                                                                                                                                                                                                                                                                                       code/6.9.7.2/demo_tb.sv                                                                             0000775 0000765 0000765 00000000553 14316054227 012172  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  baozi    baozi_h;
  
  initial begin
    baozi_h = new(.name("caibaozi"),.weight($urandom_range(150,100)));
    baozi_h.make_baozi();
    repeat(2) baozi_h.eat1();
    $display("\n");
    repeat(2) baozi_h.eat2();
    $display("\n");
    repeat(2) baozi_h.eat3();
    $display("\n");
    repeat(2) baozi::eat1();
  end

endmodule : top

     
   
                                                                                                                                                     code/6.9.7.1/baozi.svh                                                                              0000775 0000765 0000765 00000002273 14316020377 012034  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class baozi;
  string name;
  int weight;
  protected int skin;
  protected int filling;
  protected int flavor;

  static int eat_cnt1 = 0;
  int eat_cnt2 = 0;

  extern function new(string name,int weight);
  extern function void init(int skin,int filling,int flavor);
  extern function void make_baozi();
  extern virtual function void eat();

endclass

function baozi::new(string name,int weight);
  this.name = name;
  this.weight = weight;
endfunction

function void baozi::init(int skin,int filling,int flavor);
  this.skin = skin;
  this.filling = filling;
  this.flavor = flavor;
endfunction

function void baozi::make_baozi();
  $display("A baozi is completed!");
  $display("Baozi name is %s",name);
  $display("Baozi weight is %d",weight);
  $display("Baozi skin is %d",skin);
  $display("Baozi filling is %d",filling);
  $display("Baozi flavor is %d",flavor);
endfunction

function void baozi::eat();
  automatic int eat_cnt3 = 0;
  $display("Put it straight in your mouth!");
  $display("We have already eat static cnt: %0d baozi",++eat_cnt1);
  $display("We have already eat normal cnt: %0d baozi",++eat_cnt2);
  $display("We have already eat automatic cnt: %0d baozi",++eat_cnt3);
endfunction

                                                                                                                                                                                                                                                                                                                                     code/6.9.7.1/demo_tb.sv                                                                             0000775 0000765 0000765 00000000566 14316011263 012166  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  baozi    baozi_h[3];
  
  initial begin
    foreach(baozi_h[idx])begin
      baozi_h[idx] = new(.name("caibaozi"),.weight($urandom_range(150,100)));
      baozi_h[idx].make_baozi();
      repeat(2) baozi_h[idx].eat();
      $display("\n");
    end
    $display("At last, static cnt: eat_cnt1 value is %0d",baozi::eat_cnt1);
  end

endmodule : top

     
   
                                                                                                                                          code/6.9.7.1/filelist.f                                                                             0000775 0000765 0000765 00000000055 14316004276 012164  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/baozi.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   code/6.9.7.1/run.do                                                                                 0000775 0000765 0000765 00000000203 14316003265 011322  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.6/baozi.svh                                                                                0000775 0000765 0000765 00000001731 14315725742 011701  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
virtual class baozi;
  string name;
  int weight;
  protected int skin;
  protected int filling;
  protected int flavor;

  extern function new(string name,int weight);
  extern function void init(int skin,int filling,int flavor);
  extern function void make_baozi();
  extern virtual function void eat();

  pure virtual function void say_sth(string sth);

endclass

function baozi::new(string name,int weight);
  this.name = name;
  this.weight = weight;
endfunction

function void baozi::init(int skin,int filling,int flavor);
  this.skin = skin;
  this.filling = filling;
  this.flavor = flavor;
endfunction

function void baozi::make_baozi();
  $display("A baozi is completed!");
  $display("Baozi name is %s",name);
  $display("Baozi weight is %d",weight);
  $display("Baozi skin is %d",skin);
  $display("Baozi filling is %d",filling);
  $display("Baozi flavor is %d",flavor);
endfunction

function void baozi::eat();
  $display("Put it straight in your mouth!");
endfunction

                                       code/6.9.6/filelist.f                                                                               0000775 0000765 0000765 00000000102 14315723275 012023  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/baozi.svh
$PWD/xiaolongbao.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                              code/6.9.6/xiaolongbao.svh                                                                          0000775 0000765 0000765 00000001765 14315730147 013101  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class xiaolongbao extends baozi;
  int feature;

  extern function new(string name,int weight,int feature);
  extern function void make_xiaolongbao();
  extern virtual function void eat();
  extern virtual function void say_sth(string sth);

endclass

function xiaolongbao::new(string name,int weight,int feature);
  super.new(name,weight);
  this.feature=feature;
endfunction 

function void xiaolongbao::eat();
  $display("Dip it in vinegar and put it in your mouth!");
endfunction
   
function void xiaolongbao::make_xiaolongbao();
  $display("A xiaolongbao is completed!");
  $display("Xiaolongbao name is %s", name);
  $display("Xiaolongbao weight is %d", weight);
  $display("Xiaolongbao skin is %d", skin);
  $display("Xiaolongbao filling is %d", filling);
  $display("Xiaolongbao flavor is %d", flavor);
  $display("Xiaolongbao feature is %d", feature);
endfunction    

function void xiaolongbao::say_sth(string sth);
  $display("I want to say '%s'",sth);
endfunction

           code/6.9.6/run.do                                                                                   0000775 0000765 0000765 00000000203 14315723275 011173  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.6/demo_tb.sv                                                                               0000775 0000765 0000765 00000000537 14315727556 012046  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
   
   baozi    baozi_h;
   xiaolongbao xiaolongbao_h;

   initial begin
      //baozi_h = new(.name("caibaozi"),.weight(150)); //ERROR
      xiaolongbao_h = new("xiaolongbao",50,2);
      xiaolongbao_h.make_xiaolongbao();
      xiaolongbao_h.eat();
      xiaolongbao_h.say_sth("wa, it is delicious!");
   end

endmodule : top

     
   
                                                                                                                                                                 code/6.9.9/A.svh                                                                                    0000775 0000765 0000765 00000000415 14315020040 010731  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class A#(type T = int, int size = 3,int value = 10);
  localparam p = value;
  bit[size-1:0] a;
  T b;

  function void print();
    $display("p is %0d",value);
    $display("a size is %0d",$bits(a));
    $display("b type is %s",$typename(b));
  endfunction

endclass
                                                                                                                                                                                                                                                   code/6.9.9/demo_tb.sv                                                                               0000775 0000765 0000765 00000000535 14315020062 012021  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  initial begin
    begin
      A#(int,4,9) A_h;
      A_h = new();
      A_h.print();
    end
    $display("\n");
    begin
      A#(bit[2:0],5,10) A_h;
      A_h = new();
      A_h.print();
    end
    $display("\n");
    begin
      A#(real,7,20) A_h;
      A_h = new();
      A_h.print();
    end
  end

endmodule : top

     
   
                                                                                                                                                                   code/6.9.9/run.do                                                                                   0000775 0000765 0000765 00000000203 14315016450 011164  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.9/filelist.f                                                                               0000775 0000765 0000765 00000000051 14315020013 012005  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/A.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       code/6.9.8/B.svh                                                                                    0000775 0000765 0000765 00000001040 14314750627 010750  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class B extends A;
    int d;

  virtual function void print();
    $display("B -> a is %0d, b is %0d, c is %0d, d is %0d",a,b,c,d);
  endfunction

  function void copy(A rhs);
    B RHS;
    if(rhs == null)
      $display("ERROR -> Try to copy from a null pointer");
    else if(!$cast(RHS,rhs))
      $display("ERROR -> Try to copy wrong type");
    else begin
      super.copy(rhs);
      d = RHS.d;
    end
  endfunction

  function B clone(A rhs);
    clone = new();
    clone.copy(rhs);
  endfunction

endclass
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                code/6.9.8/A.svh                                                                                    0000775 0000765 0000765 00000000775 14314747414 010765  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class A;
  int a,b,c;

  virtual function void print();
    $display("A -> a is %0d, b is %0d, c is %0d",a,b,c);
  endfunction

  function void copy(A rhs);
    A RHS;
    if(rhs == null)
      $display("ERROR -> Try to copy from a null pointer");
    else if(!$cast(RHS,rhs))
      $display("ERROR -> Try to copy wrong type");
    else begin
      a = RHS.a;
      b = RHS.b;
      c = RHS.c;
    end
  endfunction

  function A clone(A rhs);
    clone = new();
    clone.copy(rhs);
  endfunction

endclass
   code/6.9.8/run.do                                                                                   0000775 0000765 0000765 00000000203 14314742346 011174  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.8/filelist.f                                                                               0000775 0000765 0000765 00000000064 14314744156 012034  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/A.svh
$PWD/B.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            code/6.9.8/demo_tb.sv                                                                               0000775 0000765 0000765 00000001315 14314751076 012034  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  A A_h, A_h_copy, A_h_clone;
  B B_h, B_h_copy, B_h_clone;
  
  initial begin
      A_h = new();
      A_h_copy = new();
      A_h.a = 1;
      A_h.b = 2;
      A_h.c = 3;
      $display("copy A_h to A_h_copy");
      A_h_copy.copy(A_h);
      A_h_copy.print();
      $display("clone A_h to A_h_clone");
      A_h_clone = A_h.clone(A_h);
      A_h_clone.print();
  
      B_h = new();
      B_h_copy = new();
      B_h.a = 1;
      B_h.b = 2;
      B_h.c = 3;
      B_h.d = 4;
      $display("copy B_h to B_h_copy");
      B_h_copy.copy(B_h);
      B_h_copy.print();
      $display("clone B_h to B_h_clone");
      B_h_clone = B_h.clone(B_h);
      B_h_clone.print();
  end

endmodule : top

     
   
                                                                                                                                                                                                                                                                                                                   code/6.8/run.do                                                                                     0000775 0000765 0000765 00000000227 14307575662 011042  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.8/tb.f                                                                                       0000775 0000765 0000765 00000000014 14307575662 010460  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.8/demo_tb.sv                                                                                 0000775 0000765 0000765 00000002715 14330636160 011664  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic[1:0] op;
  logic[15:0] rslt1,rslt2;
  logic[3:0] a,b;

  initial begin
    $display("%0t -> Start!!!",$time);
    #100;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  initial begin
    op = 0;
    a = 0;
    b = 0;
    repeat(5)begin
      #10;
      op++;
      a++;
      b++;
    end
  end

  always_comb begin
    unique case(op) inside
      2'b00: begin
        rslt1 = a + b;
        $display("unique case -> op: %b(add) -> a: %d, b: %d -> rslt1: %d",op,a,b,rslt1);
      end
      2'b01: begin
        rslt1 = a - b;
        $display("unique case -> op: %b(sub) -> a: %d, b: %d -> rslt1: %d",op,a,b,rslt1);
      end
      2'b10: begin
        rslt1 = a * b;
        $display("unique case -> op: %b(mul) -> a: %d, b: %d -> rslt1: %d",op,a,b,rslt1);
      end
      2'b11: begin
        rslt1 = a / b;
        $display("unique case -> op: %b(div) -> a: %d, b: %d -> rslt1: %d",op,a,b,rslt1);
      end
    endcase
  end

  always_comb begin
    priority case(op) inside
      2'b0?: begin
        rslt2 = a + b;
        $display("priority case -> op: %b(add) -> a: %d, b: %d -> rslt2: %d",op,a,b,rslt2);
      end
      2'b00: begin
        rslt2 = a - b;
        $display("priority case -> op: %b(sub) -> a: %d, b: %d -> rslt2: %d",op,a,b,rslt2);
      end
      default: begin
        rslt2 = a * b;
        $display("priority case -> op: %b(mul) -> a: %d, b: %d -> rslt2: %d",op,a,b,rslt2);
      end
    endcase
  end

endmodule : top


                                                   code/6.7.3/demo_tb.sv                                                                               0000775 0000765 0000765 00000002530 14307573415 012026  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic[3:0] op;
  logic[15:0] rslt;
  logic[3:0] a,b;

  initial begin
    $display("%0t -> Start!!!",$time);
    begin
      logic[2:0] a;
      a = 3'b001;
      if(a inside {3'b001,3'b101,3'b100})
        $display("a is inside {3'b001,3'b101,3'b100}!");
      else
        $display("a is not inside {3'b001,3'b101,3'b100}!");
      a = 3'b100;
      if((a==3'b001)||(a==3'b101)||(a=3'b100))
        $display("a is inside {3'b001,3'b101,3'b100}!");
      else
        $display("a is not inside {3'b001,3'b101,3'b100}!");
      //a = 3'b1x1;
      a = 3'b1z1;
      if(a inside {3'b1?1})
        $display("a is inside {3'b1?1}!");
      else
        $display("a is not inside {3'b1?1}!");
    end
    #150;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  initial begin
    op = 0;
    a = 0;
    b = 0;
    repeat(20)begin
      #10;
      op++;
      a++;
      b++;
    end
  end

  always_comb begin
    case(op) inside
      4'b00??: begin
        rslt = a + b;
        $display("op: %b(add) -> a: %d, b: %d -> rslt: %d",op,a,b,rslt);
      end
      4'b01??: begin
        rslt = a - b;
        $display("op: %b(sub) -> a: %d, b: %d -> rslt: %d",op,a,b,rslt);
      end
      4'b11??: begin
        rslt = a * b;
        $display("op: %b(mul) -> a: %d, b: %d -> rslt: %d",op,a,b,rslt);
      end
    endcase
  end

endmodule : top


                                                                                                                                                                        code/6.7.3/run.do                                                                                   0000775 0000765 0000765 00000000227 14307570502 011166  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.7.3/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307570502 010604  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.6/demo_tb.sv                                                                                 0000775 0000765 0000765 00000004473 14307563021 011664  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    begin
      $display("%0t -> ----------- fork_join_block -----------",$time);
      fork: fork_join_block
        begin: begin_block1
          $display("%0t -> begin_block1 start ",$time);
          #10ns;
          $display("%0t -> begin_block1 finish ",$time);
        end
        begin: begin_block2
          $display("%0t -> begin_block2 start ",$time);
          #20ns;
          $display("%0t -> begin_block2 finish ",$time);
        end
        begin: begin_block3
          $display("%0t -> begin_block3 start ",$time);
          #30ns;
          $display("%0t -> begin_block3 finish ",$time);
        end
      join
      $display("%0t -> get out of fork_join_block!",$time);
    end
    begin
      $display("%0t -> ----------- fork_join_any block ---------",$time);
      fork: fork_join_any_block
        begin: begin_block1
          $display("%0t -> begin_block1 start ",$time);
          #10ns;
          $display("%0t -> begin_block1 finish ",$time);
        end
        begin: begin_block2
          $display("%0t -> begin_block2 start ",$time);
          #20ns;
          $display("%0t -> begin_block2 finish ",$time);
        end
        begin: begin_block3
          $display("%0t -> begin_block3 start ",$time);
          #30ns;
          $display("%0t -> begin_block3 finish ",$time);
        end
      join_any
      $display("%0t -> get out of fork_join_any_block!",$time);
      #50ns;
    end
    begin
      $display("%0t -> ----------- fork_join_none block ---------",$time);
      fork: fork_join_none_block
        begin: begin_block1
          $display("%0t -> begin_block1 start ",$time);
          #10ns;
          $display("%0t -> begin_block1 finish ",$time);
        end
        begin: begin_block2
          $display("%0t -> begin_block2 start ",$time);
          #20ns;
          $display("%0t -> begin_block2 finish ",$time);
        end
        begin: begin_block3
          $display("%0t -> begin_block3 start ",$time);
          #30ns;
          $display("%0t -> begin_block3 finish ",$time);
        end
      join_none
      disable fork_join_none_block; //equal to disable fork;
      $display("%0t -> get out of fork_join_none_block!",$time);
      #50ns;
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                                                                                                                                                                                     code/6.6/run.do                                                                                     0000775 0000765 0000765 00000000227 14307561003 011020  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.6/tb.f                                                                                       0000775 0000765 0000765 00000000014 14307561003 010436  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.5.3/demo_tb.sv                                                                               0000775 0000765 0000765 00000001214 14307551506 012017  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    fork : f1
      begin : b1
        $display("here in b1");
        #10ns;
        disable b2;
      end
      begin : b2
        #20ns;
        $display("here in b2");
      end
      begin : b3
        #50ns;
        $display("%0t -> delay 50ns in f1",$time);
      end
    join
    demo_task;
    demo_func;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  task demo_task;
    $display("%0t -> here in demo_task",$time);
  endtask : demo_task

  function void demo_func;
    $display("%0t -> here in demo_func",$time);
  endfunction : demo_func

endmodule : top


                                                                                                                                                                                                                                                                                                                                                                                    code/6.5.3/run.do                                                                                   0000775 0000765 0000765 00000000227 14307550543 011167  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.5.3/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307550543 010605  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.5.2/demo_tb.sv                                                                               0000775 0000765 0000765 00000001141 14307550525 012015  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  bit clk,rst_n;
  int a,b,c;

  initial begin
    $display("%0t -> Start!!!",$time);
    #100;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  always_comb begin
    c = a + b;
    $display(" a is %0d, b is %0d, c is %0d",a,b,c);
  end

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #5;
    rst_n = 1;
  end

  always_ff@(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
      a <= 0;
      b <= 0;
    end
    else begin
      a <= (a + 1);
      b <= (b + 1);
    end
  end

endmodule : top


                                                                                                                                                                                                                                                                                                                                                                                                                               code/6.5.2/run.do                                                                                   0000775 0000765 0000765 00000000227 14307534462 011170  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.5.2/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307534462 010606  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.4.2/demo_tb.sv                                                                               0000775 0000765 0000765 00000002725 14307525231 012021  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  initial begin
    $display("%0t -> Start!!!",$time);
    $display("------------ continue ---------------");
    begin
      for(int i=0;i<8;i++)begin
        if(i==4)
          continue;
        $display("i is %0d",i);
      end
    end
    $display("------------ break ------------------");
    begin
      for(int i=0;i<8;i++)begin
        if(i==4)
          break;
        else
          $display("i is %0d",i);
      end
    end
    $display("------------ demo_func1 -------------");
    demo_func1;
    $display("------------ demo_func2 -------------");
    begin
      int y;
      y = demo_func2();
      $display("output y is %0d",y);
    end
    $display("------------ demo_task -------------");
    demo_task;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  function void demo_func1;
    for(int i=0;i<8;i++)begin
      if(i==4)
        break;
      else
        $display("i is %0d",i);
    end
    return;
    $display("here is in demo_func1");
  endfunction

  function int demo_func2;
    int y;
    y=0;
    for(int i=0;i<8;i++)begin
      if(i==4)
        break;
      else
        $display("i is %0d",i);
      y++;
    end
    return y;
    $display("here is in demo_func2");
  endfunction

  task demo_task;
    for(int i=0;i<8;i++)begin
      if(i==4)
        break;
      else
        $display("i is %0d",i);
    end
    $display("here is in demo_task");
    return;
    $display("here is in demo_task at last");
  endtask

endmodule : top


                                           code/6.4.2/run.do                                                                                   0000775 0000765 0000765 00000000227 14307521704 011162  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.4.2/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307521704 010600  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.4.1/demo_tb.sv                                                                               0000775 0000765 0000765 00000001515 14307521314 012012  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    $display("------------ for -------------------");
    begin
      integer i;
      for(i=0;i<3;i++)
        $display("i is %0d",i);
      for(int i=0;i<3;i++)
        $display("i is %0d",i);
    end
    $display("------------ do...while ------------");
    begin
      int i=0;
      do begin
        i++;
        $display("i is %0d",i);
      end while(i<3);
      do begin
        $display("Hello in do...while");
      end while(0);
      while(0) begin
        $display("Hello in while");
      end
    end
    $display("------------ foreach ---------------");
    begin
      int q[$] = {0,1,2,3};
      foreach(q[idx])begin
        $display("q[%0d] is %0d",idx,q[idx]);
      end
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                                                                                                                                                                   code/6.4.1/run.do                                                                                   0000775 0000765 0000765 00000000227 14307520306 011156  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.4.1/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307520306 010574  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.3.2/demo_tb.sv                                                                               0000775 0000765 0000765 00000003246 14307512403 012014  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    begin
      int q_in[$],q_out[$];
      q_in = {0,1,2,3,4};
      $display("q_in is %p",q_in);
      get_double1(q_in,q_out);
      $display("get_double1 -> q_out is %p",q_out);
      get_double2(q_in,q_out);
      $display("get_double2 -> q_out is %p",q_out);
      fork
        q_in = {0,1,2,3,4};
        $display("q_in is %p",q_in);
        begin
          #10ns;
          q_in = {5,6,7,8,9};
          $display("after delay 10ns, q_in change to %p",q_in);
        end
        begin
          get_double1(q_in,q_out);
          $display("get_double1 -> q_out is %p",q_out);
        end
        begin
          get_double2(q_in,q_out);
          $display("get_double2 -> q_out is %p",q_out);
        end
        begin
          get_double3(q_in,q_out);
          $display("get_double3 -> q_out is %p",q_out);
        end
      join
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  task get_double1;
    input int q_in[$];
    output int q_out[$];

    #20ns;
    $display("finish delay 20ns in get_double1");
    foreach(q_in[idx])
      q_out[idx] = q_in[idx] * 2;
  endtask

  task get_double2;
    ref int q_in[$];
    output int q_out[$];

    #20ns;
    $display("finish delay 20ns in get_double2");
    foreach(q_in[idx])
      q_out[idx] = q_in[idx] * 2;
  endtask

  task get_double3;
    //const ref int q_in[$];
    ref int q_in[$];
    output int q_out[$];

    #20ns;
    $display("finish delay 20ns in get_double2");
    #10ns;
    q_in = {0,6,9};
    $display("get_double3 -> modify q_in to %p",q_in);
    foreach(q_in[idx])
      q_out[idx] = q_in[idx] * 2;
  endtask

endmodule : top




                                                                                                                                                                                                                                                                                                                                                          code/6.3.2/run.do                                                                                   0000775 0000765 0000765 00000000227 14307507423 011163  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.3.2/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307507423 010601  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.3.1/demo_tb.sv                                                                               0000775 0000765 0000765 00000001016 14340272732 012011  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    begin
      int random_number;
      random_number = get_random_number(1);
      $display("get random number %0d",random_number);
      void'(get_random_number(1));
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  function int get_random_number;
    input mode;
    $display("call get_random_number!");
    if(mode)
      return $urandom_range(10,0);
    else 
      return $urandom_range(20,10);
  endfunction

endmodule : top




                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  code/6.3.1/run.do                                                                                   0000775 0000765 0000765 00000000227 14340272271 011157  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.3.1/tb.f                                                                                     0000775 0000765 0000765 00000000014 14340272244 010575  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.1.8.3/demo_tb.sv                                                                             0000775 0000765 0000765 00000001331 14307251344 012156  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    begin
      bit[3:0] a,b; // equal to bit unsigned[3:0] a,b
      a = 3;
      b = 13;
      $display("%0d(%b) * %0d(%b) = %0d(%b)",a,a,b,b,(a*b),(a*b));
      $display("%0d(%b) * %0d(%b) = %0d(%b)",a,a,b,b,2'(a*b),2'(a*b));
      $display("%0d(%b) * %0d(%b) = %0d(%b)",a,a,b,b,6'(a*b),6'(a*b));
    end
    begin
      bit signed [3:0] c,d;
      c = 3;
      d = -2;
      $display("%0d(%b) * %0d(%b) = %0d(%b)",c,c,d,d,(c*d),(c*d));
      $display("%0d(%b) * %0d(%b) = %0d(%b)",c,c,d,d,2'(c*d),2'(c*d));
      $display("%0d(%b) * %0d(%b) = %0d(%b)",c,c,d,d,6'(c*d),6'(c*d));
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                                                                                       code/6.1.8.3/run.do                                                                                 0000775 0000765 0000765 00000000260 14307247267 011334  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.8.2/demo_tb.sv                                                                             0000775 0000765 0000765 00000001426 14307247162 012165  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  reg [7:0] regA, regB;
  reg signed [7:0] regS;

  initial begin
    $display("%0t -> Start!!!",$time);
    regA = unsigned'(-4); // regA = 8'b11111100
    $display("%0t -> regA is %0b",$time,regA);
    regB = unsigned'(-4'd4); // regB = 8'b00001100
    $display("%0t -> regB is %0b",$time,regB);
    regS = signed'(4'b1100); // regS = -4
    $display("%0t -> regS is %0b",$time,regS);
    begin
      bit[3:0] a,b,y;
      a = 4'b0001;
      b = 4'b1101;
      y = signed'(a) + signed'(b); //1+(-3) = -2 
      $display("%0d(%b) + %0d(%b) = %0d(%b)",a,a,b,b,signed'(y),y);
      y = unsigned'(a) + unsigned'(b); //1+(13) = 14
      $display("%0d(%b) + %0d(%b) = %0d(%b)",a,a,b,b,unsigned'(y),y);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                          code/6.1.8.2/run.do                                                                                 0000775 0000765 0000765 00000000260 14307246214 011322  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.2/demo_tb.sv                                                                                 0000775 0000765 0000765 00000004410 14352211575 011653  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    begin
      int a,b,b_tmp;
      a = 3;
      $display("a:%0d",a);
      $display("a++: %0d",a++);
      $display("after a++, a:%0d",a);
      a = 3;
      $display("a:%0d",a);
      $display("++a: %0d",++a);
      $display("after ++a:%0d",a);
      a = 3;
      $display("a:%0d",a);
      $display("a--: %0d",a--);
      $display("after a--, a:%0d",a);
      a = 3;
      $display("a:%0d",a);
      $display("--a: %0d",--a);
      $display("after --a:%0d",a);
      b_tmp = 3;
      b = 3;
      b += 1;
      $display("b: %0d  '+=1' result: %0d",b_tmp,b); 
      b = 3;
      b -= 1;
      $display("b: %0d  '-=1' result: %0d",b_tmp,b);
      b = 3;
      b *= 2;
      $display("b: %0d  '*=2' result: %0d",b_tmp,b);
      b = 3;
      b /= 3;
      $display("b: %0d  '/=3' result: %0d",b_tmp,b);
      b = 3;
      b %= 2;
      $display("b: %0d  '%%=2' result: %0d",b_tmp,b);
    end
    begin
      bit[2:0] b_tmp,b;
      b_tmp = 3'b011;
      b = 3'b011;
      b &= 3'b101;
      $display("b: %b  '&=3'b101' result: %b",b_tmp,b); 
      b = 3'b011;
      b |= 3'b101;
      $display("b: %b  '|=3'b101' result: %b",b_tmp,b); 
      b = 3'b011;
      b ^= 3'b101;
      $display("b: %b  '^=3'b101' result: %b",b_tmp,b); 
    end
    begin
      bit[5:0] b_tmp,b;
      b_tmp = 6'b100011;
      b = 6'b100011;
      b <<= 3;
      $display("unsigned b: %0b  '<< 3' result: %b",b_tmp,b);
      b = 6'b100011;
      b <<<= 3;
      $display("unsigned b: %0b  '<<< 3' result: %b",b_tmp,b);
      b = 6'b100011;
      b >>= 3;
      $display("unsigned b: %0b  '>> 3' result: %b",b_tmp,b);
      b = 6'b100011;
      b >>>= 3;
      $display("unsigned b: %0b  '>>> 3' result: %b",b_tmp,b);
    end
    begin
      bit signed[5:0] b_tmp,b;
      b_tmp = 6'b100011;
      b = 6'b100011;
      b <<= 3;
      $display("signed b: %0b  '<< 3' result: %b",b_tmp,b);
      b = 6'b100011;
      b <<<= 3;
      $display("signed b: %0b  '<<< 3' result: %b",b_tmp,b);
      b = 6'b100011;
      b >>= 3;
      $display("signed b: %0b  '>> 3' result: %b",b_tmp,b);
      b = 6'b100011;
      b >>>= 3;
      $display("signed b: %0b  '>>> 3' result: %b",b_tmp,b);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                        code/6.2/run.do                                                                                     0000775 0000765 0000765 00000000227 14307257103 011017  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.2/tb.f                                                                                       0000775 0000765 0000765 00000000014 14307257103 010435  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.1.8.1/run.do                                                                                 0000775 0000765 0000765 00000000260 14307244211 011314  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.8.1/demo_tb.sv                                                                             0000775 0000765 0000765 00000001765 14356511705 012173  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    begin
      real r = 3.1415;
      int i;
      longint li;
      $display("int'(r) value is %g",int'(r)); //3
      if($cast(i,r))
        $display("$cast(int i,real r) -> i: %g, r: %g",i,r);
      else
        $display("$cast(int i,real r) -> ERROR");
      if($cast(li,r)) //3
        $display("$cast(int li,real r) -> li: %g, r: %g",li,r);
      else
        $display("$cast(int li,real r) -> ERROR");
    end
    begin
      typedef enum { red, green, blue, yellow, white, black } Colors;
      Colors col;
      if($cast(col,2+3)) //black
        $display("$cast(col,2+3) -> col name: %s , col value: %0d",col.name(),col);
      else
        $display("$cast(col,2+3) -> ERROR");
      if($cast(col,2+8)) //not exist
        $display("$cast(col,2+8) -> col name: %s , col value: %0d",col.name(),col);
      else
        $display("$cast(col,2+8) -> ERROR");
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


           code/6.1.7/run.do                                                                                   0000775 0000765 0000765 00000000260 14305362112 011153  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.7/demo_tb.sv                                                                               0000775 0000765 0000765 00000000557 14305364264 012031  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    begin
      const logic[3:0] c1 = 'd3;
      const int c2 = 'd5;
      const real c3 = 3.1415;
      //c1 = 'd4; //error
      $display("c1 is %0d",c1);
      $display("c2 is %0d",c2);
      $display("c3 is %g",c3);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                 code/6.1.6.2/demo_tb.sv                                                                             0000775 0000765 0000765 00000001723 14305344602 012156  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    $display("------------------ union --------------");
    begin
      typedef union {
        int a;
        byte b;
        bit[7:0] c;
      } my_union_u;

      my_union_u my_u;
      my_u.a = 'h3;
      my_u.b = 'h34;
      my_u.c = 'h56;
      $display("my_u is %p",my_u);
      $display("a is %h, b is %h, c is %h",my_u.a,my_u.b,my_u.c);
    end
    $display("-------------------- packed union ---------------");
    begin
      typedef struct packed{
        bit[15:0] a;
        bit[15:0] b;
      } my_struct_ps;

      typedef union packed{
        int a;
        my_struct_ps b;
        bit[31:0] c;
      } my_union_pu;

      my_union_pu my_pu;
      my_pu.a = 'h3;
      my_pu.b = 'h34;
      my_pu.c = 'h56;
      $display("my_pu is %p",my_pu);
      $display("a is %h, b is %h, c is %h",my_pu.a,my_pu.b,my_pu.c);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                             code/6.1.6.2/run.do                                                                                 0000775 0000765 0000765 00000000260 14305340427 011317  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.4.5.3/demo_tb.sv                                                                           0000775 0000765 0000765 00000004777 14305313130 012324  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    $display("------------------ fixed size array --------------");
    begin
      int arr1[8];
      arr1 = '{11,7,9,6,24,5,14,9};
      $display("arr1 is %p",arr1);
      $display("sum of arr1 is %0d",arr1.sum());
      $display("sum & item+1 of arr1 is %0d",arr1.sum with(item+1));
      $display("product of arr1 is %0d",arr1.product());
      $display("product & item-1 of arr1 is %0d",arr1.product with(item-1));
      arr1 = '{1,0,1,1,0,1,1,1};
      $display("and of arr1 is %0d",arr1.and());
      $display("or of arr1 is %0d",arr1.or());
      $display("xor of arr1 is %0d",arr1.xor());
    end
    $display("-------------------- dynamic array ---------------");
    begin
      int arr2[];
      arr2 = new[8]; 
      arr2 = '{11,7,9,6,24,5,14,9};
      $display("arr2 is %p",arr2);
      $display("sum of arr2 is %0d",arr2.sum());
      $display("sum & item+1 of arr2 is %0d",arr2.sum with(item+1));
      $display("product of arr2 is %0d",arr2.product());
      $display("product & item-1 of arr2 is %0d",arr2.product with(item-1));
      arr2 = '{1,0,1,1,0,1,1,1};
      $display("and of arr2 is %0d",arr2.and());
      $display("or of arr2 is %0d",arr2.or());
      $display("xor of arr2 is %0d",arr2.xor());
    end
    $display("-------------------- associate array -------------");
    begin
      int arr3[int];
      arr3 = '{0:11,1:7,2:9,3:6,4:24,5:5,6:14,7:9};
      $display("arr3 is %p",arr3);
      $display("sum of arr3 is %0d",arr3.sum());
      $display("sum & item+1 of arr3 is %0d",arr3.sum with(item+1));
      $display("product of arr3 is %0d",arr3.product());
      $display("product & item-1 of arr3 is %0d",arr3.product with(item-1));
      arr3 = '{0:1,1:0,2:1,3:1,4:0,5:1,6:1,7:1};
      $display("and of arr3 is %0d",arr3.and());
      $display("or of arr3 is %0d",arr3.or());
      $display("xor of arr3 is %0d",arr3.xor());
    end
    $display("-------------------- queue -----------------------");
    begin
      int q[$];
      q = {11,7,9,6,24,5,14,9};
      $display("q is %p",q);
      $display("sum of q is %0d",q.sum());
      $display("sum & item+1 of q is %0d",q.sum with(item+1));
      $display("product of q is %0d",q.product());
      $display("product & item-1 of q is %0d",q.product with(item-1));
      q = {1,0,1,1,0,1,1,1};
      $display("and of q is %0d",q.and());
      $display("or of q is %0d",q.or());
      $display("xor of q is %0d",q.xor());
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


 code/6.1.4.5.3/run.do                                                                               0000775 0000765 0000765 00000000260 14305310575 011462  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.4.5.2/demo_tb.sv                                                                           0000775 0000765 0000765 00000003131 14305270034 012307  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    $display("------------------ fixed size array --------------");
    begin
      int arr1[8];
      arr1 = '{11,7,9,6,24,5,14,9};
      $display("arr1 is %p",arr1);
      arr1.reverse();
      $display("reverse arr1 is %p",arr1);
      arr1.sort();
      $display("sort arr1 is %p",arr1);
      arr1.rsort();
      $display("rsort arr1 is %p",arr1);
      arr1.shuffle();
      $display("shuffle arr1 is %p",arr1);
      foreach(arr1[idx])begin
        $display("arr1[%0d][2:0] is %0d ,arr1[%0d] is %0d",idx,arr1[idx][2:0],idx,arr1[idx]);
      end
      arr1.sort with(item[2:0]);
      $display("sort with item[2:0] arr1 is %p",arr1);
    end
    $display("-------------------- dynamic array ---------------");
    begin
      logic[5:0] arr2[];
      arr2 = new[8]; 
      arr2 = '{11,7,9,6,24,5,14,9};
      $display("arr2 is %p",arr2);
      arr2.reverse();
      $display("reverse arr2 is %p",arr2);
      arr2.sort();
      $display("sort arr2 is %p",arr2);
      arr2.rsort();
      $display("rsort arr2 is %p",arr2);
      arr2.shuffle();
      $display("shuffle arr2 is %p",arr2);
    end
    $display("-------------------- queue -----------------------");
    begin
      logic[7:0] q[$];
      q = {11,7,9,6,24,5,14,9};
      $display("q is %p",q);
      q.reverse();
      $display("reverse q is %p",q);
      q.sort();
      $display("sort q is %p",q);
      q.rsort();
      $display("rsort q is %p",q);
      q.shuffle();
      $display("shuffle q is %p",q);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                       code/6.1.4.5.2/run.do                                                                               0000775 0000765 0000765 00000000260 14305265620 011461  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.4.5.1/demo_tb.sv                                                                           0000775 0000765 0000765 00000012714 14305265762 012331  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    $display("------------------ fixed size array --------------");
    begin
      int arr1[8];
      int q_tmp1[$];
      arr1 = '{11,7,9,6,24,5,14,9};
      $display("arr1 is %p",arr1);
      q_tmp1 = arr1.find with(item>=9);
      $display("item >= 9 of arr1 is %p",q_tmp1);
      q_tmp1 = arr1.find(x) with(x>=9);
      $display("item >= 9 of arr1 is %p",q_tmp1);
      q_tmp1 = arr1.find_index with(item>=9);
      $display("item >= 9 of arr1 index is %p",q_tmp1);
      q_tmp1 = arr1.find_first with(item>=9);
      $display("first item >= 9 of arr1 is %p",q_tmp1);
      q_tmp1 = arr1.find_first_index with(item>=9);
      $display("first item >= 9 of arr1 index is %p",q_tmp1);
      q_tmp1 = arr1.find_last with(item>=9);
      $display("last item >= 9 of arr1 is %p",q_tmp1);
      q_tmp1 = arr1.find_last_index with(item>=9);
      $display("last item >= 9 of arr1 index is %p",q_tmp1);
      q_tmp1 = arr1.min();
      $display("min of arr1 is %p",q_tmp1);
      q_tmp1 = arr1.max();
      $display("max of arr1 is %p",q_tmp1);
      q_tmp1 = arr1.unique();
      $display("unique of arr1 is %p",q_tmp1);
      q_tmp1 = arr1.unique_index();
      $display("unique index of arr1 is %p",q_tmp1);
    end
    $display("-------------------- dynamic array ---------------");
    begin
      logic[5:0] arr2[];
      logic[5:0] q_tmp2_item[$];
      int q_tmp2_index[$];
      arr2 = new[8]; 
      arr2 = '{11,7,9,6,24,5,14,9};
      $display("arr2 is %p",arr2);
      q_tmp2_item = arr2.find with(item>=9);
      $display("item >= 9 of arr2 is %p",q_tmp2_item);
      q_tmp2_item = arr2.find(x) with(x>=9);
      $display("item >= 9 of arr2 is %p",q_tmp2_item);
      q_tmp2_index = arr2.find_index with(item>=9);
      $display("item >= 9 of arr2 index is %p",q_tmp2_index);
      q_tmp2_item = arr2.find_first with(item>=9);
      $display("first item >= 9 of arr2 is %p",q_tmp2_item);
      q_tmp2_index = arr2.find_first_index with(item>=9);
      $display("first item >= 9 of arr2 index is %p",q_tmp2_index);
      q_tmp2_item = arr2.find_last with(item>=9);
      $display("last item >= 9 of arr2 is %p",q_tmp2_item);
      q_tmp2_index = arr2.find_last_index with(item>=9);
      $display("last item >= 9 of arr2 index is %p",q_tmp2_index);
      q_tmp2_item = arr2.min();
      $display("min of arr2 is %p",q_tmp2_item);
      q_tmp2_item = arr2.max();
      $display("max of arr2 is %p",q_tmp2_item);
      q_tmp2_item = arr2.unique();
      $display("unique of arr2 is %p",q_tmp2_item);
      q_tmp2_index = arr2.unique_index();
      $display("unique index of arr2 is %p",q_tmp2_index);
    end
    $display("-------------------- associate array -------------");
    begin
      int arr3[int];
      int q_tmp3[$];
      string arr4[string];
      arr3 = '{0:11,1:7,2:9,3:6,4:24,5:5,6:14,7:9};
      $display("arr3 is %p",arr3);
      arr4 = '{"red":"r","blue":"b","yellow":"y","green":"g"};
      $display("arr4 is %p",arr4);
      q_tmp3 = arr3.find with(item>=9);
      $display("item >= 9 of arr3 is %p",q_tmp3);
      q_tmp3 = arr3.find(x) with(x>=9);
      $display("item >= 9 of arr3 is %p",q_tmp3);
      q_tmp3 = arr3.find_index with(item>=9);
      $display("item >= 9 of arr3 index is %p",q_tmp3);
      q_tmp3 = arr3.find_first with(item>=9);
      $display("first item >= 9 of arr3 is %p",q_tmp3);
      q_tmp3 = arr3.find_first_index with(item>=9);
      $display("first item >= 9 of arr3 index is %p",q_tmp3);
      q_tmp3 = arr3.find_last with(item>=9);
      $display("last item >= 9 of arr3 is %p",q_tmp3);
      q_tmp3 = arr3.find_last_index with(item>=9);
      $display("last item >= 9 of arr3 index is %p",q_tmp3);
      q_tmp3 = arr3.min();
      $display("min of arr3 is %p",q_tmp3);
      q_tmp3 = arr3.max();
      $display("max of arr3 is %p",q_tmp3);
      q_tmp3 = arr3.unique();
      $display("unique of arr3 is %p",q_tmp3);
      q_tmp3 = arr3.unique_index();
      $display("unique index of arr3 is %p",q_tmp3);
      $display("min of arr4 is %p",arr4.min());
      $display("unique of arr4 is %p",arr4.unique());
      $display("unique index of arr4 is %p",arr4.unique_index());
    end
    $display("-------------------- queue -----------------------");
    begin
      logic[7:0] q[$];
      logic[7:0] q_tmp4_item[$];
      int q_tmp4_index[$];
      q = {11,7,9,6,24,5,14,9};
      $display("q is %p",q);
      q_tmp4_item = q.find with(item>=9);
      $display("item >= 9 of q is %p",q_tmp4_item);
      q_tmp4_item = q.find(x) with(x>=9);
      $display("item >= 9 of q is %p",q_tmp4_item);
      q_tmp4_index = q.find_index with(item>=9);
      $display("item >= 9 of q index is %p",q_tmp4_index);
      q_tmp4_item = q.find_first with(item>=9);
      $display("first item >= 9 of q is %p",q_tmp4_item);
      q_tmp4_index = q.find_first_index with(item>=9);
      $display("first item >= 9 of q index is %p",q_tmp4_index);
      q_tmp4_item = q.find_last with(item>=9);
      $display("last item >= 9 of q is %p",q_tmp4_item);
      q_tmp4_index = q.find_last_index with(item>=9);
      $display("last item >= 9 of q index is %p",q_tmp4_index);
      q_tmp4_item = q.min();
      $display("min of q is %p",q_tmp4_item);
      q_tmp4_item = q.max();
      $display("max of q is %p",q_tmp4_item);
      q_tmp4_item = q.unique();
      $display("unique of q is %p",q_tmp4_item);
      q_tmp4_index = q.unique_index();
      $display("unique index of q is %p",q_tmp4_index);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                    code/6.1.4.5.1/run.do                                                                               0000775 0000765 0000765 00000000260 14305250503 011452  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.4.4/run.do                                                                                 0000775 0000765 0000765 00000000260 14305020052 011304  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.4.4/demo_tb.sv                                                                             0000775 0000765 0000765 00000003522 14305023307 012151  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  int q1[int];
  bit[2:0] q2[string];
  int q1_idx;
  string q2_idx;

  initial begin
    $display("%0t -> Start!!!",$time);
    q1 = '{1:3,5:2,9:6,14:5};           //给关联数组中添加4个元素
    q2 = '{"red":2,"green":1,"blue":5}; //给关联数组中添加3个元素
    q1[19] = 'd99;
    q2["yellow"] = 'd3;
    $display("q1 is %p",q1);
    $display("q2 is %p",q2);
    foreach(q1[idx]) begin
      $display("q1[%0d] is %0d",idx,q1[idx]);
    end
    foreach(q2[idx]) begin
      $display("q2[%0s] is %0d",idx,q2[idx]);
    end
    $display("q1 size is %0d, q2 size is %0d",q1.size(),q2.size());
    if(q2.exists("red"))
      $display("exist key -> red in q2");
    else
      $display("not exist key -> red in q2");
    if(q2.exists("black"))
      $display("exist key -> black in q2");
    else
      $display("not exist key -> black in q2");
    if(q1.first(q1_idx)) 
      $display("first item of q1 is q1[%0d]",q1_idx);
    else
      $display("q1 is empty");
    if(q2.first(q2_idx)) 
      $display("first item of q2 is q2[%s]",q2_idx);
    else
      $display("q2 is empty");
    if(q1.last(q1_idx)) 
      $display("last item of q1 is q1[%0d]",q1_idx);
    else
      $display("q1 is empty");
    if(q2.last(q2_idx)) 
      $display("last item of q2 is q2[%s]",q2_idx);
    else
      $display("q2 is empty");
    repeat(q2.size()+1)begin
      if(q2.next(q2_idx))
        $display("next item of q2 is q2[%s]",q2_idx); 
      else
        $display("not exist next item of q2");
    end 
    repeat(q2.size()+1)begin
      if(q2.prev(q2_idx))
        $display("prev item of q2 is q2[%s]",q2_idx); 
      else
        $display("not exist prev item of q2");
    end 
    q1.delete();
    q2.delete();
    $display("q1 size is %0d, q2 size is %0d",q1.size(),q2.size());
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                              code/6.1.4.3/demo_tb.sv                                                                             0000775 0000765 0000765 00000002654 14305020444 012154  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  int q1[$];
  int pop_data;
  string q2[$];

  initial begin
    $display("%0t -> Start!!!",$time);

    q1 = {3,2,9,4};//给int型队列中4个元素赋值
    q2 = {"red","green","blue"};//给string类型队列中3个元素赋值
    $display("q1 is %p",q1);
    $display("q2 is %p",q2);
    foreach(q1[idx])begin
      $display("q1[%0d] is %0d",idx,q1[idx]);
    end
    foreach(q2[idx])begin
      $display("q2[%0d] is %s",idx,q2[idx]);
    end
    $display("the first item of q1 is %0d",q1[0]);    //q1[0]的值为3
    $display("the last item of q1 is %0d",q1[$]);     //q1[$]的值为4
    $display("the prev last item of q1 is %0d",q1[$-1]);  //q1[$-1]的值为9
    q1.push_back('d1); // {3,2,9,4,1}
    q1.push_back('d2); // {3,2,9,4,1,2}
    pop_data = q1.pop_front();// {2,9,4,1,2}
    $display("pop data is %0d",pop_data); //3
    pop_data = q1.pop_front();// {9,4,1,2}
    $display("pop data is %0d",pop_data); //2
    pop_data = q1.pop_back();// {9,4,1}
    $display("pop data is %0d",pop_data); //2
    q1.push_front('d7); // {7,9,4,1}
    q1.insert(1,6); // {7,6,9,4,1}
    q1.insert(2,5); // {7,6,5,9,4,1}
    q1.delete(4);       // {7,6,5,9,1}
    foreach(q1[idx])begin
      $display("q1[%0d] is %0d",idx,q1[idx]); 
    end
    $display("q1 size is %0d",q1.size()); // 5
    q1.delete();
    $display("after delete q1, q1 size is %0d",q1.size());
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                    code/6.1.4.3/run.do                                                                                 0000775 0000765 0000765 00000000260 14304657533 011326  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.4.2/demo_tb.sv                                                                             0000775 0000765 0000765 00000001433 14304657453 012164  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  int arr1[];
  logic[3:0] arr2[];
  bit[2:0] arr3[][];

  initial begin
    $display("%0t -> Start!!!",$time);
    arr1 = new[3]; //声明长度为3的int型数组
    arr2 = new[5]; //声明长度为5的logic[3:0]类型数组
    arr3 = new[4]; //声明长宽为4*2的bit[2:0]类型的二维数组
    foreach(arr3[idx])begin
      arr3[idx] = new[2];
    end
    arr1 = '{7,8,9};      //给长度为3的int型数组中3个元素赋值
    arr2 = '{0,1,2,3,4}; //给长度为5的logic[3:0]类型数组中5个元素赋值
    arr3 = '{'{0,2},'{1,3},'{7,4},'{3,6}};//给长宽为4*2的bit[2:0]类型数组赋值
    $display("arr1 is %p",arr1);
    $display("arr2 is %p",arr2);
    $display("arr3 is %p",arr3);
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                     code/6.1.4.2/run.do                                                                                 0000775 0000765 0000765 00000000260 14304652346 011322  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/3.11.2/A.v                                                                                     0000664 0000765 0000765 00000000127 14277052450 010453  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module A(a,b,out);
  input a, b;
  output wire out;

  assign out = a ^ b;
endmodule

                                                                                                                                                                                                                                                                                                                                                                                                                                         code/3.11.2/B.v                                                                                     0000664 0000765 0000765 00000000241 14277052425 010453  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`include "A.v" 
module B(c,d,e,out);
  input c,d,e;
  output wire out;
  wire out_a;

  A a_inst(.a(c),.b(d),.out(out_a));
  assign out = e & out_a;
endmodule

                                                                                                                                                                                                                                                                                                                                                               code/3.11.2/demo_tb.sv                                                                              0000775 0000765 0000765 00000000504 14277127705 012077  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic c,d,e,out;

  B B_inst(c,d,e,out);

  initial begin
    $display("%0t -> Start!!!",$time);
    repeat(10)begin
    std::randomize(c,d,e);
    #10;
    $display("%0t -> c:%0b d:%0b e:%0b out:%0b",$time,c,d,e,out);
    end

    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                            code/3.11.2/run.do                                                                                  0000775 0000765 0000765 00000000257 14277127631 011247  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \
        +define+ABC=9 \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                 code/3.11.2/tb.f                                                                                    0000775 0000765 0000765 00000000020 14277053202 010647  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     B.v
demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                code/3.11.2/file.txt                                                                                0000664 0000765 0000765 00000000117 14277052263 011565  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     0 -> hello ,here a is 10
1 -> hello ,here a+1 is 11
2 -> hello ,here a+2 is 12
                                                                                                                                                                                                                                                                                                                                                                                                                                                 code/3.10.8/demo_tb.sv                                                                              0000775 0000765 0000765 00000000742 14277046412 012103  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  reg [7:0] regA, regB;
  reg signed [7:0] regS;

  initial begin
    $display("%0t -> Start!!!",$time);
    regA = $unsigned(-4); // regA = 8'b11111100
    $display("%0t -> regA is %0b",$time,regA);
    regB = $unsigned(-4'd4); // regB = 8'b00001100
    $display("%0t -> regB is %0b",$time,regB);
    regS = $signed (4'b1100); // regS = -4
    $display("%0t -> regS is %0b",$time,regS);
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                              code/3.10.8/run.do                                                                                  0000775 0000765 0000765 00000000227 14277045367 011256  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.10.8/tb.f                                                                                    0000775 0000765 0000765 00000000014 14277045367 010674  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/3.10.8/file.txt                                                                                0000664 0000765 0000765 00000000117 14277045367 011601  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     0 -> hello ,here a is 10
1 -> hello ,here a+1 is 11
2 -> hello ,here a+2 is 12
                                                                                                                                                                                                                                                                                                                                                                                                                                                 code/3.10.7/demo_tb.sv                                                                              0000775 0000765 0000765 00000000535 14277044547 012111  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  real a;
  reg[63:0] b;
  real c;

  initial begin
    $display("%0t -> Start!!!",$time);
    a = 3.5;
    b = $realtobits(a);
    c = $bitstoreal(b);
    $display("a is %0f, b is %0h, c is %0f",a,b,c);
    $display("shorter printed form of a is %g",a);
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                   code/3.10.7/run.do                                                                                  0000775 0000765 0000765 00000000227 14276662440 011251  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.10.7/tb.f                                                                                    0000775 0000765 0000765 00000000014 14276662440 010667  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/3.10.7/file.txt                                                                                0000664 0000765 0000765 00000000117 14276662440 011574  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     0 -> hello ,here a is 10
1 -> hello ,here a+1 is 11
2 -> hello ,here a+2 is 12
                                                                                                                                                                                                                                                                                                                                                                                                                                                 code/3.10.5/demo_tb.sv                                                                              0000775 0000765 0000765 00000000771 14276662075 012112  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`timescale 10ns/1ns
module top;
  int a = 'd10;
  reg [8*5:1] s = "hello";
  integer file_h;

  initial begin
    $display("%0t -> Start!!!",$time);
    file_h = $fopen("file.txt");
    $fdisplay(file_h,"%0t -> %s ,here a is %0d",$realtime,s,a);
    #1ns;
    $fwrite(file_h,"%0t -> %s ,here a+1 is %0d\n",$realtime,s,a+1);
    #1ns;
    $fdisplay(file_h,"%0t -> %s ,here a+2 is %0d",$realtime,s,a+2);
    $fclose(file_h);
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




       code/3.10.5/file.txt                                                                                0000664 0000765 0000765 00000000117 14276662100 011563  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     0 -> hello ,here a is 10
1 -> hello ,here a+1 is 11
2 -> hello ,here a+2 is 12
                                                                                                                                                                                                                                                                                                                                                                                                                                                 code/3.10.5/run.do                                                                                  0000775 0000765 0000765 00000000227 14276657600 011251  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.10.5/tb.f                                                                                    0000775 0000765 0000765 00000000014 14276657600 010667  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    code/3.10.1/demo_tb.sv                                                                              0000775 0000765 0000765 00000001135 14276654312 012074  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`timescale 10ns/1ns
module top;
  int a = 'd10;
  reg [8*5:1] s = "hello";

  initial begin
    $display("%0t -> Start!!!",$time);
    $display("%0t -> %s ,here a is %0d",$time,s,a);
    $write("here is write print info");
    #10ns;
    $display("%0t -> %s ,here a is %0h",$time,s,a);
    #1ns;
    $display("%0t -> %s ,here a is %0b",$time,s,a);
    #10ns;
    $display("%0t -> %s ,here a is %b",$time,s,a);
    $display("%0t -> %s ,\n here a is %b",$time,s,a);
    $display("%0t -> %s ,\t here a is %b",$realtime,s,a);

    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                                                                                                                                                                                                   code/3.10.1/run.do                                                                                  0000775 0000765 0000765 00000000227 14276651060 011237  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.10.1/tb.f                                                                                    0000775 0000765 0000765 00000000014 14276651060 010655  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/3.9.2/demo_tb.sv                                                                               0000775 0000765 0000765 00000000300 14276654015 012016  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  parameter time_out = 30;

  initial begin
    $display("%0t -> Start!!!",$time);
    wait('d9);
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                                                                                                code/3.9.2/run.do                                                                                   0000775 0000765 0000765 00000000227 14276645467 011206  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.9.2/tb.f                                                                                     0000775 0000765 0000765 00000000014 14276645467 010624  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/3.9.1/demo_tb.sv                                                                               0000775 0000765 0000765 00000002346 14276637100 012025  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  parameter time_out = 30;

  initial begin
    $display("%0t -> Start!!!",$time);
    $display("%0t -> ------------------ disable normal block---------------------------------",$time);
    begin:block_name
      $display("here is statement 1");
      disable block_name;
      $display("here is statement 2");// this line code never be executed
    end
    $display("here is statement 3");

    $display("%0t -> ------------------ disable fork block---------------------------------",$time);
    fork: fork_name
      forever begin
        #10ns;
        $display("%0t -> delay 10ns",$time);
      end
      begin
        #time_out;
        $display("%0t -> time out !",$time);
        disable fork_name;
      end
    join

    $display("%0t -> ------------------ disable task block---------------------------------",$time);
    task_name;

    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  task task_name;
    fork: fork_name
      forever begin
        #10ns;
        $display("%0t -> delay 10ns",$time);
      end
      begin
        #time_out;
        $display("%0t -> time out !",$time);
        disable task_name;
      end
    join
    $display("should never see this line be printed!");
  endtask

endmodule : top




                                                                                                                                                                                                                                                                                          code/3.9.1/run.do                                                                                   0000775 0000765 0000765 00000000227 14276634165 011176  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.9.1/tb.f                                                                                     0000775 0000765 0000765 00000000014 14276634165 010614  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/3.7.3/demo_tb.sv                                                                               0000775 0000765 0000765 00000001120 14276626235 012021  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  generate 
    genvar i;
    for(i=0;i<5;i=i+1) begin:gen_name1
      initial begin
        repeat(i) #10ns;
        $display("%0t -> Here gen_name1 is generated code num %0d",$time,i);
      end
    end 
  endgenerate    

  for(genvar i=0;i<5;i=i+1) begin:gen_name2
      initial begin
        repeat(i) #10ns;
        $display("%0t -> Here gen_name2 is generated code num %0d",$time,i);
      end
  end

  initial begin
    //int random_number;
    $display("%0t -> Start!!!",$time);
    #1000;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                                                                                                                                                                                                                code/3.7.3/run.do                                                                                   0000775 0000765 0000765 00000000227 14276575002 011170  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.7.3/tb.f                                                                                     0000775 0000765 0000765 00000000014 14276575002 010606  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/3.7.1/demo_tb.sv                                                                               0000775 0000765 0000765 00000002577 14276452711 012034  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  reg[3:0] a;


  initial begin
    $display("%0t -> Start!!!",$time);
    a = 4'b1000;
    case(a)
      4'b1???: $display("%0t -> a: %b in case 4'b1???",$time,a);
      4'b01??: $display("%0t -> a: %b in case 4'b01??",$time,a);
      4'b001?: $display("%0t -> a: %b in case 4'b0001?",$time,a);
      default: $display("%0t -> a: %b in case default value",$time,a);
    endcase
    a = 4'b1???;
    case(a)
      4'b1???: $display("%0t -> a: %b in case 4'b1???",$time,a);
      4'b01??: $display("%0t -> a: %b in case 4'b01??",$time,a);
      4'b001?: $display("%0t -> a: %b in case 4'b0001?",$time,a);
      default: $display("%0t -> a: %b in case default value",$time,a);
    endcase
    a = 4'b1000;
    casez(a)
      4'b1??z: $display("%0t -> a: %b in casez 4'b1???",$time,a);
      4'b01?z: $display("%0t -> a: %b in casez 4'b01??",$time,a);
      4'b001?: $display("%0t -> a: %b in casez 4'b0001?",$time,a);
      default: $display("%0t -> a: %b in casez default value",$time,a);
    endcase
    a = 4'b0100;
    casex(a)
      4'b1?xz: $display("%0t -> a: %b in casex 4'b1???",$time,a);
      4'b01xz: $display("%0t -> a: %b in casex 4'b01??",$time,a);
      4'b001?: $display("%0t -> a: %b in casex 4'b0001?",$time,a);
      default: $display("%0t -> a: %b in casex default value",$time,a);
    endcase
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                 code/3.7.1/run.do                                                                                   0000775 0000765 0000765 00000000227 14276446745 011201  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.7.1/tb.f                                                                                     0000775 0000765 0000765 00000000014 14276446745 010617  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/3.6.3/demo_tb.sv                                                                               0000775 0000765 0000765 00000001175 14276443162 012026  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  reg[15:0] a,b,c,d,e;
  wire[15:0] f;

  always@* begin
    c = a + b;
    d = a + b + c;
  end

  assign f = c + d;
  //force f = c + d; //not allowed
  //release f; //not allowed
  initial begin
    $display("%0t -> Start!!!",$time);
    assign e = c + d;
    force e = 'd9;
    force f = 'd10;
    a = 'd1;
    b = 'd1;
    repeat(10)begin
      a++;
      b++;
      if(a=='d5) begin
        release e;
        release f;
      end
      #10;
      $display("%0t -> a: %0d  b: %0d c: %0d d: %0d e: %0d f: %0d",$time,a,b,c,d,e,f);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                                                                                                                                                                   code/3.6.3/run.do                                                                                   0000775 0000765 0000765 00000000227 14276411625 011167  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.6.3/tb.f                                                                                     0000775 0000765 0000765 00000000014 14276411625 010605  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.17.8/demo_tb.sv                                                                              0000775 0000765 0000765 00000006033 14340511064 012103  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  bit[2:0] a;
  bit[2:0] b;

  covergroup cg1;
    cover_point_a: coverpoint a;
    cover_point_b: coverpoint b;
    cross_cover_point_a_b: cross cover_point_a, cover_point_b;
    cross_cover_point_a_b_user1: cross cover_point_a, cover_point_b{
      bins user_bins1 = binsof(cover_point_a) intersect {0} && binsof(cover_point_b) intersect {0};
      bins user_bins2 = binsof(cover_point_a) intersect {1} && binsof(cover_point_b) intersect {1};
      bins user_bins3 = binsof(cover_point_a) intersect {2} && binsof(cover_point_b) intersect {2};
      bins user_bins4 = binsof(cover_point_a) intersect {3} && binsof(cover_point_b) intersect {3};
    }
    cross_cover_point_a_b_user2: cross a, b{
      bins user_bins1 = binsof(a) with (a == 0) && binsof(b) with (b == 0);
      bins user_bins2 = binsof(a) with (a == 1) && binsof(b) with (b == 1);
      bins user_bins3 = binsof(a) with (a == 2) && binsof(b) with (b == 2);
      bins user_bins4 = binsof(a) with (a == 3) && binsof(b) with (b == 3);
    }
    cross_cover_point_a_b_user3: cross cover_point_a, cover_point_b{
      bins user_bins = !binsof(cover_point_a) intersect {4,5,6,7} || !binsof(cover_point_b) intersect {4,5,6,7};
    }
    cross_cover_point_a_b_user4: cross a, b{
      bins user_bins1 = '{'{0,0}};
      bins user_bins2 = '{'{1,1}};
      bins user_bins3 = '{'{2,2}};
      bins user_bins4 = '{'{3,3}};
    }
    cross_cover_point_a_b_user5: cross a, b{
      function CrossQueueType myfun1();
        myfun1.push_back('{0,0});
      endfunction
      function CrossQueueType myfun2();
        myfun2.push_back('{1,1});
      endfunction
      function CrossQueueType myfun3();
        myfun3.push_back('{2,2});
      endfunction
      function CrossQueueType myfun4();
        myfun4.push_back('{3,3});
      endfunction

      bins user_bins1 = myfun1();
      bins user_bins2 = myfun2();
      bins user_bins3 = myfun3();
      bins user_bins4 = myfun4();
    }
  endgroup

  function new();
    cg1 = new();
  endfunction

endclass

module top;
  bit[2:0] values[$] = '{0,1,2,3,3};

  initial begin
    demo_class c1 = new();
    foreach(values[i])begin
      c1.a = values[i];
      c1.b = values[i];
      c1.cg1.sample();
    end
    $display("cg1 cover_point_a coverage: %g%%",c1.cg1.cover_point_a.get_coverage());
    $display("cg1 cover_point_b coverage: %g%%",c1.cg1.cover_point_b.get_coverage());
    $display("cg1 cross_cover_point_a_b coverage: %g%%",c1.cg1.cross_cover_point_a_b.get_coverage());
    $display("cg1 cross_cover_point_a_b_user1 coverage: %g%%",c1.cg1.cross_cover_point_a_b_user1.get_coverage());
    $display("cg1 cross_cover_point_a_b_user2 coverage: %g%%",c1.cg1.cross_cover_point_a_b_user2.get_coverage());
    $display("cg1 cross_cover_point_a_b_user3 coverage: %g%%",c1.cg1.cross_cover_point_a_b_user3.get_coverage());
    //$display("cg1 cross_cover_point_a_b_user4 coverage: %g%%",c1.cg1.cross_cover_point_a_b_user4.get_coverage());
    //$display("cg1 cross_cover_point_a_b_user5 coverage: %g%%",c1.cg1.cross_cover_point_a_b_user5.get_coverage());
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     code/6.17.8/run.do                                                                                  0000775 0000765 0000765 00000000324 14340311365 011247  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -lca \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                            code/3.6.2/run.do                                                                                   0000775 0000765 0000765 00000000227 14276355221 011165  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.6.2/tb.f                                                                                     0000775 0000765 0000765 00000000014 14276355221 010603  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/3.6.2/demo_tb.sv                                                                               0000775 0000765 0000765 00000001060 14276407206 012015  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  reg[15:0] a,b,c,d,e;
  wire[15:0] f;

  always@* begin
    c = a + b;
    d = a + b + c;
  end

  assign f = c + d;
  //deassign f; //not allowed
  initial begin
    $display("%0t -> Start!!!",$time);
    assign e = c + d;
    //assign f = c + d; //not allowed
    a = 'd1;
    b = 'd1;
    repeat(10)begin
      a++;
      b++;
      if(a=='d5) deassign e;
      #10;
      $display("%0t -> a: %0d  b: %0d c: %0d d: %0d e: %0d f: %0d",$time,a,b,c,d,e,f);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                                                                                                                                                                                                                                                code/3.3.10/demo_tb.sv                                                                              0000775 0000765 0000765 00000001645 14276156744 012112  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  initial begin
    $display("%0t -> Start!!!",$time);

    begin
      reg[15:0] a;
      a = 16'habcd;
      $display("%0t -> a[3:0]: %0h  a[0*4+:4]: %0h",$time,a[3:0],a[0*4+:4]);//a[i*4+:4] is equal to a[(i+1)*4-1:i*4]
      $display("%0t -> a[7:4]: %0h  a[1*4+:4]: %0h",$time,a[7:4],a[1*4+:4]);
      $display("%0t -> a[11:8]: %0h  a[2*4+:4]: %0h",$time,a[11:8],a[2*4+:4]);
      $display("%0t -> a[15:12]: %0h  a[3*4+:4]: %0h\n",$time,a[15:12],a[3*4+:4]);

      $display("%0t -> a[3:0]: %0h  a[1*4-1-:4]: %0h",$time,a[3:0],a[1*4-1-:4]);//a[i*4-1-:4] is equal to a[i*4-1:i*4]
      $display("%0t -> a[7:4]: %0h  a[2*4-1-:4]: %0h",$time,a[7:4],a[2*4-1-:4]);
      $display("%0t -> a[11:8]: %0h  a[3*4-1-:4]: %0h",$time,a[11:8],a[3*4-1-:4]);
      $display("%0t -> a[15:12]: %0h  a[4*4-1-:4]: %0h",$time,a[15:12],a[4*4-1-:4]);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                           code/3.3.10/run.do                                                                                  0000775 0000765 0000765 00000000227 14276067040 011240  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.3.10/tb.f                                                                                    0000775 0000765 0000765 00000000014 14276067040 010656  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.9.5/filelist.f                                                                               0000775 0000765 0000765 00000000102 14314742222 012012  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/baozi.svh
$PWD/xiaolongbao.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                              code/6.9.5/xiaolongbao.svh                                                                          0000775 0000765 0000765 00000001365 14315730136 013072  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     class xiaolongbao extends baozi;
    int feature;

    function new(string name,int weight,int feature);
        super.new(name,weight);
        this.feature=feature;
    endfunction 

    function void eat();
        $display("Dip it in vinegar and put it in your mouth!");
    endfunction
       
    function void make_xiaolongbao();
        $display("A xiaolongbao is completed!");
        $display("Xiaolongbao name is %s", name);
        $display("Xiaolongbao weight is %d", weight);
        $display("Xiaolongbao skin is %d", skin);
        $display("Xiaolongbao filling is %d", filling);
        $display("Xiaolongbao flavor is %d", flavor);
        $display("Xiaolongbao feature is %d", feature);
    endfunction    
endclass
                                                                                                                                                                                                                                                                           code/6.9.5/run.do                                                                                   0000775 0000765 0000765 00000000203 14314732056 011166  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.5/baozi.svh                                                                                0000775 0000765 0000765 00000001701 14315723640 011670  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class baozi;
    string name;
    int weight;
    //local int skin;
    //local int filling;
    //local int flavor;
    protected int skin;
    protected int filling;
    protected int flavor;

    function new(string name,int weight);
      this.name = name;
      this.weight = weight;
    endfunction

    virtual function void eat();
      $display("Put it straight in your mouth!");
    endfunction

    function void make_baozi();
      $display("A baozi is completed!");
      $display("Baozi name is %s",name);
      $display("Baozi weight is %d",weight);
      $display("Baozi skin is %d",skin);
      $display("Baozi filling is %d",filling);
      $display("Baozi flavor is %d",flavor);
    endfunction

    function void init(int skin,int filling,int flavor);
      this.skin = skin;
      this.filling = filling;
      this.flavor = flavor;
    endfunction

    local function void B();
      $display("do something...");
    endfunction
endclass
                                                               code/6.9.5/demo_tb.sv                                                                               0000775 0000765 0000765 00000000617 14317310543 012026  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
   
   baozi    baozi_h;
   xiaolongbao xiaolongbao_h;

   initial begin
      baozi_h = new(.name("caibaozi"),.weight(150));
      baozi_h.init(0,1,0);
      baozi_h.make_baozi();

      xiaolongbao_h = new("xiaolongbao",50,2);
      xiaolongbao_h.make_xiaolongbao();

      baozi_h = xiaolongbao_h;
      baozi_h.eat();
      //xiaolongbao_h.eat();
   end

endmodule : top

     
   
                                                                                                                 code/6.9.4/filelist.f                                                                               0000775 0000765 0000765 00000000102 14314742204 012011  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/baozi.svh
$PWD/xiaolongbao.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                              code/6.9.4/xiaolongbao.svh                                                                          0000775 0000765 0000765 00000001206 14315730115 013060  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     class xiaolongbao extends baozi;
    int feature;

    function new(string name,int weight,int feature);
        super.new(name,weight);
        this.feature=feature;
    endfunction 
       
    function void make_xiaolongbao();
        $display("A xiaolongbao is completed!");
        $display("Xiaolongbao name is %s", name);
        $display("Xiaolongbao weight is %d", weight);
        $display("Xiaolongbao skin is %d", skin);
        $display("Xiaolongbao filling is %d", filling);
        $display("Xiaolongbao flavor is %d", flavor);
        $display("Xiaolongbao feature is %d", feature);
    endfunction    
endclass
                                                                                                                                                                                                                                                                                                                                                                                          code/6.9.4/run.do                                                                                   0000775 0000765 0000765 00000000203 14314730656 011171  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.4/baozi.svh                                                                                0000775 0000765 0000765 00000001565 14314730656 011703  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class baozi;
    string name;
    int weight;
    //local int skin;
    //local int filling;
    //local int flavor;
    protected int skin;
    protected int filling;
    protected int flavor;

    function new(string name,int weight);
        this.name = name;
        this.weight = weight;
    endfunction

    function void make_baozi();
        $display("A baozi is completed!");
        $display("Baozi name is %s",name);
        $display("Baozi weight is %d",weight);
        $display("Baozi skin is %d",skin);
        $display("Baozi filling is %d",filling);
        $display("Baozi flavor is %d",flavor);
    endfunction

    function void init(int skin,int filling,int flavor);
        this.skin = skin;
        this.filling = filling;
        this.flavor = flavor;
    endfunction

    local function void B();
        $display("do something...");
    endfunction
endclass
                                                                                                                                           code/6.9.4/demo_tb.sv                                                                               0000775 0000765 0000765 00000000474 14314730656 012036  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
   
   baozi    baozi_h;
   xiaolongbao xiaolongbao_h;

   initial begin
      baozi_h = new(.name("caibaozi"),.weight(150));
      baozi_h.init(0,1,0);
      baozi_h.make_baozi();

      xiaolongbao_h = new("xiaolongbao",50,2);
      xiaolongbao_h.make_xiaolongbao();
   end
endmodule : top

     
   
                                                                                                                                                                                                    code/3.3.5/demo_tb.sv                                                                               0000775 0000765 0000765 00000004272 14276060646 012030  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  initial begin
    $display("%0t -> Start!!!",$time);

    begin
      reg[5:0] a;
      a = 6'b100011;
      $display("%0t -> a: %0b  '<< 3 bits' result: %b",$time,a,a<<3);
      $display("%0t -> a: %0b  '<<< 3 bits' result: %b",$time,a,a<<<3);
      $display("%0t -> a: %0b  '>> 3 bits' result: %b",$time,a,a>>3);
      $display("%0t -> a: %0b  '>>> 3 bits' result: %b\n",$time,a,a>>>3);
    end

    begin
      reg signed[5:0] b;
      b = 6'b100011;
      $display("%0t -> b: %0b  '<< 3 bits' result: %b",$time,b,b<<3);
      $display("%0t -> b: %0b  '<<< 3 bits' result: %b",$time,b,b<<<3);
      $display("%0t -> b: %0b  '>> 3 bits' result: %b",$time,b,b>>3);
      $display("%0t -> b: %0b  '>>> 3 bits' result: %b\n",$time,b,b>>>3);
    end

    begin
      reg[5:0] c;
      c = 6'bx00011;
      $display("%0t -> c: %0b  '<< 3 bits' result: %b",$time,c,c<<3);
      $display("%0t -> c: %0b  '<<< 3 bits' result: %b",$time,c,c<<<3);
      $display("%0t -> c: %0b  '>> 3 bits' result: %b",$time,c,c>>3);
      $display("%0t -> c: %0b  '>>> 3 bits' result: %b\n",$time,c,c>>>3);
    end

    begin
      reg signed[5:0] d;
      d = 6'bx00011;
      $display("%0t -> d: %0b  '<< 3 bits' result: %b",$time,d,d<<3);
      $display("%0t -> d: %0b  '<<< 3 bits' result: %b",$time,d,d<<<3);
      $display("%0t -> d: %0b  '>> 3 bits' result: %b",$time,d,d>>3);
      $display("%0t -> d: %0b  '>>> 3 bits' result: %b\n",$time,d,d>>>3);
    end

    begin
      reg[5:0] e;
      e = 6'bz00011;
      $display("%0t -> e: %0b  '<< 3 bits' result: %b",$time,e,e<<3);
      $display("%0t -> e: %0b  '<<< 3 bits' result: %b",$time,e,e<<<3);
      $display("%0t -> e: %0b  '>> 3 bits' result: %b",$time,e,e>>3);
      $display("%0t -> e: %0b  '>>> 3 bits' result: %b\n",$time,e,e>>>3);
    end

    begin
      reg signed[5:0] f;
      f = 6'bz00011;
      $display("%0t -> f: %0b  '<< 3 bits' result: %b",$time,f,f<<3);
      $display("%0t -> f: %0b  '<<< 3 bits' result: %b",$time,f,f<<<3);
      $display("%0t -> f: %0b  '>> 3 bits' result: %b",$time,f,f>>3);
      $display("%0t -> f: %0b  '>>> 3 bits' result: %b",$time,f,f>>>3);
    end

    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                                                                                                      code/3.3.5/run.do                                                                                   0000775 0000765 0000765 00000000227 14276054320 011161  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.3.5/tb.f                                                                                     0000775 0000765 0000765 00000000014 14276054320 010577  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.13.6/demo_tb.sv                                                                              0000775 0000765 0000765 00000003254 14317537210 012104  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;

  extern constraint cons1;
  extern constraint cons2;
endclass

constraint demo_class::cons1 {a == 'd3;}
constraint demo_class::cons2 {b == 'd5;}

module top;

  initial begin
    $display("%0t -> --- demo_class randomize test start ---",$time);
    begin
      demo_class c1;
      c1 = new();
      c1.constraint_mode(0);
      if(c1.cons1.constraint_mode())
        $display("%0t -> cons1 of class is active",$time);
      else
        $display("%0t -> cons1 of class is inactive",$time);
      repeat(3)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
      c1.constraint_mode(1);
      if(c1.cons1.constraint_mode())
        $display("%0t -> cons1 of class is active",$time);
      else
        $display("%0t -> cons1 of class is inactive",$time);
      repeat(3)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
      c1.cons2.constraint_mode(0);
      if(c1.cons2.constraint_mode())
        $display("%0t -> cons2 of class is active",$time);
      else
        $display("%0t -> cons2 of class is inactive",$time);
      repeat(3)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
      c1.cons2.constraint_mode(1);
      if(c1.cons2.constraint_mode())
        $display("%0t -> cons2 of class is active",$time);
      else
        $display("%0t -> cons2 of class is inactive",$time);
      repeat(3)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
    end
    $display("%0t -> --- demo_class randomize test finish ---",$time);
  end
endmodule


                                                                                                                                                                                                                                                                                                                                                    code/6.13.6/run.do                                                                                  0000775 0000765 0000765 00000000305 14317527516 011253  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.3/run.do                                                                                  0000775 0000765 0000765 00000000305 14317520401 011232  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.3/demo_tb.sv                                                                              0000775 0000765 0000765 00000002122 14317521403 012067  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  rand  bit[2:0] b;
endclass

class demo_class_implication_constraint1 extends demo_class;
  constraint cons_name {(a >= 'd3) -> (a == b);}
endclass

class demo_class_implication_constraint2 extends demo_class;
  constraint cons_name {
    if(a >= 'd3){
      a == b;
    }
  }
endclass

module top;

  initial begin
    $display("%0t -> --- class implication constraint1 test start ---",$time);
    begin
      demo_class_implication_constraint1 c1;
      c1 = new();
      repeat(15)begin
        c1.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
      end
    end
    $display("%0t -> --- class implication constraint1 test finish ---",$time);
    $display("\n");

    $display("%0t -> --- class implication constraint2 test start ---",$time);
    begin
      demo_class_implication_constraint2 c2;
      c2 = new();
      repeat(15)begin
        c2.randomize();
        $display("%0t -> a: %0d, b: %0d",$time,c2.a,c2.b);
      end
    end
    $display("%0t -> --- class implication constraint2 test finish ---",$time);
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                              code/6.13.1.3/demo_tb.sv                                                                            0000775 0000765 0000765 00000001021 14317305561 012230  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;
endclass

module top;

  bit[2:0] c;

  initial begin
    $display("%0t -> --- easy randomize test start ---",$time);
    repeat(15)begin
      std::randomize(c);
      $display("%0t -> c: %0d",$time,c);
    end
    $display("easy randomize test with constraint");
    repeat(15)begin
      std::randomize(c) with {c >= 'd0; c <= 'd3;};
      $display("%0t -> c: %0d",$time,c);
    end
    $display("%0t -> --- easy randomize test finish ---",$time);
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               code/6.13.1.3/run.do                                                                                0000775 0000765 0000765 00000000261 14317304230 011372  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                               code/6.9.3/run.do                                                                                   0000711 0000765 0000765 00000000203 14314720556 011154  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.3/baozi.svh                                                                                0000600 0000765 0000765 00000001442 14314720556 011655  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class baozi;
    string name;
    int weight;
    local int skin;
    local int filling;
    local int flavor;

    function new(string name,int weight);
        this.name = name;
        this.weight = weight;
    endfunction

    function void make_baozi();
        $display("A baozi is completed!");
        $display("Baozi name is %s",name);
        $display("Baozi weight is %d",weight);
        $display("Baozi skin is %d",skin);
        $display("Baozi filling is %d",filling);
        $display("Baozi flavor is %d",flavor);
    endfunction

    function void init(int skin,int filling,int flavor);
        this.skin = skin;
        this.filling = filling;
        this.flavor = flavor;
    endfunction

    local function void B();
        $display("do something...");
    endfunction
endclass
                                                                                                                                                                                                                              code/6.9.3/filelist.f                                                                               0000600 0000765 0000765 00000000055 14314742151 012003  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/baozi.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   code/6.9.3/demo_tb.sv                                                                               0000600 0000765 0000765 00000000334 14314720556 012011  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
   
   baozi    baozi_h;

   initial begin
      baozi_h = new(.name("caibaozi"),.weight(150));
      baozi_h.init(0,1,0);
      baozi_h.make_baozi();
      //baozi_h.B();
   end

endmodule : top

     
   
                                                                                                                                                                                                                                                                                                    code/6.12/run.do                                                                                    0000775 0000765 0000765 00000000305 14245620734 011102  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.12/demo_tb.sv                                                                                0000775 0000765 0000765 00000002614 14341345314 011735  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic a = 0;
  logic b = 0;
  logic clk;

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    $display("%0t -> ------------------  immediate assertion start---------------------------------",$time);
    $display("%0t -> a value is %0h",$time,a);
    #10ns;
    a = 1'bx;//or z
    $display("%0t -> a value is %0h",$time,a);
    if($isunknown(a))
      $display("Error, a should not be x or z! please check!");
    assert(!$isunknown(a));
    $display("%0t -> ------------------  immediate assertion finish---------------------------------",$time);
    $display("\n");
    $display("%0t -> ------------------  concurrent assertion start---------------------------------",$time);
    $display("%0t -> b value is %0h",$time,b);
    #10ns;
    b = 1'bz;
    $display("%0t -> b value is %0h",$time,b);
    #10ns;
    $display("%0t -> ------------------  concurrent assertion finish---------------------------------",$time);
    $finish;
  end

  property check_b_value;
    @(posedge clk)
      $isunknown(b) == 1; //期望检查的表达式
  endproperty

  int cover_times = 0;

  assert_name : assert property(check_b_value) $display("OK"); else $display("NOT OK");
  cover_name  : cover property(check_b_value) $display("cover times -> %0d",++cover_times); 

  final begin
    $display("we have covered %0d times",cover_times);
  end

endmodule


                                                                                                                    code/6.7.1/demo_tb.sv                                                                               0000775 0000765 0000765 00000002463 14307565660 012034  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  bit wait_signal;

  initial begin
    wait_signal = 0;
    #100ns;
    wait_signal = 1;
  end

  initial begin
    $display("%0t -> Start!!!",$time);
    $display("%0t -> ----------- wait start -----------",$time);
    wait(wait_signal);
    $display("%0t -> ----------- wait finish ----------",$time);
    begin
      $display("%0t -> ----------- fork_join_none block ---------",$time);
      fork: fork_join_none_block
        begin: begin_block1
          $display("%0t -> begin_block1 start ",$time);
          #10ns;
          $display("%0t -> begin_block1 finish ",$time);
        end
        begin: begin_block2
          $display("%0t -> begin_block2 start ",$time);
          #20ns;
          $display("%0t -> begin_block2 finish ",$time);
        end
        begin: begin_block3
          $display("%0t -> begin_block3 start ",$time);
          #30ns;
          $display("%0t -> begin_block3 finish ",$time);
        end
      join_none
      $display("%0t -> get out of fork_join_none_block!",$time);
      $display("%0t -> ------------ wait fork start -----------",$time);
      wait fork;// just for fork...join_any or join_none
      $display("%0t -> ------------ wait fork finish -----------",$time);
      #50ns;
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                                                                                                                                                                                             code/6.7.1/run.do                                                                                   0000775 0000765 0000765 00000000227 14307565276 011200  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.7.1/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307565276 010616  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.7.2/demo_tb.sv                                                                               0000775 0000765 0000765 00000001032 14307567101 012014  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  bit clk,rst_n;
  int a,b,c;

  initial begin
    $display("%0t -> Start!!!",$time);
    a=0;
    b=0;
    repeat(10)begin
      #10;
      a++;
      b++;
    end
    #100;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #5;
    rst_n = 1;
  end

  always_ff@(posedge clk iff rst_n)begin
    c <= (a + b);
    $display(" a is %0d, b is %0d, c is %0d",a,b,c);
  end

endmodule : top


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/6.7.2/run.do                                                                                   0000775 0000765 0000765 00000000227 14307566275 011201  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.7.2/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307566275 010617  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    code/6.13.8/demo_tb.sv                                                                              0000775 0000765 0000765 00000001102 14317556461 012105  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;

  function void pre_randomize;
    $display("%0t -> invoke pre_randomize! a:%0d, b: %0d",$time,a,b);
  endfunction

  function void post_randomize;
    $display("%0t -> invoke post_randomize! a:%0d, b: %0d",$time,a,b);
  endfunction
endclass

module top;

  initial begin
    $display("%0t -> --- demo_class randomize test start ---",$time);
    begin
      demo_class c1;
      c1 = new();
      assert(c1.randomize());
    end
    $display("%0t -> --- demo_class randomize test finish ---",$time);
  end
endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                                              code/6.13.8/run.do                                                                                  0000775 0000765 0000765 00000000305 14317555342 011253  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.13.1.1/demo_tb.sv                                                                            0000775 0000765 0000765 00000000623 14317542344 012237  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  rand  bit[2:0] a;
  randc bit[2:0] b;
endclass

module top;

  initial begin
    demo_class c1;
    c1 = new();
    repeat(10)begin
      assert(c1.randomize());
      $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
    end
    $display("\n");
    repeat(10)begin
      assert(c1.randomize(a));
      $display("%0t -> a: %0d, b: %0d",$time,c1.a,c1.b);
    end
  end

endmodule


                                                                                                             code/6.13.1.1/run.do                                                                                0000775 0000765 0000765 00000000305 14317277201 011376  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.5.1/demo_tb.sv                                                                               0000775 0000765 0000765 00000000626 14307534431 012021  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  initial begin
    $display("%0t -> Start!!!",$time);
    #10ns;
    $display("delay 10ns in initial block");
    $display("here in initial block");
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

  final begin
    $display("%0t -> Start!!!",$time);
    //#10ns; //not permit
    $display("here in final block");
    $display("%0t -> Finish!!!",$time);
  end

endmodule : top


                                                                                                          code/6.5.1/run.do                                                                                   0000775 0000765 0000765 00000000227 14307533011 011154  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/6.5.1/tb.f                                                                                     0000775 0000765 0000765 00000000014 14307533011 010572  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.15/run.do                                                                                    0000775 0000765 0000765 00000000305 14246126026 011101  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.15/demo_tb.sv                                                                                0000775 0000765 0000765 00000005217 14356513415 011747  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `define print_class_id(student_id) \
  $display(`"\t My class id is %0d`",student_id); \

`define print_name(student_name) \
  $display(`"\t My name is %s`",student_name); \

`define print_age(student_age) \
  $display(`"\t I am %0d years old`",student_age); \

`define print_gender(student_gender) \
  $display(`"\t I am a %s`",student_gender); \

`define print_grade_class(student_grade,student_class) \
  $display(`"\t I am in grade %0d class %0d`",student_grade,student_class); \

`define print_school_id(student_grade,student_class,student_id) \
  $display(`"\t My school id is %s`","student_grade``_``student_class``_``student_id"); \

`define print_space \
  $display(`"\n`"); \

`define print_student_info(student_id,student_name,student_age,student_gender,student_grade,student_class) \
  `print_class_id(student_id) \
  `print_name(student_name) \
  `print_age(student_age) \
  `print_gender(student_gender) \
  `print_grade_class(student_grade,student_class) \
  `print_school_id(student_grade,student_class,student_id) \
  `print_space \

module top;
  initial begin
    $display("\t My class id is %0d",1); 
    $display("\t My name is %s","xiaoming"); 
    $display("\t I am %0d years old",12); 
    $display("\t I am a %s","boy"); 
    $display("\t I am in grade %0d class %0d",3,2); 
    $display("\t My school id is %s","3_2_1"); 
    $display("\n"); 

    $display("\t My class id is %0d",2); 
    $display("\t My name is %s","xiaohong"); 
    $display("\t I am %0d years old",13); 
    $display("\t I am a %s","girl"); 
    $display("\t I am in grade %0d class %0d",4,1); 
    $display("\t My school id is %s","4_1_1"); 
    $display("\n"); 

    $display("\t My class id is %0d",3); 
    $display("\t My name is %s","xiaozhang"); 
    $display("\t I am %0d years old",11); 
    $display("\t I am a %s","boy"); 
    $display("\t I am in grade %0d class %0d",2,3); 
    $display("\t My school id is %s","2_3_3"); 
    $display("\n"); 
  end

  initial begin
    `print_class_id(1) 
    `print_name("xiaoming") 
    `print_age(12) 
    `print_gender("boy") 
    `print_grade_class(3,2) 
    `print_school_id(3,2,1) 
    `print_space 

    `print_class_id(2) 
    `print_name("xiaohong") 
    `print_age(13) 
    `print_gender("girl") 
    `print_grade_class(4,1) 
    `print_school_id(4,1,2) 
    `print_space 

    `print_class_id(3) 
    `print_name("xiaozhang") 
    `print_age(11) 
    `print_gender("boy") 
    `print_grade_class(2,3) 
    `print_school_id(2,3,3) 
    `print_space 
  end

  initial begin
    `print_student_info(1,"xiaoming",12,"boy",3,2) 
    `print_student_info(2,"xiahong",13,"girl",4,1) 
    `print_student_info(3,"xiaozhang",11,"boy",2,3)
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                                 code/6.14.3/demo_tb.sv                                                                              0000775 0000765 0000765 00000000202 14322414512 012063  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  initial begin
    $system("date +\"%s\" > time.log");
    $system("cp time.log time_bak.log");
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                                              code/6.14.3/run.do                                                                                  0000775 0000765 0000765 00000000305 14246125545 011246  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.11/datatype_pkg.sv                                                                           0000664 0000765 0000765 00000000234 14316727237 013002  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef DATATYPE_PKG
`define DATATYPE_PKG
package datatype_pkg;
  typedef bit[7:0] u8;
  typedef bit[15:0] u16;
  typedef bit[31:0] u32;
endpackage
`endif
                                                                                                                                                                                                                                                                                                                                                                    code/6.11/demo_pkg.sv                                                                               0000664 0000765 0000765 00000000435 14317164766 012121  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef DEMO_PKG
`define DEMO_PKG
`include "param_pkg.sv";
`include "datatype_pkg.sv";
package demo_pkg;
  import param_pkg::*;
  export param_pkg::*;
  //import datatype_pkg::*;
  `include "demo_class1.sv";
  `include "demo_class2.sv";
  `include "demo_class3.sv";
endpackage
`endif
                                                                                                                                                                                                                                   code/6.11/demo_class1.sv                                                                            0000664 0000765 0000765 00000000272 14317024524 012510  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class1;
  function void print;
    input datatype_pkg::u8 data;
    $display("Print data is %0h, type is %s,width is %0d",data,$typename(data),args1);
  endfunction
endclass
                                                                                                                                                                                                                                                                                                                                      code/6.11/demo_tb.sv                                                                                0000775 0000765 0000765 00000001007 14317165003 011725  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`include "demo_pkg.sv";
//`include "param_pkg.sv";
module top;
  //package 
  import demo_pkg::*;
  //import param_pkg::*;

  demo_class1 c1;
  demo_class2 c2;
  demo_class3 c3;
  bit[args1-1:0] data1;
  bit[args2-1:0] data2;
  bit[args3-1:0] data3;
  initial begin
    c1 = new();
    c2 = new();
    c3 = new();
    data1 = 'h12;
    c1.print(data1);
    $display("\n");
    data2 = 'h1234;
    c2.print(data2);
    $display("\n");
    data3 = 'h1234_5678;
    c3.print(data3);
    $display("\n");
  end
endmodule


code/6.11/param_pkg.sv                                                                              0000664 0000765 0000765 00000000221 14316730542 012254  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef PARAM_PKG
`define PARAM_PKG
package param_pkg;
  parameter args1 = 8;
  parameter args2 = 16;
  parameter args3 = 32;
endpackage
`endif
                                                                                                                                                                                                                                                                                                                                                                               code/6.11/tb.f                                                                                      0000664 0000765 0000765 00000000065 14316730536 010526  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     param_pkg.sv
datatype_pkg.sv
demo_pkg.sv
demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                           code/6.11/demo_class3.sv                                                                            0000664 0000765 0000765 00000000273 14317024544 012515  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class3;
  function void print;
    input datatype_pkg::u32 data;
    $display("Print data is %0h, type is %s,width is %0d",data,$typename(data),args3);
  endfunction
endclass
                                                                                                                                                                                                                                                                                                                                     code/6.11/run.do                                                                                    0000775 0000765 0000765 00000000251 14316726406 011103  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -f tb.f \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                       code/6.11/demo_class2.sv                                                                            0000664 0000765 0000765 00000000273 14317024535 012514  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class2;
  function void print;
    input datatype_pkg::u16 data;
    $display("Print data is %0h, type is %s,width is %0d",data,$typename(data),args2);
  endfunction
endclass
                                                                                                                                                                                                                                                                                                                                     code/6.1.4.1/demo_tb.sv                                                                             0000775 0000765 0000765 00000004125 14304655713 012161  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  int arr1[0:15]; //int类型，长度为16的数组
  int arr2[16]; //int类型，长度为16的数组，与arr1等价
  bit[31:0] arr3[8]; //bit[31:0]类型，长度为8的数组
  bit[31:0] arr4[2][4]; //bit[31:0]类型，长宽为2*4的二维数组
  bit[7:0] arr5[4]; //bit[7:0]类型，长度为4的非压缩数组
  bit[3:0][7:0] arr6; //bit[7:0]类型，长度为4的压缩数组
  //bit[4][8] arr6; //bit类型，长度为4*8的压缩数组，和上面写法等价
  bit[3:0] arr7[3][2];  //bit[3:0]类型，长宽为3*2的非压缩二维数组
  bit[2:0][1:0][3:0] arr8;  //bit[3:0]类型，长宽为3*2的压缩二维数组
  bit[3:0][2:0] arr9[2];  //bit[3:0]类型，长宽为3的混合压缩二维数组

  initial begin
    $display("%0t -> Start!!!",$time);
    arr1 = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    $display("arr1 is %p",arr1);
    foreach(arr1[idx]) $display("arr1[%0d] is %0d",idx,arr1[idx]);
    arr1 = '{16{'d1}};
    foreach(arr1[idx]) $display("arr1[%0d] is %0d",idx,arr1[idx]);
    arr2 = '{default:'d2};
    foreach(arr2[idx]) $display("arr2[%0d] is %0d",idx,arr2[idx]);
    arr3 = '{7,8,9,10,11,12,13,14};
    $display("arr3 is %p",arr3);
    arr4 = '{'{7,1,0,3},'{2,4,1,6}};
    foreach(arr4[idx,idy]) begin
      $display("arr4[%0d][%0d] is %0h",idx,idy,arr4[idx][idy]);
    end
    foreach(arr4[idx,idy]) begin
      arr4[idx][idy] = 'h12345678;
      $display("arr4[%0d][%0d] is %0h",idx,idy,arr4[idx][idy]);
    end
    arr5 = '{2,3,4,5};
    $display("arr5 is %p",arr5);
    arr6 = {8'hc2,8'hd3,8'he4,8'hf5};
    $display("arr6 is %h",arr6);
    foreach(arr6[idx])begin
      $display("arr6[%0d] is %h",idx,arr6[idx]);
    end
    foreach(arr6[idx,idy])begin
      $display("arr6[%0d][%0d] is %h",idx,idy,arr6[idx][idy]);
    end
    arr7 = '{'{0,1},'{3,5},'{2,9}};
    $display("arr7 is %p",arr7);
    arr8 = 24'h13529;
    $display("arr8 is %h",arr8);
    foreach(arr8[idx])begin
      $display("arr8[%0d] is %h",idx,arr8[idx]);
    end
    arr9 = '{12'h013,12'h529};
    $display("arr9 is %p",arr9);
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                           code/6.1.4.1/run.do                                                                                 0000775 0000765 0000765 00000000260 14303072634 011314  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.5/demo_tb.sv                                                                               0000775 0000765 0000765 00000000673 14305332442 012017  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  typedef int unsigned uint_t;
  typedef bit[15:0] double_bytes_t;
  
  uint_t u1,u2;
  double_bytes_t db1,db2;

  initial begin
    $display("%0t -> Start!!!",$time);
    u1 = 'd66;
    $display("u1 is %0d",u1);
    u2 = 'd99;
    $display("u2 is %0d",u2);
    db1 = 'hffff;
    $display("db1 is %0h",db1);
    db2 = 'hf1234;
    $display("db2 is %0h",db2);
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                     code/6.1.5/run.do                                                                                   0000775 0000765 0000765 00000000260 14305332020 011144  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.6.1/run.do                                                                                 0000775 0000765 0000765 00000000260 14305325361 011316  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.1.6.1/demo_tb.sv                                                                             0000775 0000765 0000765 00000002332 14305337705 012160  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  initial begin
    $display("%0t -> Start!!!",$time);
    $display("------------------ struct --------------");
    begin
      typedef struct {
        int a;
        byte b;
        bit[7:0] c;
      } my_struct_s;

      my_struct_s my_s;
      my_s.a = 'h3;
      my_s.b = 'h34;
      my_s.c = 'h56;
      $display("my_s is %p",my_s);
      $display("a is %h, b is %h, c is %h",my_s.a,my_s.b,my_s.c);
      my_s = '{32'h4,8'h66,8'h99};
      //my_s = 48'h100_66_99; // error
      $display("my_s is %p",my_s);
      my_s = '{default:'d7};
      $display("my_s is %p",my_s);
      my_s = '{byte:'d3,default:'d7};
      $display("my_s is %p",my_s);
      my_s = '{a:'d1,b:'d2,c:'d3};
      $display("my_s is %p",my_s);
    end
    $display("-------------------- packed struct ---------------");
    begin
      typedef struct packed{
        int a;
        byte b;
        bit[7:0] c;
      } my_packed_struct_s;

      my_packed_struct_s my_ps;
      my_ps = '{32'd4,8'h66,8'h99};
      $display("a is %h, b is %h, c is %h",my_ps.a,my_ps.b,my_ps.c);
      my_ps = 48'h4_66_99;
      $display("a is %h, b is %h, c is %h",my_ps.a,my_ps.b,my_ps.c);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                                                                                      code/6.13.13/demo_tb.sv                                                                             0000775 0000765 0000765 00000002012 14324654027 012155  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class1;
  rand  bit[2:0] a;
  randc bit[2:0] b;
endclass

class demo_class2;
  rand  bit[2:0] a;
  rand  bit[2:0] b;
  rand  bit[2:0] c;

  function void demo_func1(demo_class1 c1);
    c1.randomize() with {a < local::a; b < local::b;};
    //c1.randomize() with {a < a; b < b;};
    $display("demo_class1 -> a: %0d, b: %0d",c1.a,c1.b);
    $display("demo_class2 -> a: %0d, b: %0d",a,b);
  endfunction

  function void demo_func2(demo_class1 c1);
    c1.randomize() with {a < c; b < c;};
    $display("demo_class1 -> a: %0d, b: %0d",c1.a,c1.b);
    $display("demo_class2 -> c: %0d",c);
  endfunction

endclass

module top;

  initial begin
    demo_class1 c1;
    demo_class2 c2;
    c1 = new();
    c2 = new();
    $display("--- demo_func1 test ---");
    repeat(5)begin
      c2.randomize();
      c2.demo_func1(c1);
      $display("\n");
    end
    $display("--- demo_func2 test ---");
    repeat(10)begin
      c2.randomize();
      c2.c = 3;
      c2.demo_func2(c1);
      $display("\n");
    end
  end

endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/6.13.13/run.do                                                                                 0000775 0000765 0000765 00000000305 14324645246 011330  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                           code/6.1.3/demo_tb.sv                                                                               0000775 0000765 0000765 00000002027 14322677130 012015  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  string s;

  initial begin
    $display("%0t -> Start!!!",$time);
    s = "Hello world!";
    $display("string s is %s",s); //"Hello world!"
    $display("first letter is %s",s.getc(0)); //"H"
    $display("last  letter is %s",s.getc(s.len()-1)); //"!"
    $display("lower string s is %s",s.tolower());// "hello world!"
    $display("upper string s is %s",s.toupper());// "HELLO WORLD!"
    s.putc(s.len()-1,"-");
    $display(s); //"Hello world-"
    s.putc(s.len()-1,"^");// 
    $display(s); //"Hello world^"
    s.putc(s.len()-1,">");// 
    $display(s); //"Hello world>"
    s = {s,"IC"}; // "IEEE-1800"
    $display(s); //"Hello world>IC"
    $display(s.substr(2,6)); // "llo w"
    $display("here we joint string 'Hello','world','!' together, so result is %s",{"Hello"," ","world","!"}); // "Hello world!"
    $display("here we joint string 'Hello','world','!' together, so result is %s",$sformatf("%s%s%s%s","Hello"," ","world","!")); // "Hello world!"
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         code/6.1.3/run.do                                                                                   0000775 0000765 0000765 00000000260 14302560170 011150  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.9.2/baozi.svh                                                                                0000775 0000765 0000765 00000002203 14314704112 011653  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class baozi;
  string name;
  int weight;
  int skin;
  int filling;
  int flavor;

  extern function new(string name,int weight);
  extern function void make_baozi();
endclass

function baozi::new(string name,int weight);
    this.name = name;
    this.weight = weight;
endfunction

function void baozi::make_baozi();
   $display("A baozi is completed!");
   $display("Baozi name is %s",name);
   $display("Baozi weight is %d",weight);
   $display("Baozi skin is %d",skin);
   $display("Baozi filling is %d",filling);
   $display("Baozi flavor is %d",flavor);
endfunction

//class baozi;
//    string name;
//    int weight;
//    int skin;
//    int filling;
//    int flavor;
//
//    function new(string name,int weight);
//        this.name = name;
//        this.weight = weight;
//    endfunction
//
//    function void make_baozi();
//        $display("A baozi is completed!");
//        $display("Baozi name is %s",name);
//        $display("Baozi weight is %d",weight);
//        $display("Baozi skin is %d",skin);
//        $display("Baozi filling is %d",filling);
//        $display("Baozi flavor is %d",flavor);
//    endfunction
//endclass
                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.2/run.do                                                                                   0000775 0000765 0000765 00000000203 14314700051 011151  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f filelist.f \
		-l com.log 

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                                             code/6.9.2/filelist.f                                                                               0000775 0000765 0000765 00000000055 14314742127 012022  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/
$PWD/baozi.svh
$PWD/demo_tb.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   code/6.9.2/demo_tb.sv                                                                               0000775 0000765 0000765 00000000371 14314700051 012012  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
   
   baozi    baozi_h;

   initial begin
      baozi_h = new(.name("caibaozi"),.weight(150));
      baozi_h.skin = 0;
      baozi_h.filling = 1;
      baozi_h.flavor = 0;
      baozi_h.make_baozi();
   end

endmodule : top

     
   
                                                                                                                                                                                                                                                                       code/6.17.7/demo_tb.sv                                                                              0000775 0000765 0000765 00000001454 14340310661 012104  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
class demo_class;
  logic[2:0] a;

  covergroup cg1;
    cover_point_a: coverpoint a{
      wildcard bins a_bins = {3'b1??};
    }
  endgroup

  covergroup cg2;
    cover_point_a: coverpoint a{
      wildcard bins a_bins = {3'b1??};
    }
  endgroup

  function new();
    cg1 = new();
    cg2 = new();
  endfunction

endclass

module top;
  logic[2:0] values1[$] = '{3'b000, 3'b001, 3'b010, 3'b101};
  logic[2:0] values2[$] = '{3'b000, 3'b001, 3'b010, 3'b10z};

  initial begin
    demo_class c1 = new();
    foreach(values1[i])begin
      c1.a = values1[i];
      c1.cg1.sample();
    end
    $display("cg1 coverage: %g%%",c1.cg1.get_coverage());
    foreach(values2[i])begin
      c1.a = values2[i];
      c1.cg2.sample();
    end
    $display("cg2 coverage: %g%%",c1.cg2.get_coverage());
  end

endmodule


                                                                                                                                                                                                                    code/6.17.7/run.do                                                                                  0000775 0000765 0000765 00000000324 14340307132 011243  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -lca \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                            code/6.1.2/demo_tb.sv                                                                               0000775 0000765 0000765 00000003305 14302551353 012010  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  enum {RED,ORANGE,YELLOW,GREEN,CYAN,BLUE,PURPLE} colour_e;

  initial begin
    $display("%0t -> Start!!!",$time);
    $display("the num of colour_e list is %0d",colour_e.num());
    colour_e = colour_e.first();
    $display("the first of colour_e list is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.last();
    $display("the last of colour_e list is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = RED;
    $display("the current of colour_e is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.next();
    $display("the next of RED is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.next();
    $display("the next of ORANGE is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.next(3);
    $display("the next of 3 of YELLOW is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.next(3);
    $display("the next of 3 of BLUE is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = 'd7;
    $display("the out of scope enum('d7) name is %s",colour_e.name());

    colour_e = PURPLE;
    $display("the current of colour_e is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.prev();
    $display("the prev of PURPLE is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.prev();
    $display("the prev of BLUE is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.prev(3);
    $display("the prev of 3 of CYAN is %s, value is %0d",colour_e.name(),colour_e);
    colour_e = colour_e.prev(3);
    $display("the prev of 3 of ORANGE is %s, value is %0d",colour_e.name(),colour_e);

    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                                                                                                           code/6.1.2/run.do                                                                                   0000775 0000765 0000765 00000000260 14302545335 011155  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/3.3.4/run.do                                                                                   0000775 0000765 0000765 00000000227 14276054145 011165  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
		    -f tb.f \
		    -output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                                         code/3.3.4/demo_tb.sv                                                                               0000775 0000765 0000765 00000001277 14276055262 012027  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;

  initial begin
    $display("%0t -> Start!!!",$time);

    begin
      reg[2:0] r1,r2;
      r1 = 'b100;
      r2 = 'b10x;
      $display("%0t -> r1: %0b r2: %0b compare '==' result: %b, '===' result: %b",$time,r1,r2,r1==r2,r1===r2);
      $display("%0t -> r1: %0b r2: %0b compare '!=' result: %b, '!==' result: %b",$time,r1,r2,r1!=r2,r1!==r2);
      #10ns;
      r2 = 'b10z;
      $display("%0t -> r1: %0b r2: %0b compare '==' result: %b, '===' result: %b",$time,r1,r2,r1==r2,r1===r2);
      $display("%0t -> r1: %0b r2: %0b compare '!=' result: %b, '!==' result: %b",$time,r1,r2,r1!=r2,r1!==r2);
    end

    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                                                                                                 code/3.3.4/tb.f                                                                                     0000775 0000765 0000765 00000000014 14276054256 010606  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.1.1/demo_tb.sv                                                                               0000775 0000765 0000765 00000002343 14302060246 012004  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic[31:0] g32;
  bit[31:0] b32;
  int unsigned ui; //两态值类型，32位无符号整型
  int i; //两态值类型，32位有符号整型
  byte b8; //两态值类型，8位有符号整型
  shortint s; //两态值类型，16位有符号整型
  longint l; //两态值类型，64位有符号整型
  time t; //四态值类型，64位无符号整型
  real r; //两态值类型，双精度浮点类型

  initial begin
    $display("%0t -> Start!!!",$time);
    g32 = 'hffxz;
    b32 = 'hffff;
    ui  = 'd32;
    i   = -'d1;
    b8  = 'h66;
    s   = -'d1;
    l   = -'d1;
    r   = 3.2;

    $display("g32 is %0h",g32);
    $display("b32 is %0h",b32);
    $display("ui is %0d",ui);
    $display("i is %0d",i);
    $display("b8 is %0h",b8);
    $display("s is %0d",s);
    $display("l is %0d",l);
    $display("r is %0f",r);
    b32 = 'hxxff;
    $display("b32 is %0h",b32);
    b32 = 'hffzz;
    $display("b32 is %0h",b32);
    b32 = 'hxxzz;
    $display("b32 is %0h",b32);
    b32 = '1;
    $display("b32 is %0h",b32);
    g32 = '0;
    $display("g32 is %0h",g32);
    g32 = 'z;
    $display("g32 is %0h",g32);
    g32 = 'x;
    $display("g32 is %0h",g32);
    $display("%0t -> Finish!!!",$time);
    $finish;
  end
endmodule


                                                                                                                                                                                                                                                                                             code/6.1.1/run.do                                                                                   0000775 0000765 0000765 00000000260 14245074456 011163  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
    -sv demo_tb.sv \
		-output com.log \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                                                                code/6.19.2/dpi_c.c                                                                                 0000777 0000765 0000765 00000001266 14346235117 011353  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     #include "svdpi.h"

//add op1 & op2
svBitVecVal c_add(const svBitVecVal op1,const svBitVecVal op2){
    int op1_value=op1;
    int op2_value=op2;
    svBitVecVal result;
    result=op1_value+op2_value;
    return result;
}

//use sv task in c function
void c_sub(const svBitVecVal op1, const svBitVecVal op2) {
      sv_sub(op1, op2);
}

//multiply op1 & op2
void c_mul(const svBitVecVal op1,const svBitVecVal op2,svBitVecVal* result){
    int op1_value=op1;
    int op2_value=op2;
    *result=op1_value*op2_value;
}

//comb the 8-bits msb(op2) & 32-bits lsb(op1) to result
void c_com(const svBitVecVal op1,const svBitVecVal op2,svBitVecVal result[2]){
    result[1]=op2;
    result[0]=op1;
}

                                                                                                                                                                                                                                                                                                                                          code/6.19.2/file.f                                                                                  0000777 0000765 0000765 00000000027 14346234070 011206  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     ./demo_tb.sv
./dpi_c.c
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         code/6.19.2/run.do                                                                                  0000777 0000765 0000765 00000000204 14346233466 011255  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -sverilog \
		-debug_all \
		-timescale=1ns/1ns \
		-f file.f \
		-output com.log \

    ./simv -l sim.log
                                                                                                                                                                                                                                                                                                                                                                                            code/6.19.2/svdpi.h                                                                                 0000777 0000765 0000765 00000045114 14016043767 011431  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     /*
 * svdpi.h
 *
 * SystemVerilog Direct Programming Interface (DPI).
 *
 * This file contains the constant definitions, structure definitions,
 * and routine declarations used by SystemVerilog DPI.
 */

#ifndef INCLUDED_SVDPI
#define INCLUDED_SVDPI

#ifdef __cplusplus
extern "C" {
#endif

/* Ensure that size-critical types are defined on all OS platforms. */
#if defined (_MSC_VER)
typedef unsigned __int64 uint64_t;
typedef unsigned __int32 uint32_t;
typedef unsigned __int8 uint8_t;
#elif defined(__MINGW32__)
#include <stdint.h>
#elif defined(__linux)
#include <inttypes.h>
#else
#include <sys/types.h>
#endif

/* Use to export a symbol from application */
#if WIN32
#ifndef DPI_DLLISPEC
#define DPI_DLLISPEC __declspec(dllimport)
#define DPI_USER_DEFINED_DLLISPEC 1
#endif
#else
#ifndef DPI_DLLISPEC
#define DPI_DLLISPEC
#endif
#endif

/* Use to import a symbol into application */
#if WIN32
#ifndef DPI_DLLESPEC
#define DPI_DLLESPEC __declspec(dllexport)
#define DPI_USER_DEFINED_DLLESPEC 1
#endif
#else
#ifndef DPI_DLLESPEC
#define DPI_DLLESPEC
#endif
#endif

/* Use to mark a function as external */
#ifndef DPI_EXTERN
#define DPI_EXTERN
#endif

#ifndef DPI_PROTOTYPES
#define DPI_PROTOTYPES
/* object is defined imported by the application */
#define XXTERN DPI_EXTERN DPI_DLLISPEC
/* object is exported by the application */
#define EETERN DPI_EXTERN DPI_DLLESPEC
#endif


/* canonical representation */
#define sv_0 0
#define sv_1 1
#define sv_z 2
#define sv_x 3

/* common type for 'bit' and 'logic' scalars. */
typedef uint8_t svScalar;
typedef svScalar svBit; /* scalar */
typedef svScalar svLogic; /* scalar */



/*
 * DPI representation of packed arrays.
 * 2-state and 4-state vectors, exactly the same as PLI's avalue/bvalue.
 */
#ifndef VPI_VECVAL
#define VPI_VECVAL
typedef struct vpi_vecval {
    uint32_t a;
    uint32_t b;
} s_vpi_vecval, *p_vpi_vecval;
#endif

/* (a chunk of) packed logic array */
typedef s_vpi_vecval svLogicVecVal;

/* (a chunk of) packed bit array */
typedef uint32_t svBitVecVal;

/* Number of chunks required to represent the given width packed array */
#define SV_PACKED_DATA_NELEMS(WIDTH) (((WIDTH) + 31) >> 5)

/*
 * Since the contents of the unused bits is undetermined,
 * the following macros can be handy.
 */ 
#define SV_MASK(N) (~(-1 << (N)))

#define SV_GET_UNSIGNED_BITS(VALUE, N) \
    ((N) == 32 ? (VALUE) : ((VALUE) & SV_MASK(N)))

#define SV_GET_SIGNED_BITS(VALUE, N) \
    ((N) == 32 ? (VALUE) : \
    (((VALUE) & (1 << (N))) ? ((VALUE) | ~SV_MASK(N)) : ((VALUE) & SV_MASK(N))))



/*
 * Implementation-dependent representation.
 */
/*
 * Return implementation version information string ("P1800-2005" or "SV3.1a").
 */
XXTERN const char* svDpiVersion();

/* a handle to a scope (an instance of a module or interface) */
XXTERN typedef void* svScope;

/* a handle to a generic object (actually, unsized array) */
XXTERN typedef void* svOpenArrayHandle;

/* 
 * Bit select utility functions.
 *
 * Packed arrays are assumed to be indexed n-1:0,
 * where 0 is the index of least significant bit
 */

/* s=source, i=bit-index */
XXTERN svBit svGetBitselBit(const svBitVecVal* s, int i);
XXTERN svLogic svGetBitselLogic(const svLogicVecVal* s, int i);

/* d=destination, i=bit-index, s=scalar */
XXTERN void svPutBitselBit(svBitVecVal* d, int i, svBit s);
XXTERN void svPutBitselLogic(svLogicVecVal* d, int i, svLogic s);

/*
 * Part select utility functions.
 *
 * A narrow (<=32 bits) part select is extracted from the
 * source representation and written into the destination word.
 *
 * Normalized ranges and indexing [n-1:0] are used for both arrays.
 *
 * s=source, d=destination, i=starting bit index, w=width
 * like for variable part selects; limitations: w <= 32
 */
XXTERN void svGetPartselBit(svBitVecVal* d, const svBitVecVal* s, int i, int w);
XXTERN void svGetPartselLogic(svLogicVecVal* d, const svLogicVecVal* s, int i, int w);

XXTERN void svPutPartselBit(svBitVecVal* d, const svBitVecVal s, int i, int w);
XXTERN void svPutPartselLogic(svLogicVecVal* d, const svLogicVecVal s, int i, int w);


/*
 * Open array querying functions
 * These functions are modeled upon the SystemVerilog array
 * querying functions and use the same semantics.
 * 
 * If the dimension is 0, then the query refers to the
 * packed part of an array (which is one dimensional).
 * Dimensions > 0 refer to the unpacked part of an array.
 */
/* h= handle to open array, d=dimension */
XXTERN int svLeft(const svOpenArrayHandle h, int d);
XXTERN int svRight(const svOpenArrayHandle h, int d);
XXTERN int svLow(const svOpenArrayHandle h, int d);
XXTERN int svHigh(const svOpenArrayHandle h, int d);
XXTERN int svIncrement(const svOpenArrayHandle h, int d);
XXTERN int svLength(const svOpenArrayHandle h, int d);
XXTERN int svDimensions(const svOpenArrayHandle h);

/*
 * Pointer to the actual representation of the whole array of any type
 * NULL if not in C layout
 */
XXTERN void *svGetArrayPtr(const svOpenArrayHandle);

/* total size in bytes or 0 if not in C layout */
XXTERN int svSizeOfArray(const svOpenArrayHandle);

/*
 * Return a pointer to an element of the array
 * or NULL if index outside the range or null pointer
 */
XXTERN void *svGetArrElemPtr(const svOpenArrayHandle, int indx1, ...);

/* specialized versions for 1-, 2- and 3-dimensional arrays: */
XXTERN void *svGetArrElemPtr1(const svOpenArrayHandle, int indx1);
XXTERN void *svGetArrElemPtr2(const svOpenArrayHandle, int indx1, int indx2);
XXTERN void *svGetArrElemPtr3(const svOpenArrayHandle, int indx1, int indx2,
        int indx3);

/*
 * Functions for copying between simulator storage and user space.
 * These functions copy the whole packed array in either direction.
 * The user is responsible for allocating an array to hold the 
 * canonical representation.
 */

/* s=source, d=destination */
/* From user space into simulator storage */
XXTERN void svPutBitArrElemVecVal(const svOpenArrayHandle d, const svBitVecVal* s,
        int indx1, ...);
XXTERN void svPutBitArrElem1VecVal(const svOpenArrayHandle d, const svBitVecVal* s,
        int indx1);
XXTERN void svPutBitArrElem2VecVal(const svOpenArrayHandle d, const svBitVecVal* s,
        int indx1, int indx2);
XXTERN void svPutBitArrElem3VecVal(const svOpenArrayHandle d, const svBitVecVal* s,
        int indx1, int indx2, int indx3);
XXTERN void svPutLogicArrElemVecVal(const svOpenArrayHandle d, const svLogicVecVal* s,
        int indx1, ...);
XXTERN void svPutLogicArrElem1VecVal(const svOpenArrayHandle d, const svLogicVecVal* s,
        int indx1);
XXTERN void svPutLogicArrElem2VecVal(const svOpenArrayHandle d, const svLogicVecVal* s,
        int indx1, int indx2);
XXTERN void svPutLogicArrElem3VecVal(const svOpenArrayHandle d, const svLogicVecVal* s,
        int indx1, int indx2, int indx3);



/* From simulator storage into user space */
XXTERN void svGetBitArrElemVecVal(svBitVecVal* d, const svOpenArrayHandle s,
        int indx1, ...);
XXTERN void svGetBitArrElem1VecVal(svBitVecVal* d, const svOpenArrayHandle s,
        int indx1);
XXTERN void svGetBitArrElem2VecVal(svBitVecVal* d, const svOpenArrayHandle s,
        int indx1, int indx2);
XXTERN void svGetBitArrElem3VecVal(svBitVecVal* d, const svOpenArrayHandle s,
        int indx1, int indx2, int indx3);
XXTERN void svGetLogicArrElemVecVal(svLogicVecVal* d, const svOpenArrayHandle s,
        int indx1, ...);
XXTERN void svGetLogicArrElem1VecVal(svLogicVecVal* d, const svOpenArrayHandle s,
        int indx1);
XXTERN void svGetLogicArrElem2VecVal(svLogicVecVal* d, const svOpenArrayHandle s,
        int indx1, int indx2);
XXTERN void svGetLogicArrElem3VecVal(svLogicVecVal* d, const svOpenArrayHandle s,
        int indx1, int indx2, int indx3);

XXTERN svBit svGetBitArrElem(const svOpenArrayHandle s, int indx1, ...);
XXTERN svBit svGetBitArrElem1(const svOpenArrayHandle s, int indx1);
XXTERN svBit svGetBitArrElem2(const svOpenArrayHandle s, int indx1, int indx2);
XXTERN svBit svGetBitArrElem3(const svOpenArrayHandle s, int indx1, int indx2,
        int indx3);
XXTERN svLogic svGetLogicArrElem(const svOpenArrayHandle s, int indx1, ...);
XXTERN svLogic svGetLogicArrElem1(const svOpenArrayHandle s, int indx1);
XXTERN svLogic svGetLogicArrElem2(const svOpenArrayHandle s, int indx1, int indx2);
XXTERN svLogic svGetLogicArrElem3(const svOpenArrayHandle s, int indx1, int indx2,
        int indx3);
XXTERN void svPutLogicArrElem(const svOpenArrayHandle d, svLogic value, int indx1,
        ...);
XXTERN void svPutLogicArrElem1(const svOpenArrayHandle d, svLogic value, int indx1);
XXTERN void svPutLogicArrElem2(const svOpenArrayHandle d, svLogic value, int indx1,
        int indx2);
XXTERN void svPutLogicArrElem3(const svOpenArrayHandle d, svLogic value, int indx1,
        int indx2, int indx3);
XXTERN void svPutBitArrElem(const svOpenArrayHandle d, svBit value, int indx1, ...);
XXTERN void svPutBitArrElem1(const svOpenArrayHandle d, svBit value, int indx1);
XXTERN void svPutBitArrElem2(const svOpenArrayHandle d, svBit value, int indx1,
        int indx2);
XXTERN void svPutBitArrElem3(const svOpenArrayHandle d, svBit value, int indx1,
        int indx2, int indx3);


/* Functions for working with DPI context */

/*
 * Retrieve the active instance scope currently associated with the executing
 * imported function.  Unless a prior call to svSetScope has occurred, this
 * is the scope of the function's declaration site, not call site.
 * Returns NULL if called from C code that is *not* an imported function.
 */
XXTERN svScope svGetScope();

/*
 * Set context for subsequent export function execution.
 * This function must be called before calling an export function, unless
 * the export function is called while executing an extern function. In that
 * case the export function shall inherit the scope of the surrounding extern
 * function. This is known as the "default scope".
 * The return is the previous active scope (as per svGetScope)
 */
XXTERN svScope svSetScope(const svScope scope);

/* Gets the fully qualified name of a scope handle */
XXTERN const char* svGetNameFromScope(const svScope);

/*
 * Retrieve svScope to instance scope of an arbitrary function declaration.
 * (can be either module, program, interface, or generate scope)
 * The return value shall be NULL for unrecognized scope names.
 */
XXTERN svScope svGetScopeFromName(const char* scopeName);

/*
 * Store an arbitrary user data pointer for later retrieval by svGetUserData()
 * The userKey is generated by the user. It must be guaranteed by the user to
 * be unique from all other userKey's for all unique data storage requirements
 * It is recommended that the address of static functions or variables in the
 * user's C code be used as the userKey.
 * It is illegal to pass in NULL values for either the scope or userData
 * arguments. It is also an error to call svPutUserData() with an invalid
 * svScope. This function returns -1 for all error cases, 0 upon success. It is
 * suggested that userData values of 0 (NULL) not be used as otherwise it can
 * be impossible to discern error status returns when calling svGetUserData()
 */
XXTERN int svPutUserData(const svScope scope, void *userKey, void* userData);

/*
 * Retrieve an arbitrary user data pointer that was previously
 * stored by a call to svPutUserData(). See the comment above
 * svPutUserData() for an explanation of userKey, as well as
 * restrictions on NULL and illegal svScope and userKey values.
 * This function returns NULL for all error cases, 0 upon success.
 * This function also returns NULL in the event that a prior call
 * to svPutUserData() was never made.
 */
XXTERN void* svGetUserData(const svScope scope, void* userKey);

/*
 * Returns the file and line number in the SV code from which the extern call
 * was made. If this information available, returns TRUE and updates fileName
 * and lineNumber to the appropriate values. Behavior is unpredictable if
 * fileName or lineNumber are not appropriate pointers. If this information is
 * not available return FALSE and contents of fileName and lineNumber not
 * modified. Whether this information is available or not is implementation
 * specific. Note that the string provided (if any) is owned by the SV
 * implementation and is valid only until the next call to any SV function.
 * Applications must not modify this string or free it
 */
XXTERN int svGetCallerInfo(const char** fileName, int *lineNumber);

/*
 * Returns 1 if the current execution thread is in the disabled state.
 * Disable protocol must be adhered to if in the disabled state.
 */
XXTERN int svIsDisabledState();

/*
 * Imported functions call this API function during disable processing to
 * acknowledge that they are correctly participating in the DPI disable protocol.
 * This function must be called before returning from an imported function that is
 * in the disabled state.
 */
XXTERN void svAckDisabledState();



/*
 **********************************************************
 * DEPRECATED PORTION OF FILE STARTS FROM HERE.
 * IEEE-P1800-compliant tools may not provide
 * support for the following functionality.
 **********************************************************
 */

/*
 * Canonical representation of packed arrays
 * 2-state and 4-state vectors, modeled upon PLI's avalue/bvalue
 */
#define SV_CANONICAL_SIZE(WIDTH) (((WIDTH)+31)>>5)
typedef unsigned int svBitVec32;/* (a chunk of) packed bit array */
typedef struct { unsigned int c; unsigned int d;}
svLogicVec32; /* (a chunk of) packed logic array */

/* reference to a standalone packed array */
typedef void* svBitPackedArrRef;
typedef void* svLogicPackedArrRef;

/*
 * total size in bytes of the simulator's representation of a packed array
 * width in bits
 */
XXTERN int svSizeOfBitPackedArr(int width);
XXTERN int svSizeOfLogicPackedArr(int width);

/* Translation between the actual representation and the canonical representation */

/* s=source, d=destination, w=width */
/* actual <-- canonical */
XXTERN void svPutBitVec32(svBitPackedArrRef d, const svBitVec32* s, int w);
XXTERN void svPutLogicVec32(svLogicPackedArrRef d, const svLogicVec32* s, int w);

/* canonical <-- actual */
XXTERN void svGetBitVec32(svBitVec32* d, const svBitPackedArrRef s, int w);
XXTERN void svGetLogicVec32(svLogicVec32* d, const svLogicPackedArrRef s, int w);

/* 
 * Bit select functions
 * Packed arrays are assumed to be indexed n-1:0,
 * where 0 is the index of least significant bit
 */

/* s=source, i=bit-index */
XXTERN svBit svGetSelectBit(const svBitPackedArrRef s, int i);
XXTERN svLogic svGetSelectLogic(const svLogicPackedArrRef s, int i);

/* d=destination, i=bit-index, s=scalar */
XXTERN void svPutSelectBit(svBitPackedArrRef d, int i, svBit s);
XXTERN void svPutSelectLogic(svLogicPackedArrRef d, int i, svLogic s);

/*
 * functions for part select
 *
 * a narrow (<=32 bits) part select is copied between
 * the implementation representation and a single chunk of
 * canonical representation
 * Normalized ranges and indexing [n-1:0] are used for both arrays:
 * the array in the implementation representation and the canonical array.
 *
 * s=source, d=destination, i=starting bit index, w=width
 * like for variable part selects; limitations: w <= 32
 */

/* canonical <-- actual */
XXTERN void svGetPartSelectBit(svBitVec32* d, const svBitPackedArrRef s,
        int i, int w);
XXTERN svBitVec32 svGetBits(const svBitPackedArrRef s, int i, int w);
XXTERN svBitVec32 svGet32Bits(const svBitPackedArrRef s, int i); /* 32-bits */

XXTERN uint64_t svGet64Bits(const svBitPackedArrRef s, int i);

/* 64-bits */
XXTERN void svGetPartSelectLogic(svLogicVec32* d, const svLogicPackedArrRef s,
        int i, int w);
/* actual <-- canonical */
XXTERN void svPutPartSelectBit(svBitPackedArrRef d, const svBitVec32 s,
        int i, int w);
XXTERN void svPutPartSelectLogic(svLogicPackedArrRef d, const svLogicVec32 s,
        int i, int w);

/*
 * Functions for open array translation between simulator and canonical representations.
 * These functions copy the whole packed array in either direction. The user is
 * responsible for allocating an array in the canonical representation.
 */

/* s=source, d=destination */
/* actual <-- canonical */
XXTERN void svPutBitArrElemVec32(const svOpenArrayHandle d, const svBitVec32* s,
        int indx1, ...);
XXTERN void svPutBitArrElem1Vec32(const svOpenArrayHandle d, const svBitVec32* s,
        int indx1);
XXTERN void svPutBitArrElem2Vec32(const svOpenArrayHandle d, const svBitVec32* s,
        int indx1, int indx2);
XXTERN void svPutBitArrElem3Vec32(const svOpenArrayHandle d, const svBitVec32* s,
        int indx1, int indx2, int indx3);
XXTERN void svPutLogicArrElemVec32(const svOpenArrayHandle d, const svLogicVec32* s,
        int indx1, ...);
XXTERN void svPutLogicArrElem1Vec32(const svOpenArrayHandle d, const svLogicVec32* s,
        int indx1);
XXTERN void svPutLogicArrElem2Vec32(const svOpenArrayHandle d, const svLogicVec32* s,
        int indx1, int indx2);
XXTERN void svPutLogicArrElem3Vec32(const svOpenArrayHandle d, const svLogicVec32* s,
        int indx1, int indx2, int indx3);

/* canonical <-- actual */
XXTERN void svGetBitArrElemVec32(svBitVec32* d, const svOpenArrayHandle s,
        int indx1, ...);
XXTERN void svGetBitArrElem1Vec32(svBitVec32* d, const svOpenArrayHandle s,
        int indx1);
XXTERN void svGetBitArrElem2Vec32(svBitVec32* d, const svOpenArrayHandle s,
        int indx1, int indx2);
XXTERN void svGetBitArrElem3Vec32(svBitVec32* d, const svOpenArrayHandle s,
        int indx1, int indx2, int indx3);
XXTERN void svGetLogicArrElemVec32(svLogicVec32* d, const svOpenArrayHandle s,
        int indx1, ...);
XXTERN void svGetLogicArrElem1Vec32(svLogicVec32* d, const svOpenArrayHandle s,
        int indx1);
XXTERN void svGetLogicArrElem2Vec32(svLogicVec32* d, const svOpenArrayHandle s,
        int indx1, int indx2);
XXTERN void svGetLogicArrElem3Vec32(svLogicVec32* d, const svOpenArrayHandle s,
        int indx1, int indx2, int indx3);

/*
 **********************************************************
 * DEPRECATED PORTION OF FILE ENDS HERE.
 **********************************************************
 */

#undef DPI_EXTERN

#ifdef DPI_USER_DEFINED_DLLISPEC
#undef DPI_USER_DEFINED_DLLISPEC
#undef DPI_DLLISPEC
#endif

#ifdef DPI_USER_DEFINED_DLLESPEC
#undef DPI_USER_DEFINED_DLLESPEC
#undef DPI_DLLESPEC
#endif

#ifdef DPI_PROTOTYPES
#undef DPI_PROTOTYPES
#undef XXTERN
#undef EETERN
#endif


#ifdef __cplusplus
}
#endif

#endif


                                                                                                                                                                                                                                                                                                                                                                                                                                                    code/6.19.2/demo_tb.sv                                                                              0000777 0000765 0000765 00000000634 14346250217 012110  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
    `include "dpi_sv.sv"
    
    initial begin
        #100;
        $display("  ------------------ Start ------------------  \n");

        sv_add(32'd33,32'd66);
        c_sub(32'd55,32'd44);
        sv_mul(32'd2,32'd33);
        sv_com(32'hffffffff,32'heeeeeeee);
    
        #100;
        $display("  ------------------ Finish ------------------  \n");
        $finish;
    end
    
endmodule
                                                                                                    code/6.19.2/dpi_sv.sv                                                                               0000664 0000765 0000765 00000002362 14346246505 011763  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
    import "DPI" function bit[31:0] c_add(input bit[31:0] op1,op2);
    import "DPI" function void c_sub(input bit[31:0] op1,op2);
    import "DPI" function void c_mul(input bit[31:0] op1,op2,output bit[31:0] result);
    import "DPI" function void c_com(input bit[31:0] op1,op2,output bit[40:0] result);
    export "DPI" task sv_sub;

    //use c function in sv task
    task sv_add;
        input bit[31:0] op1;
        input bit[31:0] op2;
        bit[31:0] result;
        result=c_add(op1,op2);
        $display("+++ In %m:op1 is %d,op2 is %d,result is %d",op1,op2,result);
    endtask

    task sv_sub;
        input bit[31:0] op1;
        input bit[31:0] op2;
        bit[31:0] result;
        result=op1-op2;
        $display("+++ In %m:op1 is %d,op2 is %d,result is %d",op1,op2,result);
    endtask
    
    task sv_mul;
        input bit[31:0] op1;
        input bit[31:0] op2;
        bit[31:0] result;
        c_mul(op1,op2,result);
        $display("+++ In %m:op1 is %d,op2 is %d,result is %d",op1,op2,result);
    endtask
    
    task sv_com;
        input bit[31:0] op1;
        input bit[31:0] op2;
        bit[39:0] result;
        c_com(op1,op2,result);
        $display("+++ In %m:op1 is %h,op2 is %h,result is %h",op1,op2,result);
    endtask

                                                                                                                                                                                                                                                                              code/7.1/sim/run.do                                                                                 0000764 0000765 0000765 00000000354 14347266251 011616  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        -full64 \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log
                                                                                                                                                                                                                                                                                    code/6.18.2/sim/run.do                                                                              0000775 0000765 0000765 00000000355 14344276264 012052  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        -full64 \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                   code/6.18.2/sim/demo_tb.sv                                                                          0000775 0000765 0000765 00000001027 14344276264 012702  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic a,b,carry_in;
  logic sum,carry_out;
  logic[2:0] tmp;
  
  full_adder DUT(.a(a),.b(b),.carry_in(carry_in),.sum(sum),.carry_out(carry_out));
  bind half_adder half_adder_bind_all half_adder_bind_all_inst();
  bind half_adder: DUT.h2 half_adder_bind_scope half_adder_bind_scope_inst();
  
  initial begin
    $display("%0t -> Start!!!",$time);
    tmp = 0;
    repeat(10)begin
      {a,b,carry_in} = tmp;
      #10ns;
      tmp++;
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule 




                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         code/6.18.2/src/half_adder.v                                                                        0000664 0000765 0000765 00000000255 14344276264 013155  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module half_adder(a,b,sum,carry);
  input a,b;
  output reg sum,carry;

  always@(a or b)begin
    sum = a ^ b;                       
    carry = a & b; 
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                   code/6.18.2/src/full_adder.v                                                                        0000664 0000765 0000765 00000000417 14344276264 013205  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module full_adder(a,b,carry_in,sum,carry_out);
  input a,b,carry_in;
  output reg sum,carry_out;

  wire c1,s1,c2;

  half_adder h1(.a(a),.b(b),.sum(s1),.carry(c1));
  half_adder h2(.a(s1),.b(carry_in),.sum(sum),.carry(c2));

  assign carry_out = c1 || c2;
  
endmodule
                                                                                                                                                                                                                                                 code/7.3/sim/run.do                                                                                 0000764 0000765 0000765 00000000354 14351430636 011613  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        -full64 \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log
                                                                                                                                                                                                                                                                                    code/6.18.1/sim/demo_tb.sv                                                                          0000775 0000765 0000765 00000001027 14344275302 012671  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic a,b,carry_in;
  logic sum,carry_out;
  logic[2:0] tmp;
  
  full_adder DUT(.a(a),.b(b),.carry_in(carry_in),.sum(sum),.carry_out(carry_out));
  bind half_adder half_adder_bind_all half_adder_bind_all_inst();
  bind half_adder: DUT.h2 half_adder_bind_scope half_adder_bind_scope_inst();
  
  initial begin
    $display("%0t -> Start!!!",$time);
    tmp = 0;
    repeat(10)begin
      {a,b,carry_in} = tmp;
      #10ns;
      tmp++;
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule 




                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         code/6.18.1/sim/run.do                                                                              0000775 0000765 0000765 00000000355 14344246611 012042  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        -full64 \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                   code/6.18.1/src/full_adder.v                                                                        0000664 0000765 0000765 00000000417 14344252123 013170  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module full_adder(a,b,carry_in,sum,carry_out);
  input a,b,carry_in;
  output reg sum,carry_out;

  wire c1,s1,c2;

  half_adder h1(.a(a),.b(b),.sum(s1),.carry(c1));
  half_adder h2(.a(s1),.b(carry_in),.sum(sum),.carry(c2));

  assign carry_out = c1 || c2;
  
endmodule
                                                                                                                                                                                                                                                 code/6.18.1/src/half_adder.v                                                                        0000664 0000765 0000765 00000000255 14344246611 013145  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module half_adder(a,b,sum,carry);
  input a,b;
  output reg sum,carry;

  always@(a or b)begin
    sum = a ^ b;                       
    carry = a & b; 
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                   code/7.2/sim/run.do                                                                                 0000764 0000765 0000765 00000000354 14347317340 011613  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        -full64 \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log
                                                                                                                                                                                                                                                                                    code/6.14.10/sim/run.do                                                                             0000775 0000765 0000765 00000000355 14322672124 012114  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -debug_all \
        -sverilog \
        -full64 \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                   code/6.14.10/sim/demo_tb.sv                                                                         0000775 0000765 0000765 00000000655 14346772634 012767  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TOP
`define TOP

parameter int DEMO_PARAM = 100;

module top;
  A a_inst();
  B b_inst();
  
  initial begin
    $display("%0t -> Start!!!",$time);
    $root.top.print();
    $display("%0t -> Finish!!!",$time);
  end 

  task print;
    $root.top.a_inst.print();
    $root.top.b_inst.print();
    $display("%m: DEMO_PARAM in module top",DEMO_PARAM);
    $display("%m: here in module top");
  endtask

endmodule 

`endif

                                                                                   code/6.14.10/src/A.v                                                                                0000664 0000765 0000765 00000000267 14346772573 011350  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef MODULE_A
`define MODULE_A
module A();

  task print;
    $display("%m: DEMO_PARAM in module A",DEMO_PARAM);
    $display("%m: here in module A");
  endtask

endmodule
`endif

                                                                                                                                                                                                                                                                                                                                         code/6.14.10/src/B.v                                                                                0000664 0000765 0000765 00000000331 14346772001 011323  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef MODULE_B
`define MODULE_B
module B();

  A a_inst();

  task print;
    a_inst.print();
    $display("%m: DEMO_PARAM in module B",DEMO_PARAM);
    $display("%m: here in module B");
  endtask

endmodule
`endif
                                                                                                                                                                                                                                                                                                       code/6.10.3/sim/run.do                                                                              0000775 0000765 0000765 00000000333 14316715770 012036  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/6.10.3/src/counter.v                                                                           0000664 0000765 0000765 00000000466 14316715770 012557  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module counter(counter_intf intf);
  reg[7:0] counter;

  always@(posedge intf.clk)begin
    if(!intf.rst_n)
      counter <= 'd0;
    else begin
      if(intf.load_enable)
        counter <= intf.load_counter;
      else
        counter = counter + 1;
    end
  end

  assign intf.dout = counter;

endmodule
                                                                                                                                                                                                          code/6.10.1/sim/run.do                                                                              0000775 0000765 0000765 00000000333 14316450100 012013  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/6.10.1/src/counter.v                                                                           0000664 0000765 0000765 00000000624 14316450100 012530  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module counter(clk,rst_n,load_enable,load_counter,dout);
  input clk;
  input rst_n;
  input load_enable;
  input[7:0] load_counter;
  output[7:0] dout;

  reg[7:0] counter;

  always@(posedge clk)begin
    if(!rst_n)
      counter <= 'd0;
    else begin
      if(load_enable)
        counter <= load_counter;
      else
        counter = counter + 1;
    end
  end

  assign dout = counter;

endmodule
                                                                                                            code/6.10.4/sim/run.do                                                                              0000775 0000765 0000765 00000000333 14316706146 012034  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/6.10.4/src/counter.v                                                                           0000664 0000765 0000765 00000000466 14316706146 012555  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module counter(counter_intf intf);
  reg[7:0] counter;

  always@(posedge intf.clk)begin
    if(!intf.rst_n)
      counter <= 'd0;
    else begin
      if(intf.load_enable)
        counter <= intf.load_counter;
      else
        counter = counter + 1;
    end
  end

  assign intf.dout = counter;

endmodule
                                                                                                                                                                                                          code/6.10.2/sim/run.do                                                                              0000775 0000765 0000765 00000000333 14316556114 012030  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/6.10.2/src/counter.v                                                                           0000664 0000765 0000765 00000000466 14316556420 012551  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module counter(counter_intf intf);
  reg[7:0] counter;

  always@(posedge intf.clk)begin
    if(!intf.rst_n)
      counter <= 'd0;
    else begin
      if(intf.load_enable)
        counter <= intf.load_counter;
      else
        counter = counter + 1;
    end
  end

  assign intf.dout = counter;

endmodule
                                                                                                                                                                                                          code/5.3/sim/run.do                                                                                 0000775 0000765 0000765 00000000333 14243117370 011605  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/5.3/src/counter.v                                                                              0000664 0000765 0000765 00000000624 14243120024 012310  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module counter(clk,rst_n,load_enable,load_counter,dout);
  input clk;
  input rst_n;
  input load_enable;
  input[7:0] load_counter;
  output[7:0] dout;

  reg[7:0] counter;

  always@(posedge clk)begin
    if(!rst_n)
      counter <= 'd0;
    else begin
      if(load_enable)
        counter <= load_counter;
      else
        counter = counter + 1;
    end
  end

  assign dout = counter;

endmodule
                                                                                                            code/5.4/sim/run.do                                                                                 0000775 0000765 0000765 00000000333 14243160736 011612  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/5.4/src/sell.v                                                                                 0000664 0000765 0000765 00000005470 14302042512 011576  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module sell1(clk,rst_n,a,b,y,z);
  parameter S0 = 1'b0;
  parameter S1 = 1'b1;
  input clk;
  input rst_n;
  input a,b;
  output reg y,z;

  reg current_state;
  reg next_state;

  always@(posedge clk or negedge rst_n)begin
    if(!rst_n)
      current_state <= S0;
    else
      current_state <= next_state;
  end

  always@(current_state or a or b)begin
    next_state = (~b) & (a^current_state); 
    y = ((~a) & b) || (a & (~b) & current_state);
    z = (~a) & b & current_state;
  end

endmodule

module sell2(clk,rst_n,a,b,y,z);
  parameter S0 = 1'b0;
  parameter S1 = 1'b1;
  input clk;
  input rst_n;
  input a,b;
  output reg y,z;

  reg current_state;
  reg next_state;

  always@(posedge clk or negedge rst_n)begin
    if(!rst_n)
      current_state <= S0;
    else
      current_state <= next_state;
  end

  always@(current_state or a or b)begin
    y = 0;
    z = 0;
    case(current_state)
      S0: begin
        if((a == 1'b0) && (b == 1'b1))begin
          y = 1;
          next_state = S0;
        end
        else if((a == 1'b1) && (b == 1'b0))
          next_state = S1;
        else
          next_state = S0;
      end
      S1: begin
        if((a == 1'b0) && (b == 1'b0))
          next_state = S1;
        else if((a == 1'b0) && (b == 1'b1))begin
          y = 1;
          z = 1;
          next_state = S0;
        end
        else if((a == 1'b1) && (b == 1'b0))begin
          y = 1;
          next_state = S0;
        end
        else
          next_state = S0;
      end
    endcase
  end

endmodule

module sell3(clk,rst_n,a,b,y,z);
  parameter S0 = 1'b0;
  parameter S1 = 1'b1;
  input clk;
  input rst_n;
  input a,b;
  output reg y,z;

  reg current_state;
  reg next_state;

  always@(posedge clk or negedge rst_n)begin
    if(!rst_n)
      current_state <= S0;
    else
      current_state <= next_state;
  end

  always@(current_state or a or b)begin
    case(current_state)
      S0: begin
        if((a == 1'b1) && (b == 1'b0))
          next_state = S1;
        else
          next_state = S0;
      end
      S1: begin
        if((a == 1'b0) && (b == 1'b0))
          next_state = S1;
        else
          next_state = S0;
      end
    endcase
  end

  always@(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
      y <= 0;
      z <= 0;
    end
    else begin
      case(current_state)
        S0: begin
          if((a == 1'b0) && (b == 1'b1))begin
            y <= 1;
          end
          else begin
            y <= 0;
            z <= 0;
          end
        end
        S1: begin
          if((a == 1'b0) && (b == 1'b1))begin
            y <= 1;
            z <= 1;
          end
          else if((a == 1'b1) && (b == 1'b0))begin
            y = 1;
            z = 0;
          end
          else begin
            y <= 0;
            z <= 0;
          end
        end
      endcase
    end
  end

endmodule

                                                                                                                                                                                                        code/5.4/src/sell_enum.sv                                                                           0000664 0000765 0000765 00000002430 14302051263 013001  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module sell_enum(clk,rst_n,a,b,y,z);
  input clk;
  input rst_n;
  input a,b;
  output reg y,z;

  enum reg {S0,S1} current_state,next_state;

  always@(posedge clk or negedge rst_n)begin
    if(!rst_n)
      current_state <= S0;
    else
      current_state <= next_state;
  end

  always@(current_state or a or b)begin
    case(current_state)
      S0: begin
        if((a == 1'b1) && (b == 1'b0))
          next_state = S1;
        else
          next_state = S0;
      end
      S1: begin
        if((a == 1'b0) && (b == 1'b0))
          next_state = S1;
        else
          next_state = S0;
      end
    endcase
  end

  always@(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
      y <= 0;
      z <= 0;
    end
    else begin
      case(current_state)
        S0: begin
          if((a == 1'b0) && (b == 1'b1))begin
            y <= 1;
          end
          else begin
            y <= 0;
            z <= 0;
          end
        end
        S1: begin
          if((a == 1'b0) && (b == 1'b1))begin
            y <= 1;
            z <= 1;
          end
          else if((a == 1'b1) && (b == 1'b0))begin
            y = 1;
            z = 0;
          end
          else begin
            y <= 0;
            z <= 0;
          end
        end
      endcase
    end
  end

endmodule

                                                                                                                                                                                                                                        code/5.2/sim/run.do                                                                                 0000775 0000765 0000765 00000000333 14243111023 011571  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/5.2/src/shifter.v                                                                              0000664 0000765 0000765 00000000657 14243115154 012312  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module shifter(clk,rst_n,load_enable,load_data,dout);
  input clk;
  input rst_n;
  input load_enable;
  input[7:0] load_data;
  output[7:0] dout;

  reg[7:0] shift_data;

  always@(posedge clk)begin
    if(!rst_n)
      shift_data <= 'd0;
    else begin
      if(load_enable)
        shift_data <= load_data;
      else
        shift_data <= {shift_data[6:0],shift_data[7]};
    end
  end

  assign dout = shift_data;

endmodule
                                                                                 code/5.1/sim/run.do                                                                                 0000775 0000765 0000765 00000000333 14243105317 011601  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/5.1/src/dff.v                                                                                  0000664 0000765 0000765 00000000207 14243112267 011375  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module dff(clk,din,dout);
  input clk;
  input din;
  output reg dout;

  always@(posedge clk)begin
    dout <= din;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                         code/5.1/src/dff_rst.v                                                                              0000664 0000765 0000765 00000000316 14243112275 012265  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module dff_rst(clk,rst_n,din,dout);
  input clk;
  input rst_n;
  input din;
  output reg dout;

  always@(posedge clk)begin
    if(!rst_n)
      dout <= 1'b0;
    else
      dout <= din;
  end

endmodule
                                                                                                                                                                                                                                                                                                                  code/4.3/sim/run.do                                                                                 0000775 0000765 0000765 00000000333 14243076771 011615  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/4.3/src/memory.v                                                                               0000664 0000765 0000765 00000000750 14277612123 012155  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module memory(enable,rw,addr,data);
  parameter ADDR_WIDTH = 8;
  parameter DATA_WIDTH = 16;
  parameter MEM_DEPTH = 256;

  input enable;
  input rw;//0 write,1 read
  input[ADDR_WIDTH-1:0] addr;
  inout[DATA_WIDTH-1:0] data;

  reg[DATA_WIDTH-1:0] memory_data [0:MEM_DEPTH-1];

  always@(enable or rw or addr or data)begin
    if(enable & (~rw)) //write
      memory_data[addr] = data;
  end

  //read
  assign data = (enable & rw)? memory_data[addr] : {DATA_WIDTH{1'bz}}; 

endmodule
                        code/4.2/sim/run.do                                                                                 0000775 0000765 0000765 00000000355 14251266655 011621  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        -full64 \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                   code/4.2/src/full_adder.v                                                                           0000664 0000765 0000765 00000000540 14344252162 012740  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module full_adder(a,b,carry_in,sum,carry_out);
  input a,b,carry_in;
  output reg sum,carry_out;

  //wire c1,s1,c2;

  //half_adder h1(.a(a),.b(b),.sum(s1),.carry(c1));
  //half_adder h2(.a(s1),.b(carry_in),.sum(sum),.carry(c2));

  //assign carry_out = c1 || c2;
  
  //rtl
  always@(*)begin
    {carry_out,sum} = a + b + carry_in;
  end

endmodule
                                                                                                                                                                code/4.2/src/half_adder.v                                                                           0000664 0000765 0000765 00000000255 14330636311 012710  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module half_adder(a,b,sum,carry);
  input a,b;
  output reg sum,carry;

  always@(a or b)begin
    sum = a ^ b;                       
    carry = a & b; 
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                   code/4.1/src/decoder.v                                                                              0000664 0000765 0000765 00000000501 14277173034 012245  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module decoder(enable,select,z);
  parameter SELECT_WIDTH = 2;
  localparam Z_WIDTH = (1 << SELECT_WIDTH);

  input enable;
  input[SELECT_WIDTH-1:0] select;
  output reg [Z_WIDTH-1:0] z;

  always@(*)begin
    if(enable)
      z = ({Z_WIDTH{1'b1}} ^ (1 << select));
    else
      z = {Z_WIDTH{1'b1}};
  end

endmodule
                                                                                                                                                                                               code/4.1/sim/run.do                                                                                 0000775 0000765 0000765 00000000333 14242666302 011605  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/3.2.3/sim/run.do                                                                               0000775 0000765 0000765 00000000333 14275716522 011754  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     	rm  *.log -rf csrc
	vcs -timescale=1ns/1ns \
        -sverilog \
        -debug_all \
        +vcs+lic+wait \
		-f filelist/dut.f \
		-f filelist/tb.f \
		-output com.log \
    +vcs+vcdpluson \

    ./simv -l sim.log

                                                                                                                                                                                                                                                                                                     code/3.2.3/src/top_module.v                                                                         0000664 0000765 0000765 00000000276 14276164771 013170  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top_module(a,b,z1,z2);
  input[2:0] a;
  input[3:0] b;
  output reg [15:0] z1,z2;

  sub_module #(2,3) S1(.a(a),.b(b),.z(z1));
  sub_module #(3,4) S2(.a(a),.b(b),.z(z2));

endmodule
                                                                                                                                                                                                                                                                                                                                  code/3.2.3/src/sub_module.v                                                                         0000664 0000765 0000765 00000000537 14276165321 013147  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module sub_module(a,b,z);
  parameter A_WIDTH = 1;
  parameter B_WIDTH = 2;
  localparam C_WIDTH = 3;

  input[A_WIDTH-1:0] a;
  input[B_WIDTH-1:0] b;
  output reg [15:0] z;

  reg[C_WIDTH-1:0] c;

  //always@(*)begin
  //always@* begin
  //always@(a or b or z)begin
  always@(a , b , z)begin // all four always are ok
    z = a + b;
  end
endmodule
                                                                                                                                                                 code/7.1/sim/testbench/top.sv                                                                       0000600 0000765 0000765 00000002113 14353210000 013553  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TOP
`define TOP

module top;
  import   alu_pkg::*;
  bit clk;
  
  initial begin
    clk = 0;
    forever begin
       #10;
       clk = ~clk;
    end
  end
  
  alu_interface        intf(.clk(clk));
  alu_reg_interface    reg_intf(.clk(clk),.rst_n(intf.rst_n));

  alu DUT  ( .A           ( intf.A),
             .B           ( intf.B),
             .op          ( intf.op),
             .clk         ( clk),
             .rst_n       ( intf.rst_n),
             .start       ( intf.start),
             .done        ( intf.done),
             .result      ( intf.result),
             .bus_vld     ( reg_intf.vld),
             .bus_op      ( reg_intf.op),
             .bus_addr    ( reg_intf.addr),
             .bus_wr_data ( reg_intf.wr_data),
             .bus_rd_data ( reg_intf.rd_data));
  
  
  testcase tc;
  
  initial begin
    $display("************ Start of testcase ****************");
    tc = new(intf, reg_intf);
    tc.run();
    #100;
    $finish;
  end
  
  final begin
    $display("************ Finish of testcase ***************");
  end
  
endmodule 

`endif
   
                                                                                                                                                                                                                                                                                                                                                                                                                                                     code/7.1/sim/testbench/alu_pkg.sv                                                                   0000600 0000765 0000765 00000001335 14347266251 014426  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_PKG
`define ALU_PKG

package alu_pkg;
  typedef enum bit[2:0] {no_op  = 3'b000,
                         add_op = 3'b001, 
                         and_op = 3'b010,
                         xor_op = 3'b011,
                         mul_op = 3'b100,
                         div_op = 3'b101,
                         rst_op = 3'b111} operation_t;
  
  typedef enum{reg_rd, reg_wr} reg_operation_t;

  //transaction
  `include "transaction.svh"   
  `include "reg_transaction.svh"
  
  //component
  `include "generator.svh"
  `include "driver.svh"
  `include "monitor.svh"
  `include "scoreboard.svh"
  `include "coverage.svh"
  `include "environment.svh"
  
  //testcase
  `include "testcase.svh"

endpackage 
   
`endif
                                                                                                                                                                                                                                                                                                   code/7.1/sim/filelist/tb.f                                                                          0000600 0000765 0000765 00000000334 14347266251 013040  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
+incdir+testbench/transaction
+incdir+testbench/component
+incdir+testbench/testcase
testbench/alu_pkg.sv
testbench/interface/alu_interface.sv
testbench/interface/alu_reg_interface.sv
testbench/top.sv

                                                                                                                                                                                                                                                                                                    code/7.1/sim/filelist/dut.f                                                                         0000600 0000765 0000765 00000000505 14347266251 013227  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/dut/demo_reg_slave.vh
$PWD/../src/dut/single_cycle.v
$PWD/../src/dut/three_cycle_mult.v
$PWD/../src/dut/three_cycle_div.v
$PWD/../src/dut/alu.v
$PWD/../src/dut/ip_reg_cfg.v
$PWD/../src/dut/ip_reg_cnt.v
$PWD/../src/dut/ip_reg_int.v
$PWD/../src/dut/ip_reg_sta.v
$PWD/../src/dut/demo_reg_slave.v
                                                                                                                                                                                           code/7.1/src/dut/demo_reg_slave.vh                                                                  0000664 0000765 0000765 00000000770 14347326204 014567  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`define ADDR_SIZE 'd16
`define DATA_SIZE 'd16
`define BASE_ADDR 'd8

`define CFG_CTRL_REG_SIZE 'd1
`define CFG_CTRL_REG_OFFSET 'h0
`define CFG_CTRL_REG_RST_VALUE 1'h0

`define STA_STATUS_REG_SIZE 'd8
`define STA_STATUS_REG_OFFSET 'h1
`define STA_STATUS_REG_RST_VALUE 8'h0

`define CNT_OPERATION_REG_SIZE 'd16
`define CNT_OPERATION_REG_OFFSET 'h2
`define CNT_OPERATION_REG_RST_VALUE 16'h0

`define INT_INTERRUPT_REG_SIZE 'd7
`define INT_INTERRUPT_REG_OFFSET 'h3
`define INT_INTERRUPT_REG_RST_VALUE 7'h0

        code/7.1/src/dut/three_cycle_div.v                                                                  0000664 0000765 0000765 00000002221 14350216464 014565  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module three_cycle_div(A, B, clk, rst_n, start, done_div, result_div);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input            rst_n;
   input            start;
   output reg       done_div;
   output reg[15:0] result_div;
   
   reg [7:0]        a_int;
   reg [7:0]        b_int;
   reg [15:0]       div1;
   reg              done2;
   reg              done1;
   reg              done_div_int;
   
   //divider
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n) begin
         done_div_int <= 1'b0;
         done2        <= 1'b0;
         done1        <= 1'b0;
         
         a_int        <= 8'd0;
         b_int        <= 8'd0;
         div1         <= 16'd0;
         result_div   <= 16'd0;
      end
      else begin
         a_int <= A;
         b_int <= B;
         if(b_int == 0)
           div1 <= 'h0;
         else
           div1 <= a_int / b_int;
         result_div   <= div1;
         done2        <= start & ((~done_div_int));
         done1        <= done2 & ((~done_div_int));
         done_div_int <= done1 & ((~done_div_int));
      end
   end

   assign done_div = done_div_int;
   
endmodule

                                                                                                                                                                                                                                                                                                                                                                               code/7.1/src/dut/ip_reg_sta.v                                                                       0000664 0000765 0000765 00000001734 14350066354 013562  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_sta(clk,rst_n,vld,op,addr,wdata,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else
      reg_field <= wdata;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                    code/7.1/src/dut/alu.v                                                                              0000600 0000765 0000765 00000007415 14350220632 012206  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module alu(
  A, 
  B, 
  clk, 
  op, 
  rst_n, 
  start, 
  done, 
  result, 
  bus_vld, 
  bus_op, 
  bus_addr, 
  bus_wr_data, 
  bus_rd_data);

  input [7:0]      A;
  input [7:0]      B;
  input            clk;
  input [2:0]      op;
  input            rst_n;
  input            start;
  output           done;
  output [15:0]    result;

  input            bus_vld;
  input            bus_op;
  input [15:0]     bus_addr;
  input [15:0]     bus_wr_data;
  output [15:0]    bus_rd_data;
  
  wire             done_aax;
  wire             done_mult;
  wire             done_div;
  wire [15:0]      result_aax;
  wire [15:0]      result_mult;
  wire [15:0]      result_div;
  reg              start_single;
  reg              start_mult;
  reg              start_div;
  reg              done_internal;
  reg[15:0]        result_internal;

  wire[`INT_INTERRUPT_REG_SIZE-1:0]    int_interrupt_wdata;
  wire[`STA_STATUS_REG_SIZE-1:0]       sta_status_wdata;

  wire[`CFG_CTRL_REG_SIZE-1:0]         cfg_ctrl;
  wire[`STA_STATUS_REG_SIZE-1:0]       sta_status;
  wire[`CNT_OPERATION_REG_SIZE-1:0]    cnt_operation;
  wire[`INT_INTERRUPT_REG_SIZE-1:0]    int_interrupt;
  
  //start_demux
  always @(*) begin
     case (op[2])
        1'b0 :
           begin
              start_single = start;
              start_mult   = 1'b0;
              start_div    = 1'b0;
           end
        1'b1 :
           if(op[0]) begin
                start_single = 1'b0;
                start_mult   = 1'b0;
                start_div    = start;
             end
           else begin
                start_single = 1'b0;
                start_mult   = start;
                start_div    = 1'b0;
           end
        default :
           ;
     endcase
  end
  
  //result_mux
  always @(*) begin
     case (op[2])
        1'b0 :
           result_internal = result_aax;
        1'b1 :
           if(op[0])
             result_internal = result_div;
           else
             result_internal = result_mult;
        default :
           result_internal = {16{1'bx}};
     endcase
  end
  
  //done_mux
  always @(*) begin
     case (op[2])
        1'b0 :
           done_internal = done_aax;
        1'b1 :
           if(op[0])
             done_internal = done_div;
           else
             done_internal = done_mult;
        default :
           done_internal = 1'bx;
     endcase
  end

  single_cycle add_and_xor(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .op(op), 
    .rst_n(rst_n), 
    .start(start_single), 
    .done_aax(done_aax), 
    .result_aax(result_aax));
  
  three_cycle_mult mult(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .rst_n(rst_n), 
    .start(start_mult), 
    .done_mult(done_mult), 
    .result_mult(result_mult));

  three_cycle_div div(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .rst_n(rst_n), 
    .start(start_div), 
    .done_div(done_div), 
    .result_div(result_div));

  demo_reg_slave#(`ADDR_SIZE,`DATA_SIZE,`BASE_ADDR) i_demo_reg_slave(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(bus_vld), 
    .op(bus_op), 
    .addr(bus_addr), 
    .wdata(bus_wr_data), 
    .rdata(bus_rd_data), 
    .cfg_ctrl(cfg_ctrl), 
    .sta_status(sta_status), 
    .cnt_operation(cnt_operation), 
    .int_interrupt(int_interrupt), 
    .sta_status_wdata(sta_status_wdata),
    .vld_cnt_operation(done_internal),
    .int_interrupt_wdata(int_interrupt_wdata));
  
  assign result = (cfg_ctrl[0])? ~result_internal : result_internal;
  assign done   = done_internal;

  assign int_interrupt_wdata[`INT_INTERRUPT_REG_SIZE-1:1] = 'h0;
  assign int_interrupt_wdata[0] = ((B=='h0) && (op==3'b101));

  assign sta_status_wdata[`STA_STATUS_REG_SIZE-1:4] = 'h0;
  assign sta_status_wdata[0] = (A=='hff);
  assign sta_status_wdata[1] = (B=='hff);
  assign sta_status_wdata[2] = (A=='h0);
  assign sta_status_wdata[3] = (B=='h0);
endmodule

                                                                                                                                                                                                                                                   code/7.1/src/dut/three_cycle_mult.v                                                                 0000600 0000765 0000765 00000002205 14350216433 014750  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module three_cycle_mult(A, B, clk, rst_n, start, done_mult, result_mult);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input            rst_n;
   input            start;
   output reg       done_mult;
   output reg[15:0] result_mult;
   
   reg [7:0]        a_int;
   reg [7:0]        b_int;
   reg [15:0]       mult1;
   reg              done2;
   reg              done1;
   reg              done_mult_int;
   
   //multiplier
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n) begin
         done_mult_int <= 1'b0;
         done2         <= 1'b0;
         done1         <= 1'b0;
         
         a_int         <= 8'd0;
         b_int         <= 8'd0;
         mult1         <= 16'd0;
         result_mult   <= 16'd0;
      end
      else begin
         a_int         <= A;
         b_int         <= B;
         mult1         <= a_int * b_int;
         result_mult   <= mult1;
         done2         <= start & ((~done_mult_int));
         done1         <= done2 & ((~done_mult_int));
         done_mult_int <= done1 & ((~done_mult_int));
      end
   end

   assign done_mult = done_mult_int;
   
endmodule

                                                                                                                                                                                                                                                                                                                                                                                           code/7.1/src/dut/single_cycle.v                                                                     0000600 0000765 0000765 00000002311 14347266251 014070  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module single_cycle(A, B, clk, op, rst_n, start, done_aax, result_aax);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input [2:0]      op;
   input            rst_n;
   input            start;
   output reg          done_aax;
   output reg[15:0]     result_aax;
   
   
   //single_cycle_ops
   always @(posedge clk) begin
       if(!rst_n)
           result_aax <= 16'd0;
       else begin
           if (start == 1'b1)begin
               case (op)
                  3'b001 :
                     result_aax <= ({8'b00000000, A}) + ({8'b00000000, B});
                  3'b010 :
                     result_aax <= (({8'b00000000, A}) & ({8'b00000000, B}));
                  3'b011 :
                     result_aax <= (({8'b00000000, A}) ^ ({8'b00000000, B}));
                  default :
                    ;
               endcase
            end
            else ;
        end
   end
   
   //set_done
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n)
         done_aax <= 1'b0;
      else begin
         if ((start == 1'b1) && (op != 3'b000) && (done_aax == 1'b0))
            done_aax <= 1'b1;
         else
            done_aax <= 1'b0;
      end
   end
   
endmodule


                                                                                                                                                                                                                                                                                                                       code/7.1/src/dut/ip_reg_int.v                                                                       0000664 0000765 0000765 00000002213 14350066354 013556  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_int(clk,rst_n,vld,op,addr,wdata,int_data,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  input [REG_SIZE-1:0]       int_data;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write 1 clear
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld && op && (addr == (BASE_ADDR + OFFSET_ADDR)))
      reg_field <= (~wdata) & reg_field ;
    else
      reg_field <= int_data | reg_field;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                     code/7.1/src/dut/demo_reg_slave.v                                                                   0000664 0000765 0000765 00000005525 14347266251 014427  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     

 
module demo_reg_slave(
  cfg_ctrl,
  sta_status,
  sta_status_wdata,
  cnt_operation,
  vld_cnt_operation,
  int_interrupt,
  int_interrupt_wdata,
  clk,
  rst_n,
  vld,
  op,
  addr,
  wdata,
  rdata);

  parameter ADDR_SIZE = 32;
  parameter DATA_SIZE = 32;
  parameter BASE_ADDR = 0;

  input                       clk;
  input                       rst_n;
  input                       vld;
  input                       op;
  input [ADDR_SIZE-1:0]       addr;
  input [DATA_SIZE-1:0]       wdata;
  output reg[DATA_SIZE-1:0]       rdata;

  output reg[`CFG_CTRL_REG_SIZE-1:0]         cfg_ctrl;
  output reg[`STA_STATUS_REG_SIZE-1:0]         sta_status;
  input  [`STA_STATUS_REG_SIZE-1:0]        sta_status_wdata;
  output reg[`CNT_OPERATION_REG_SIZE-1:0]         cnt_operation;
  input vld_cnt_operation;
  output reg[`INT_INTERRUPT_REG_SIZE-1:0]         int_interrupt;
  input  [`INT_INTERRUPT_REG_SIZE-1:0]     int_interrupt_wdata;

  wire[DATA_SIZE*4-1:0]   rdata_bus;
  wire[3:0] rhit_bus;

  always @(rhit_bus or rdata_bus)begin
    case(rhit_bus)
      'd1: rdata = rdata_bus[DATA_SIZE*1-1:DATA_SIZE*0];
      'd2: rdata = rdata_bus[DATA_SIZE*2-1:DATA_SIZE*1];
      'd4: rdata = rdata_bus[DATA_SIZE*3-1:DATA_SIZE*2];
      'd8: rdata = rdata_bus[DATA_SIZE*4-1:DATA_SIZE*3];
      default: rdata = 'h0;
    endcase
  end

  ip_reg_cfg #(ADDR_SIZE, DATA_SIZE, `CFG_CTRL_REG_SIZE, BASE_ADDR, `CFG_CTRL_REG_OFFSET, `CFG_CTRL_REG_RST_VALUE) cfg_cfg_ctrl(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`CFG_CTRL_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*1-1:DATA_SIZE*0]),
    .rhit(rhit_bus[0]),
    .reg_field(cfg_ctrl)
  );
  ip_reg_sta #(ADDR_SIZE, DATA_SIZE, `STA_STATUS_REG_SIZE, BASE_ADDR, `STA_STATUS_REG_OFFSET, `STA_STATUS_REG_RST_VALUE) sta_sta_status(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(sta_status_wdata), 
    .rdata(rdata_bus[DATA_SIZE*2-1:DATA_SIZE*1]),
    .rhit(rhit_bus[1]),
    .reg_field(sta_status)
  );
  ip_reg_cnt #(ADDR_SIZE, DATA_SIZE, `CNT_OPERATION_REG_SIZE, BASE_ADDR, `CNT_OPERATION_REG_OFFSET, `CNT_OPERATION_REG_RST_VALUE) cnt_cnt_operation(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .vld_cnt(vld_cnt_operation), 
    .rdata(rdata_bus[DATA_SIZE*3-1:DATA_SIZE*2]),
    .rhit(rhit_bus[2]),
    .reg_field(cnt_operation)
  );
  ip_reg_int #(ADDR_SIZE, DATA_SIZE, `INT_INTERRUPT_REG_SIZE, BASE_ADDR, `INT_INTERRUPT_REG_OFFSET, `INT_INTERRUPT_REG_RST_VALUE) int_int_interrupt(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`INT_INTERRUPT_REG_SIZE-1:0]), 
    .int_data(int_interrupt_wdata[`INT_INTERRUPT_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*4-1:DATA_SIZE*3]),
    .rhit(rhit_bus[3]),
    .reg_field(int_interrupt)
  );

endmodule
                                                                                                                                                                           code/7.1/src/dut/ip_reg_cnt.v                                                                       0000664 0000765 0000765 00000002020 14350066354 013544  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_cnt(clk,rst_n,vld,op,addr,vld_cnt,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input                      vld_cnt;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld_cnt)
      reg_field <= reg_field+1;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      reg_field <= RST_VALUE;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                code/7.1/src/dut/ip_reg_cfg.v                                                                       0000664 0000765 0000765 00000002021 14350066354 013520  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_cfg(clk,rst_n,vld,op,addr,wdata,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  output reg [DATA_SIZE-1:0] rdata;
  output reg                 rhit;
  output reg [REG_SIZE-1:0]  reg_field;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld && op && (addr == (BASE_ADDR + OFFSET_ADDR)))
      reg_field <= wdata;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               code/6.18.2/sim/bind/half_adder_bind_all.sv                                                         0000664 0000765 0000765 00000000350 14344302632 016062  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
interface half_adder_bind_all();

  always@(half_adder.a,half_adder.b) begin
    $display("BIND ALL: %0t -> %m -> {a,b}: %b {carry,sum}: %b",$time,{half_adder.a,half_adder.b},{half_adder.carry,half_adder.sum});
  end

endinterface
                                                                                                                                                                                                                                                                                        code/6.18.2/sim/bind/half_adder_bind_scope.sv                                                       0000664 0000765 0000765 00000000354 14344302650 016427  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
interface half_adder_bind_scope();

  always@(half_adder.a,half_adder.b) begin
    $display("BIND SCOPE: %0t -> %m -> {a,b}: %b {carry,sum}: %b",$time,{half_adder.a,half_adder.b},{half_adder.carry,half_adder.sum});
  end

endinterface
                                                                                                                                                                                                                                                                                    code/6.18.2/sim/filelist/dut.f                                                                      0000775 0000765 0000765 00000000106 14344276264 013472  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/half_adder.v
$PWD/../src/full_adder.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                          code/6.18.2/sim/filelist/tb.f                                                                       0000775 0000765 0000765 00000000131 14344302663 013272  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
demo_tb.sv
bind/half_adder_bind_all.sv
bind/half_adder_bind_scope.sv
 
                                                                                                                                                                                                                                                                                                                                                                                                                                       code/7.3/sim/testbench/alu_pkg.sv                                                                   0000600 0000765 0000765 00000001425 14351642107 014421  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_PKG
`define ALU_PKG

package alu_pkg;
  typedef enum bit[2:0] {no_op  = 3'b000,
                         add_op = 3'b001, 
                         and_op = 3'b010,
                         xor_op = 3'b011,
                         mul_op = 3'b100,
                         div_op = 3'b101,
                         rst_op = 3'b111} operation_t;
  
  typedef enum{reg_rd, reg_wr} reg_operation_t;
  typedef bit[15:0] addr_t;
  typedef bit[15:0] data_t;

  //transaction
  `include "transaction.svh"   
  `include "reg_transaction.svh"
  
  //component
  `include "generator.svh"
  `include "driver.svh"
  `include "monitor.svh"
  `include "scoreboard.svh"
  `include "coverage.svh"
  `include "environment.svh"
  
  //testcase
  `include "testcase.svh"

endpackage 
   
`endif
                                                                                                                                                                                                                                           code/7.3/sim/testbench/top.sv                                                                       0000600 0000765 0000765 00000002020 14353545403 013574  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TOP
`define TOP

module top;
  import   alu_pkg::*;
  bit clk;
  
  initial begin
    clk = 0;
    forever begin
       #10;
       clk = ~clk;
    end
  end
  
  alu_interface        intf(.clk(clk));
  alu_reg_interface    reg_intf(.clk(clk),.rst_n(intf.rst_n));
  apb_interface        apb_intf(.pclk(clk),.prst_n(intf.rst_n));

  alu_apb              DUT( .bus(apb_intf.slave));

  //connect reg_intf
  initial begin
    force reg_intf.vld     = DUT.alu_core.bus_vld;
    force reg_intf.op      = DUT.alu_core.bus_op;
    force reg_intf.addr    = DUT.alu_core.bus_addr;
    force reg_intf.wr_data = DUT.alu_core.bus_wr_data;
    force reg_intf.rd_data = DUT.alu_core.bus_rd_data;
  end
  
  testcase tc;
  
  initial begin
    $display("************ Start of testcase ****************");
    tc = new(intf, apb_intf, reg_intf);
    tc.run();
    #100;
    $finish;
  end
  
  final begin
    $display("************ Finish of testcase ***************");
  end

  //initial begin
  //  $vcdpluson;
  //end
  
endmodule 

`endif
   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                code/7.3/sim/filelist/dut.f                                                                         0000600 0000765 0000765 00000000574 14351601103 013217  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/dut/demo_reg_slave.vh
$PWD/../src/dut/single_cycle.v
$PWD/../src/dut/three_cycle_mult.v
$PWD/../src/dut/three_cycle_div.v
$PWD/../src/dut/alu.v
$PWD/../src/dut/alu_apb.v
$PWD/../src/dut/ip_reg_cfg.v
$PWD/../src/dut/ip_reg_cfw.v
$PWD/../src/dut/ip_reg_cnt.v
$PWD/../src/dut/ip_reg_int.v
$PWD/../src/dut/ip_reg_sta.v
$PWD/../src/dut/demo_reg_slave.v
                                                                                                                                    code/7.3/sim/filelist/tb.f                                                                          0000600 0000765 0000765 00000000401 14351601125 013021  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
+incdir+testbench/transaction
+incdir+testbench/component
+incdir+testbench/testcase
testbench/alu_pkg.sv
testbench/interface/alu_interface.sv
testbench/interface/alu_reg_interface.sv
testbench/interface/apb_interface.sv
testbench/top.sv

                                                                                                                                                                                                                                                               code/7.3/src/dut/alu_apb.v                                                                          0000664 0000765 0000765 00000005662 14353545137 013063  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`define ALU_BEGIN_ADDR 16'hfe00
`define ALU_END_ADDR   16'hffff

module alu_apb #(parameter begin_addr = 16'hfe00, end_addr = 16'hffff)
(
  apb_interface bus
);
  
  localparam DRIVE_IDLE        = 0;
  localparam DRIVE_IDLE_REPEAT = 1;
  localparam GET_RDATA         = 2;

  reg         psel;
  reg [1:0]   alu_state;
  reg         alu_vld;
  reg         alu_op;
  reg [15:0]  alu_addr;
  reg [15:0]  alu_wr_data;
  reg [15:0]  alu_rd_data;

  assign psel = bus.psel && (bus.paddr >= begin_addr) && (bus.paddr <= end_addr);

  always @(posedge bus.pclk)begin
    if(!bus.prst_n)begin
      alu_state   <= DRIVE_IDLE_REPEAT;
      alu_vld     <= 1'b0;
      alu_op      <= 1'b0;
      alu_addr    <= 'd0;
      alu_wr_data <= 'd0;
      bus.pready  <= 1'b0;
      bus.prdata  <= 'd0;
    end
    else if((psel == 1'b1) && (bus.penable == 1'b0))begin
      if(bus.pwrite)begin // write 
        bus.pready  <= 1'b1;// current cucle wr_data is ready
        alu_vld     <= 1'b1;
        alu_op      <= 1'b1;
        alu_addr    <= (bus.paddr - begin_addr);
        alu_wr_data <= bus.pwdata;
      end
      else begin // read
        bus.pready  <= 1'b0;// next cycle rd_data will be ready
        alu_vld     <= 1'b1;
        alu_op      <= 1'b0;
        alu_addr    <= (bus.paddr - begin_addr);
        alu_wr_data <= bus.pwdata;
      end
    end
    else if((psel == 1'b1) && (bus.penable == 1'b1))begin
      if(bus.pwrite)begin // write 
        alu_vld      <= 1'b0;
        alu_op       <= 1'b0;
        alu_addr     <= 'd0;
        alu_wr_data  <= 'd0;
        bus.pready   <= 1'b0;
      end
      else begin
        if(alu_state == DRIVE_IDLE)begin
          alu_vld      <= 1'b0;
          alu_op       <= 1'b0;
          alu_addr     <= 'd0;
          alu_wr_data  <= 'd0;
          bus.pready   <= 1'b0;
          bus.prdata   <= 'd0;
          alu_state    <= DRIVE_IDLE_REPEAT;
        end
        else if(alu_state == DRIVE_IDLE_REPEAT)begin
          alu_vld      <= 1'b0;
          alu_op       <= 1'b0;
          alu_addr     <= 'd0;
          alu_wr_data  <= 'd0;
          bus.pready   <= 1'b0;
          bus.prdata   <= 'd0;
          alu_state    <= GET_RDATA;
        end
        else begin
          alu_vld      <= 1'b0;
          alu_op       <= 1'b0;
          alu_addr     <= 'd0;
          alu_wr_data  <= 'd0;
          bus.pready   <= 1'b1;
          bus.prdata   <= alu_rd_data;
          alu_state    <= DRIVE_IDLE;
        end
      end
    end
    else begin
      alu_vld     <= 1'b0;
      alu_op      <= 1'b0;
      alu_addr    <= 'd0;
      alu_wr_data <= 'd0;
      bus.pready  <= 1'b0;
      bus.prdata  <= 'd0;
    end
  end

  alu alu_core  ( .clk         ( bus.pclk),
                  .rst_n       ( bus.prst_n),
                  .bus_vld     ( alu_vld),
                  .bus_op      ( alu_op),
                  .bus_addr    ( alu_addr),
                  .bus_wr_data ( alu_wr_data),
                  .bus_rd_data ( alu_rd_data));

endmodule
                                                                              code/7.3/src/dut/alu_apb_bak.v                                                                      0000664 0000765 0000765 00000005653 14353543324 013674  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`define ALU_BEGIN_ADDR 16'hfe00
`define ALU_END_ADDR   16'hffff

module alu_apb #(parameter begin_addr = 16'hfe00, end_addr = 16'hffff)
(
  apb_interface bus
);
  
  localparam DRIVE_IDLE        = 0;
  localparam DRIVE_IDLE_REPEAT = 1;
  localparam GET_RDATA         = 2;

  reg         psel;
  reg [1:0]   alu_state;
  reg         alu_vld;
  reg         alu_op;
  reg [15:0]  alu_addr;
  reg [15:0]  alu_wr_data;
  reg [15:0]  alu_rd_data;

  assign psel = bus.psel && (bus.paddr >= begin_addr) && (bus.paddr <= end_addr);

  always @(posedge bus.pclk)begin
    if(!bus.prst_n)begin
      alu_state   <= DRIVE_IDLE;
      alu_vld     <= 1'b0;
      alu_op      <= 1'b0;
      alu_addr    <= 'd0;
      alu_wr_data <= 'd0;
      bus.pready  <= 1'b0;
      bus.prdata  <= 'd0;
    end
    else if((psel == 1'b1) && (bus.penable == 1'b0))begin
      if(bus.pwrite)begin // write 
        bus.pready  <= 1'b1;// current cucle wr_data is ready
        alu_vld     <= 1'b1;
        alu_op      <= 1'b1;
        alu_addr    <= (bus.paddr - begin_addr);
        alu_wr_data <= bus.pwdata;
      end
      else begin // read
        bus.pready  <= 1'b0;// next cycle rd_data will be ready
        alu_vld     <= 1'b1;
        alu_op      <= 1'b0;
        alu_addr    <= (bus.paddr - begin_addr);
        alu_wr_data <= bus.pwdata;
      end
    end
    else if((psel == 1'b1) && (bus.penable == 1'b1))begin
      if(bus.pwrite)begin // write 
        alu_vld      <= 1'b0;
        alu_op       <= 1'b0;
        alu_addr     <= 'd0;
        alu_wr_data  <= 'd0;
        bus.pready   <= 1'b0;
      end
      else begin
        if(alu_state == DRIVE_IDLE)begin
          alu_vld      <= 1'b0;
          alu_op       <= 1'b0;
          alu_addr     <= 'd0;
          alu_wr_data  <= 'd0;
          bus.pready   <= 1'b0;
          bus.prdata   <= 'd0;
          alu_state    <= DRIVE_IDLE_REPEAT;
        end
        else if(alu_state == DRIVE_IDLE_REPEAT)begin
          alu_vld      <= 1'b0;
          alu_op       <= 1'b0;
          alu_addr     <= 'd0;
          alu_wr_data  <= 'd0;
          bus.pready   <= 1'b0;
          bus.prdata   <= 'd0;
          alu_state    <= GET_RDATA;
        end
        else begin
          alu_vld      <= 1'b0;
          alu_op       <= 1'b0;
          alu_addr     <= 'd0;
          alu_wr_data  <= 'd0;
          bus.pready   <= 1'b1;
          bus.prdata   <= alu_rd_data;
          alu_state    <= DRIVE_IDLE;
        end
      end
    end
    else begin
      alu_vld     <= 1'b0;
      alu_op      <= 1'b0;
      alu_addr    <= 'd0;
      alu_wr_data <= 'd0;
      bus.pready  <= 1'b0;
      bus.prdata  <= 'd0;
    end
  end

  alu alu_core  ( .clk         ( bus.pclk),
                  .rst_n       ( bus.prst_n),
                  .bus_vld     ( alu_vld),
                  .bus_op      ( alu_op),
                  .bus_addr    ( alu_addr),
                  .bus_wr_data ( alu_wr_data),
                  .bus_rd_data ( alu_rd_data));

endmodule
                                                                                     code/7.3/src/dut/alu.v                                                                              0000600 0000765 0000765 00000013226 14351430636 012215  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module alu(
  clk, 
  rst_n, 
  bus_vld, 
  bus_op, 
  bus_addr, 
  bus_wr_data, 
  bus_rd_data);

  input         clk;
  input         rst_n;

  input            bus_vld;
  input            bus_op;
  input [15:0]     bus_addr;
  input [15:0]     bus_wr_data;
  output [15:0]    bus_rd_data;

  wire [7:0]     A;//cfg_operands
  wire [7:0]     B;//cfg_operands
  wire [2:0]     op;//cfw_opcode
  reg            start;// trigger by write cfw_opcode
  reg            busy_internal;//sta_status[4]
  reg            done_internal;//sta_status[5]
  reg [15:0]     result_internal;//sta_result
  
  wire             busy_aax;
  wire             busy_mult;
  wire             busy_div;
  wire             done_aax;
  wire             done_mult;
  wire             done_div;
  wire [15:0]      result_aax;
  wire [15:0]      result_mult;
  wire [15:0]      result_div;
  reg              start_single;
  reg              start_mult;
  reg              start_div;

  wire[`INT_INTERRUPT_REG_SIZE-1:0]    int_interrupt_wdata;
  wire[`STA_STATUS_REG_SIZE-1:0]       sta_status_wdata;
  wire[`STA_RESULT_REG_SIZE-1:0]       sta_result_wdata;

  wire[`CFG_CTRL_REG_SIZE-1:0]         cfg_ctrl;
  wire[`CFG_OPERANDS_REG_SIZE-1:0]     cfg_operands;
  wire[`CFW_OPCODE_REG_SIZE-1:0]       cfw_opcode;
  wire                                 trigger;
  wire[`STA_STATUS_REG_SIZE-1:0]       sta_status;
  wire[`STA_RESULT_REG_SIZE-1:0]       sta_result;
  wire[`CNT_OPERATION_REG_SIZE-1:0]    cnt_operation;
  wire[`INT_INTERRUPT_REG_SIZE-1:0]    int_interrupt;

  //detect op trigger signal
  reg q0,q1,detect_trigger_pluse;
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n)begin
      q0 <= 0;
      q1 <= 0;
    end
    else begin
      q0 <= trigger;
      q1 <= q0;
    end
  end

  assign detect_trigger_pluse = (~trigger) & q0 & (~q1);

  //gen op start signal
  reg[2:0] op_i, op_duration; 
  reg in_duration;

  assign op_duration = op[2]? 'd3 : 'd1;

  always @(posedge clk or negedge rst_n) begin
    if (!rst_n)begin
      start        <= 0;
      op_i         <= 0;
      in_duration  <= 0;
    end
    else if(op_i > op_duration) begin
      start       <= 0;
      in_duration <= 0;
      op_i        <= 0;
    end
    else if((detect_trigger_pluse == 1) || (in_duration == 1))begin
      start       <= 1;
      in_duration <= 1;
      op_i        <= op_i + 1;
    end
    else begin
      start       <= 0;
      in_duration <= 0;
      op_i        <= 0;
    end
  end
  
  //start_demux
  always @(*) begin
     case (op[2])
        1'b0 :
           begin
              start_single = start;
              start_mult   = 1'b0;
              start_div    = 1'b0;
           end
        1'b1 :
           if(op[0]) begin
                start_single = 1'b0;
                start_mult   = 1'b0;
                start_div    = start;
             end
           else begin
                start_single = 1'b0;
                start_mult   = start;
                start_div    = 1'b0;
           end
        default :
           ;
     endcase
  end
  
  //result_mux
  always @(*) begin
     case (op[2])
        1'b0 :
           result_internal = result_aax;
        1'b1 :
           if(op[0])
             result_internal = result_div;
           else
             result_internal = result_mult;
        default :
           result_internal = {16{1'bx}};
     endcase
  end
  
  //done_mux
  always @(*) begin
     case (op[2])
       1'b0 : begin
           busy_internal = busy_aax;
           done_internal = done_aax;
       end
       1'b1 :
          if(op[0]) begin
            busy_internal = busy_div;
            done_internal = done_div;
          end
          else begin
            busy_internal = busy_mult;
            done_internal = done_mult;
          end
       default :begin
          busy_internal = 1'bx;
          done_internal = 1'bx;
       end
     endcase
  end

  single_cycle add_and_xor(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .op(op), 
    .rst_n(rst_n), 
    .start(start_single), 
    .busy_aax(busy_aax), 
    .done_aax(done_aax), 
    .result_aax(result_aax));
  
  three_cycle_mult mult(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .rst_n(rst_n), 
    .start(start_mult), 
    .busy_mult(busy_mult), 
    .done_mult(done_mult), 
    .result_mult(result_mult));

  three_cycle_div div(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .rst_n(rst_n), 
    .start(start_div), 
    .busy_div(busy_div), 
    .done_div(done_div), 
    .result_div(result_div));

  demo_reg_slave#(`ADDR_SIZE,`DATA_SIZE,`BASE_ADDR) i_demo_reg_slave(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(bus_vld), 
    .op(bus_op), 
    .addr(bus_addr), 
    .wdata(bus_wr_data), 
    .rdata(bus_rd_data), 
    .cfg_ctrl(cfg_ctrl), 
    .cfg_operands(cfg_operands), 
    .cfw_opcode(cfw_opcode), 
    .trigger(trigger), 
    .sta_result(sta_result), 
    .sta_status(sta_status), 
    .cnt_operation(cnt_operation), 
    .int_interrupt(int_interrupt), 
    .sta_status_wdata(sta_status_wdata),
    .sta_result_wdata(sta_result_wdata),
    .vld_cnt_operation(done_internal),
    .int_interrupt_wdata(int_interrupt_wdata));

  assign A  = cfg_operands[15:8];
  assign B  = cfg_operands[7:0];
  assign op = cfw_opcode[2:0];
  
  assign sta_result_wdata = (cfg_ctrl[0])? ~result_internal : result_internal;

  assign int_interrupt_wdata[`INT_INTERRUPT_REG_SIZE-1:1] = 'h0;
  assign int_interrupt_wdata[0] = ((B=='h0) && (op==3'b101));

  assign sta_status_wdata[`STA_STATUS_REG_SIZE-1:6] = 'h0;
  assign sta_status_wdata[0] = (A=='hff);
  assign sta_status_wdata[1] = (B=='hff);
  assign sta_status_wdata[2] = (A=='h0);
  assign sta_status_wdata[3] = (B=='h0);
  assign sta_status_wdata[4] = busy_internal;
  assign sta_status_wdata[5] = done_internal;
endmodule

                                                                                                                                                                                                                                                                                                                                                                          code/7.3/src/dut/single_cycle.v                                                                     0000600 0000765 0000765 00000002442 14351430636 014072  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module single_cycle(A, B, clk, op, rst_n, start, busy_aax, done_aax, result_aax);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input [2:0]      op;
   input            rst_n;
   input            start;
   output reg       busy_aax;
   output reg       done_aax;
   output reg[15:0] result_aax;

   //single_cycle_ops
   always @(posedge clk) begin
       if(!rst_n)
           result_aax <= 16'd0;
       else begin
           if (start == 1'b1)begin
               case (op)
                  3'b001 :
                     result_aax <= ({8'b00000000, A}) + ({8'b00000000, B});
                  3'b010 :
                     result_aax <= (({8'b00000000, A}) & ({8'b00000000, B}));
                  3'b011 :
                     result_aax <= (({8'b00000000, A}) ^ ({8'b00000000, B}));
                  default :
                    ;
               endcase
            end
            else ;
        end
   end
   
   //set_done
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n)
         done_aax   <= 1'b0;
      else begin
         if ((start == 1'b1) && (op != 3'b000) && (done_aax == 1'b0))
            done_aax <= 1'b1;
         else
            done_aax <= 1'b0;
      end
   end

   assign busy_aax = (start == 1'b1) && (done_aax == 1'b0);
   
endmodule


                                                                                                                                                                                                                              code/7.3/src/dut/ip_reg_int.v                                                                       0000664 0000765 0000765 00000002213 14351430636 013557  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_int(clk,rst_n,vld,op,addr,wdata,int_data,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  input [REG_SIZE-1:0]       int_data;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write 1 clear
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld && op && (addr == (BASE_ADDR + OFFSET_ADDR)))
      reg_field <= (~wdata) & reg_field ;
    else
      reg_field <= int_data | reg_field;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                     code/7.3/src/dut/three_cycle_mult.v                                                                 0000600 0000765 0000765 00000002355 14351430636 014764  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module three_cycle_mult(A, B, clk, rst_n, start, busy_mult, done_mult, result_mult);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input            rst_n;
   input            start;
   output reg       busy_mult;
   output reg       done_mult;
   output reg[15:0] result_mult;
   
   reg [7:0]        a_int;
   reg [7:0]        b_int;
   reg [15:0]       mult1;
   reg              done2;
   reg              done1;
   reg              done_mult_int;
   
   //multiplier
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n) begin
         done_mult_int <= 1'b0;
         done2         <= 1'b0;
         done1         <= 1'b0;
         
         a_int         <= 8'd0;
         b_int         <= 8'd0;
         mult1         <= 16'd0;
         result_mult   <= 16'd0;
      end
      else begin
         a_int         <= A;
         b_int         <= B;
         mult1         <= a_int * b_int;
         result_mult   <= mult1;
         done2         <= start & ((~done_mult_int));
         done1         <= done2 & ((~done_mult_int));
         done_mult_int <= done1 & ((~done_mult_int));
      end
   end

   assign done_mult = done_mult_int;
   assign busy_mult = (start == 1'b1) && (done_mult == 1'b0);
   
endmodule

                                                                                                                                                                                                                                                                                   code/7.3/src/dut/demo_reg_slave.vh                                                                  0000664 0000765 0000765 00000001476 14351430636 014575  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`define ADDR_SIZE 'd16
`define DATA_SIZE 'd16
`define BASE_ADDR 'd8

`define CFG_OPERANDS_REG_SIZE 'd16
`define CFG_OPERANDS_REG_OFFSET 'h0
`define CFG_OPERANDS_REG_RST_VALUE 16'h0

`define CFW_OPCODE_REG_SIZE 'd3
`define CFW_OPCODE_REG_OFFSET 'h1
`define CFW_OPCODE_REG_RST_VALUE 16'h0

`define CFG_CTRL_REG_SIZE 'd1
`define CFG_CTRL_REG_OFFSET 'h2
`define CFG_CTRL_REG_RST_VALUE 1'h0

`define STA_STATUS_REG_SIZE 'd8
`define STA_STATUS_REG_OFFSET 'h3
`define STA_STATUS_REG_RST_VALUE 8'h0

`define STA_RESULT_REG_SIZE 'd16
`define STA_RESULT_REG_OFFSET 'h4
`define STA_RESULT_REG_RST_VALUE 16'h0

`define CNT_OPERATION_REG_SIZE 'd16
`define CNT_OPERATION_REG_OFFSET 'h5
`define CNT_OPERATION_REG_RST_VALUE 16'h0

`define INT_INTERRUPT_REG_SIZE 'd7
`define INT_INTERRUPT_REG_OFFSET 'h6
`define INT_INTERRUPT_REG_RST_VALUE 7'h0

                                                                                                                                                                                                  code/7.3/src/dut/demo_reg_slave.v                                                                   0000664 0000765 0000765 00000011014 14351430636 014412  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module demo_reg_slave(
  cfg_ctrl,
  cfg_operands,
  cfw_opcode,
  trigger,
  sta_result,
  sta_status,
  sta_status_wdata,
  sta_result_wdata,
  cnt_operation,
  vld_cnt_operation,
  int_interrupt,
  int_interrupt_wdata,
  clk,
  rst_n,
  vld,
  op,
  addr,
  wdata,
  rdata);

  parameter ADDR_SIZE = 32;
  parameter DATA_SIZE = 32;
  parameter BASE_ADDR = 0;

  input                       clk;
  input                       rst_n;
  input                       vld;
  input                       op;
  input [ADDR_SIZE-1:0]       addr;
  input [DATA_SIZE-1:0]       wdata;
  output reg[DATA_SIZE-1:0]       rdata;

  output reg[`CFG_CTRL_REG_SIZE-1:0]         cfg_ctrl;
  output reg[`CFG_OPERANDS_REG_SIZE-1:0]     cfg_operands;
  output reg[`CFG_OPERANDS_REG_SIZE-1:0]     cfw_opcode;
  output reg                                 trigger;
  output reg[`STA_STATUS_REG_SIZE-1:0]       sta_status;
  input  [`STA_STATUS_REG_SIZE-1:0]          sta_status_wdata;
  output reg[`STA_RESULT_REG_SIZE-1:0]       sta_result;
  input  [`STA_RESULT_REG_SIZE-1:0]          sta_result_wdata;
  output reg[`CNT_OPERATION_REG_SIZE-1:0]    cnt_operation;
  input vld_cnt_operation;
  output reg[`INT_INTERRUPT_REG_SIZE-1:0]    int_interrupt;
  input  [`INT_INTERRUPT_REG_SIZE-1:0]       int_interrupt_wdata;

  wire[DATA_SIZE*7-1:0]   rdata_bus;
  wire[6:0] rhit_bus;

  always @(rhit_bus or rdata_bus)begin
    case(rhit_bus)
      'b000_0001: rdata = rdata_bus[DATA_SIZE*1-1:DATA_SIZE*0];
      'b000_0010: rdata = rdata_bus[DATA_SIZE*2-1:DATA_SIZE*1];
      'b000_0100: rdata = rdata_bus[DATA_SIZE*3-1:DATA_SIZE*2];
      'b000_1000: rdata = rdata_bus[DATA_SIZE*4-1:DATA_SIZE*3];
      'b001_0000: rdata = rdata_bus[DATA_SIZE*5-1:DATA_SIZE*4];
      'b010_0000: rdata = rdata_bus[DATA_SIZE*6-1:DATA_SIZE*5];
      'b100_0000: rdata = rdata_bus[DATA_SIZE*7-1:DATA_SIZE*6];
      default: rdata = 'h0;
    endcase
  end

  ip_reg_cfg #(ADDR_SIZE, DATA_SIZE, `CFG_OPERANDS_REG_SIZE, BASE_ADDR, `CFG_OPERANDS_REG_OFFSET, `CFG_OPERANDS_REG_RST_VALUE) cfg_cfg_operands(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`CFG_OPERANDS_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*1-1:DATA_SIZE*0]),
    .rhit(rhit_bus[0]),
    .reg_field(cfg_operands)
  );

  ip_reg_cfw #(ADDR_SIZE, DATA_SIZE, `CFW_OPCODE_REG_SIZE, BASE_ADDR, `CFW_OPCODE_REG_OFFSET, `CFW_OPCODE_REG_RST_VALUE) cfw_cfw_opcode(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`CFW_OPCODE_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*2-1:DATA_SIZE*1]),
    .rhit(rhit_bus[1]),
    .reg_field(cfw_opcode),
    .trigger(trigger)
  );

  ip_reg_cfg #(ADDR_SIZE, DATA_SIZE, `CFG_CTRL_REG_SIZE, BASE_ADDR, `CFG_CTRL_REG_OFFSET, `CFG_CTRL_REG_RST_VALUE) cfg_cfg_ctrl(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`CFG_CTRL_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*3-1:DATA_SIZE*2]),
    .rhit(rhit_bus[2]),
    .reg_field(cfg_ctrl)
  );

  ip_reg_sta #(ADDR_SIZE, DATA_SIZE, `STA_STATUS_REG_SIZE, BASE_ADDR, `STA_STATUS_REG_OFFSET, `STA_STATUS_REG_RST_VALUE) sta_sta_status(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(sta_status_wdata), 
    .rdata(rdata_bus[DATA_SIZE*4-1:DATA_SIZE*3]),
    .rhit(rhit_bus[3]),
    .reg_field(sta_status)
  );

  ip_reg_sta #(ADDR_SIZE, DATA_SIZE, `STA_RESULT_REG_SIZE, BASE_ADDR, `STA_RESULT_REG_OFFSET, `STA_RESULT_REG_RST_VALUE) sta_sta_result(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(sta_result_wdata), 
    .rdata(rdata_bus[DATA_SIZE*5-1:DATA_SIZE*4]),
    .rhit(rhit_bus[4]),
    .reg_field(sta_result)
  );

  ip_reg_cnt #(ADDR_SIZE, DATA_SIZE, `CNT_OPERATION_REG_SIZE, BASE_ADDR, `CNT_OPERATION_REG_OFFSET, `CNT_OPERATION_REG_RST_VALUE) cnt_cnt_operation(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .vld_cnt(vld_cnt_operation), 
    .rdata(rdata_bus[DATA_SIZE*6-1:DATA_SIZE*5]),
    .rhit(rhit_bus[5]),
    .reg_field(cnt_operation)
  );

  ip_reg_int #(ADDR_SIZE, DATA_SIZE, `INT_INTERRUPT_REG_SIZE, BASE_ADDR, `INT_INTERRUPT_REG_OFFSET, `INT_INTERRUPT_REG_RST_VALUE) int_int_interrupt(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`INT_INTERRUPT_REG_SIZE-1:0]), 
    .int_data(int_interrupt_wdata[`INT_INTERRUPT_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*7-1:DATA_SIZE*6]),
    .rhit(rhit_bus[6]),
    .reg_field(int_interrupt)
  );

endmodule
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    code/7.3/src/dut/ip_reg_cfw.v                                                                       0000664 0000765 0000765 00000002244 14351430636 013550  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_cfw(clk,rst_n,vld,op,addr,wdata,rdata,reg_field,rhit,trigger);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  output reg [DATA_SIZE-1:0] rdata;
  output reg                 rhit;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 trigger;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)begin
      reg_field <= RST_VALUE;
      trigger   <= 0;
    end
    else if(vld && op && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      reg_field <= wdata;
      trigger   <= 1;
    end
    else
      trigger   <= 0;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                            code/7.3/src/dut/ip_reg_cnt.v                                                                       0000664 0000765 0000765 00000002020 14351430636 013545  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_cnt(clk,rst_n,vld,op,addr,vld_cnt,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input                      vld_cnt;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld_cnt)
      reg_field <= reg_field+1;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      reg_field <= RST_VALUE;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                code/7.3/src/dut/ip_reg_sta.v                                                                       0000664 0000765 0000765 00000001734 14351430636 013563  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_sta(clk,rst_n,vld,op,addr,wdata,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else
      reg_field <= wdata;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                    code/7.3/src/dut/ip_reg_cfg.v                                                                       0000664 0000765 0000765 00000002021 14351430636 013521  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_cfg(clk,rst_n,vld,op,addr,wdata,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  output reg [DATA_SIZE-1:0] rdata;
  output reg                 rhit;
  output reg [REG_SIZE-1:0]  reg_field;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld && op && (addr == (BASE_ADDR + OFFSET_ADDR)))
      reg_field <= wdata;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               code/7.3/src/dut/three_cycle_div.v                                                                  0000664 0000765 0000765 00000002365 14351430636 014600  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module three_cycle_div(A, B, clk, rst_n, start, busy_div, done_div, result_div);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input            rst_n;
   input            start;
   output reg       busy_div;
   output reg       done_div;
   output reg[15:0] result_div;
   
   reg [7:0]        a_int;
   reg [7:0]        b_int;
   reg [15:0]       div1;
   reg              done2;
   reg              done1;
   reg              done_div_int;
   
   //divider
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n) begin
         done_div_int <= 1'b0;
         done2        <= 1'b0;
         done1        <= 1'b0;
         
         a_int        <= 8'd0;
         b_int        <= 8'd0;
         div1         <= 16'd0;
         result_div   <= 16'd0;
      end
      else begin
         a_int <= A;
         b_int <= B;
         if(b_int == 0)
           div1 <= 'h0;
         else
           div1 <= a_int / b_int;
         result_div   <= div1;
         done2        <= start & ((~done_div_int));
         done1        <= done2 & ((~done_div_int));
         done_div_int <= done1 & ((~done_div_int));
      end
   end

   assign done_div = done_div_int;
   assign busy_div = (start == 1'b1) && (done_div == 1'b0);
   
endmodule

                                                                                                                                                                                                                                                                           code/6.18.1/sim/bind/half_adder_bind_all.v                                                          0000664 0000765 0000765 00000000342 14344274105 015702  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module half_adder_bind_all();

  always@(half_adder.a,half_adder.b) begin
    $display("BIND ALL: %0t -> %m -> {a,b}: %b {carry,sum}: %b",$time,{half_adder.a,half_adder.b},{half_adder.carry,half_adder.sum});
  end

endmodule
                                                                                                                                                                                                                                                                                              code/6.18.1/sim/bind/half_adder_bind_scope.v                                                        0000664 0000765 0000765 00000000346 14344274205 016250  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module half_adder_bind_scope();

  always@(half_adder.a,half_adder.b) begin
    $display("BIND SCOPE: %0t -> %m -> {a,b}: %b {carry,sum}: %b",$time,{half_adder.a,half_adder.b},{half_adder.carry,half_adder.sum});
  end

endmodule
                                                                                                                                                                                                                                                                                          code/6.18.1/sim/filelist/dut.f                                                                      0000775 0000765 0000765 00000000106 14344251322 013455  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/half_adder.v
$PWD/../src/full_adder.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                          code/6.18.1/sim/filelist/tb.f                                                                       0000775 0000765 0000765 00000000127 14344276215 013301  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
demo_tb.sv
bind/half_adder_bind_all.v
bind/half_adder_bind_scope.v
 
                                                                                                                                                                                                                                                                                                                                                                                                                                         code/7.2/sim/testbench/top.sv                                                                       0000600 0000765 0000765 00000001540 14353210027 013570  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TOP
`define TOP

module top;
  import   alu_pkg::*;
  bit clk;
  
  initial begin
    clk = 0;
    forever begin
       #10;
       clk = ~clk;
    end
  end
  
  alu_interface        intf(.clk(clk));
  alu_reg_interface    reg_intf(.clk(clk),.rst_n(intf.rst_n));

  alu DUT  ( .clk         ( clk),
             .rst_n       ( intf.rst_n),
             .bus_vld     ( reg_intf.vld),
             .bus_op      ( reg_intf.op),
             .bus_addr    ( reg_intf.addr),
             .bus_wr_data ( reg_intf.wr_data),
             .bus_rd_data ( reg_intf.rd_data));
  
  
  testcase tc;
  
  initial begin
    $display("************ Start of testcase ****************");
    tc = new(intf, reg_intf);
    tc.run();
    #100;
    $finish;
  end
  
  final begin
    $display("************ Finish of testcase ***************");
  end
  
endmodule 

`endif
   
                                                                                                                                                                code/7.2/sim/testbench/alu_pkg.sv                                                                   0000600 0000765 0000765 00000001335 14347317340 014423  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_PKG
`define ALU_PKG

package alu_pkg;
  typedef enum bit[2:0] {no_op  = 3'b000,
                         add_op = 3'b001, 
                         and_op = 3'b010,
                         xor_op = 3'b011,
                         mul_op = 3'b100,
                         div_op = 3'b101,
                         rst_op = 3'b111} operation_t;
  
  typedef enum{reg_rd, reg_wr} reg_operation_t;

  //transaction
  `include "transaction.svh"   
  `include "reg_transaction.svh"
  
  //component
  `include "generator.svh"
  `include "driver.svh"
  `include "monitor.svh"
  `include "scoreboard.svh"
  `include "coverage.svh"
  `include "environment.svh"
  
  //testcase
  `include "testcase.svh"

endpackage 
   
`endif
                                                                                                                                                                                                                                                                                                   code/7.2/sim/filelist/tb.f                                                                          0000600 0000765 0000765 00000000334 14347317340 013035  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
+incdir+testbench/transaction
+incdir+testbench/component
+incdir+testbench/testcase
testbench/alu_pkg.sv
testbench/interface/alu_interface.sv
testbench/interface/alu_reg_interface.sv
testbench/top.sv

                                                                                                                                                                                                                                                                                                    code/7.2/sim/filelist/dut.f                                                                         0000600 0000765 0000765 00000000542 14350074471 013224  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/dut/demo_reg_slave.vh
$PWD/../src/dut/single_cycle.v
$PWD/../src/dut/three_cycle_mult.v
$PWD/../src/dut/three_cycle_div.v
$PWD/../src/dut/alu.v
$PWD/../src/dut/ip_reg_cfg.v
$PWD/../src/dut/ip_reg_cfw.v
$PWD/../src/dut/ip_reg_cnt.v
$PWD/../src/dut/ip_reg_int.v
$PWD/../src/dut/ip_reg_sta.v
$PWD/../src/dut/demo_reg_slave.v
                                                                                                                                                              code/7.2/src/dut/three_cycle_mult.v                                                                 0000600 0000765 0000765 00000002355 14350216773 014766  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module three_cycle_mult(A, B, clk, rst_n, start, busy_mult, done_mult, result_mult);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input            rst_n;
   input            start;
   output reg       busy_mult;
   output reg       done_mult;
   output reg[15:0] result_mult;
   
   reg [7:0]        a_int;
   reg [7:0]        b_int;
   reg [15:0]       mult1;
   reg              done2;
   reg              done1;
   reg              done_mult_int;
   
   //multiplier
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n) begin
         done_mult_int <= 1'b0;
         done2         <= 1'b0;
         done1         <= 1'b0;
         
         a_int         <= 8'd0;
         b_int         <= 8'd0;
         mult1         <= 16'd0;
         result_mult   <= 16'd0;
      end
      else begin
         a_int         <= A;
         b_int         <= B;
         mult1         <= a_int * b_int;
         result_mult   <= mult1;
         done2         <= start & ((~done_mult_int));
         done1         <= done2 & ((~done_mult_int));
         done_mult_int <= done1 & ((~done_mult_int));
      end
   end

   assign done_mult = done_mult_int;
   assign busy_mult = (start == 1'b1) && (done_mult == 1'b0);
   
endmodule

                                                                                                                                                                                                                                                                                   code/7.2/src/dut/ip_reg_sta.v                                                                       0000664 0000765 0000765 00000001734 14350066300 013552  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_sta(clk,rst_n,vld,op,addr,wdata,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else
      reg_field <= wdata;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                    code/7.2/src/dut/ip_reg_cnt.v                                                                       0000664 0000765 0000765 00000002020 14350066153 013542  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_cnt(clk,rst_n,vld,op,addr,vld_cnt,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input                      vld_cnt;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld_cnt)
      reg_field <= reg_field+1;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      reg_field <= RST_VALUE;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                code/7.2/src/dut/single_cycle.v                                                                     0000600 0000765 0000765 00000002442 14350064325 014066  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module single_cycle(A, B, clk, op, rst_n, start, busy_aax, done_aax, result_aax);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input [2:0]      op;
   input            rst_n;
   input            start;
   output reg       busy_aax;
   output reg       done_aax;
   output reg[15:0] result_aax;

   //single_cycle_ops
   always @(posedge clk) begin
       if(!rst_n)
           result_aax <= 16'd0;
       else begin
           if (start == 1'b1)begin
               case (op)
                  3'b001 :
                     result_aax <= ({8'b00000000, A}) + ({8'b00000000, B});
                  3'b010 :
                     result_aax <= (({8'b00000000, A}) & ({8'b00000000, B}));
                  3'b011 :
                     result_aax <= (({8'b00000000, A}) ^ ({8'b00000000, B}));
                  default :
                    ;
               endcase
            end
            else ;
        end
   end
   
   //set_done
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n)
         done_aax   <= 1'b0;
      else begin
         if ((start == 1'b1) && (op != 3'b000) && (done_aax == 1'b0))
            done_aax <= 1'b1;
         else
            done_aax <= 1'b0;
      end
   end

   assign busy_aax = (start == 1'b1) && (done_aax == 1'b0);
   
endmodule


                                                                                                                                                                                                                              code/7.2/src/dut/ip_reg_cfw.v                                                                       0000664 0000765 0000765 00000002244 14350067523 013547  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_cfw(clk,rst_n,vld,op,addr,wdata,rdata,reg_field,rhit,trigger);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  output reg [DATA_SIZE-1:0] rdata;
  output reg                 rhit;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 trigger;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)begin
      reg_field <= RST_VALUE;
      trigger   <= 0;
    end
    else if(vld && op && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      reg_field <= wdata;
      trigger   <= 1;
    end
    else
      trigger   <= 0;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                            code/7.2/src/dut/three_cycle_div.v                                                                  0000664 0000765 0000765 00000002365 14350217010 014563  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module three_cycle_div(A, B, clk, rst_n, start, busy_div, done_div, result_div);
   input [7:0]      A;
   input [7:0]      B;
   input            clk;
   input            rst_n;
   input            start;
   output reg       busy_div;
   output reg       done_div;
   output reg[15:0] result_div;
   
   reg [7:0]        a_int;
   reg [7:0]        b_int;
   reg [15:0]       div1;
   reg              done2;
   reg              done1;
   reg              done_div_int;
   
   //divider
   always @(posedge clk or negedge rst_n) begin
      if (!rst_n) begin
         done_div_int <= 1'b0;
         done2        <= 1'b0;
         done1        <= 1'b0;
         
         a_int        <= 8'd0;
         b_int        <= 8'd0;
         div1         <= 16'd0;
         result_div   <= 16'd0;
      end
      else begin
         a_int <= A;
         b_int <= B;
         if(b_int == 0)
           div1 <= 'h0;
         else
           div1 <= a_int / b_int;
         result_div   <= div1;
         done2        <= start & ((~done_div_int));
         done1        <= done2 & ((~done_div_int));
         done_div_int <= done1 & ((~done_div_int));
      end
   end

   assign done_div = done_div_int;
   assign busy_div = (start == 1'b1) && (done_div == 1'b0);
   
endmodule

                                                                                                                                                                                                                                                                           code/7.2/src/dut/demo_reg_slave.vh                                                                  0000664 0000765 0000765 00000001476 14350067744 014601  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`define ADDR_SIZE 'd16
`define DATA_SIZE 'd16
`define BASE_ADDR 'd8

`define CFG_OPERANDS_REG_SIZE 'd16
`define CFG_OPERANDS_REG_OFFSET 'h0
`define CFG_OPERANDS_REG_RST_VALUE 16'h0

`define CFW_OPCODE_REG_SIZE 'd3
`define CFW_OPCODE_REG_OFFSET 'h1
`define CFW_OPCODE_REG_RST_VALUE 16'h0

`define CFG_CTRL_REG_SIZE 'd1
`define CFG_CTRL_REG_OFFSET 'h2
`define CFG_CTRL_REG_RST_VALUE 1'h0

`define STA_STATUS_REG_SIZE 'd8
`define STA_STATUS_REG_OFFSET 'h3
`define STA_STATUS_REG_RST_VALUE 8'h0

`define STA_RESULT_REG_SIZE 'd16
`define STA_RESULT_REG_OFFSET 'h4
`define STA_RESULT_REG_RST_VALUE 16'h0

`define CNT_OPERATION_REG_SIZE 'd16
`define CNT_OPERATION_REG_OFFSET 'h5
`define CNT_OPERATION_REG_RST_VALUE 16'h0

`define INT_INTERRUPT_REG_SIZE 'd7
`define INT_INTERRUPT_REG_OFFSET 'h6
`define INT_INTERRUPT_REG_RST_VALUE 7'h0

                                                                                                                                                                                                  code/7.2/src/dut/ip_reg_int.v                                                                       0000664 0000765 0000765 00000002213 14350066217 013555  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_int(clk,rst_n,vld,op,addr,wdata,int_data,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  input [REG_SIZE-1:0]       int_data;
  output reg [DATA_SIZE-1:0] rdata;
  output reg [REG_SIZE-1:0]  reg_field;
  output reg                 rhit;
  
  //write 1 clear
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld && op && (addr == (BASE_ADDR + OFFSET_ADDR)))
      reg_field <= (~wdata) & reg_field ;
    else
      reg_field <= int_data | reg_field;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                     code/7.2/src/dut/alu.v                                                                              0000600 0000765 0000765 00000013226 14351430547 012215  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module alu(
  clk, 
  rst_n, 
  bus_vld, 
  bus_op, 
  bus_addr, 
  bus_wr_data, 
  bus_rd_data);

  input         clk;
  input         rst_n;

  input            bus_vld;
  input            bus_op;
  input [15:0]     bus_addr;
  input [15:0]     bus_wr_data;
  output [15:0]    bus_rd_data;

  wire [7:0]     A;//cfg_operands
  wire [7:0]     B;//cfg_operands
  wire [2:0]     op;//cfw_opcode
  reg            start;// trigger by write cfw_opcode
  reg            busy_internal;//sta_status[4]
  reg            done_internal;//sta_status[5]
  reg [15:0]     result_internal;//sta_result
  
  wire             busy_aax;
  wire             busy_mult;
  wire             busy_div;
  wire             done_aax;
  wire             done_mult;
  wire             done_div;
  wire [15:0]      result_aax;
  wire [15:0]      result_mult;
  wire [15:0]      result_div;
  reg              start_single;
  reg              start_mult;
  reg              start_div;

  wire[`INT_INTERRUPT_REG_SIZE-1:0]    int_interrupt_wdata;
  wire[`STA_STATUS_REG_SIZE-1:0]       sta_status_wdata;
  wire[`STA_RESULT_REG_SIZE-1:0]       sta_result_wdata;

  wire[`CFG_CTRL_REG_SIZE-1:0]         cfg_ctrl;
  wire[`CFG_OPERANDS_REG_SIZE-1:0]     cfg_operands;
  wire[`CFW_OPCODE_REG_SIZE-1:0]       cfw_opcode;
  wire                                 trigger;
  wire[`STA_STATUS_REG_SIZE-1:0]       sta_status;
  wire[`STA_RESULT_REG_SIZE-1:0]       sta_result;
  wire[`CNT_OPERATION_REG_SIZE-1:0]    cnt_operation;
  wire[`INT_INTERRUPT_REG_SIZE-1:0]    int_interrupt;

  //detect op trigger signal
  reg q0,q1,detect_trigger_pluse;
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n)begin
      q0 <= 0;
      q1 <= 0;
    end
    else begin
      q0 <= trigger;
      q1 <= q0;
    end
  end

  assign detect_trigger_pluse = (~trigger) & q0 & (~q1);

  //gen op start signal
  reg[2:0] op_i, op_duration; 
  reg in_duration;

  assign op_duration = op[2]? 'd3 : 'd1;

  always @(posedge clk or negedge rst_n) begin
    if (!rst_n)begin
      start        <= 0;
      op_i         <= 0;
      in_duration  <= 0;
    end
    else if(op_i > op_duration) begin
      start       <= 0;
      in_duration <= 0;
      op_i        <= 0;
    end
    else if((detect_trigger_pluse == 1) || (in_duration == 1))begin
      start       <= 1;
      in_duration <= 1;
      op_i        <= op_i + 1;
    end
    else begin
      start       <= 0;
      in_duration <= 0;
      op_i        <= 0;
    end
  end
  
  //start_demux
  always @(*) begin
     case (op[2])
        1'b0 :
           begin
              start_single = start;
              start_mult   = 1'b0;
              start_div    = 1'b0;
           end
        1'b1 :
           if(op[0]) begin
                start_single = 1'b0;
                start_mult   = 1'b0;
                start_div    = start;
             end
           else begin
                start_single = 1'b0;
                start_mult   = start;
                start_div    = 1'b0;
           end
        default :
           ;
     endcase
  end
  
  //result_mux
  always @(*) begin
     case (op[2])
        1'b0 :
           result_internal = result_aax;
        1'b1 :
           if(op[0])
             result_internal = result_div;
           else
             result_internal = result_mult;
        default :
           result_internal = {16{1'bx}};
     endcase
  end
  
  //done_mux
  always @(*) begin
     case (op[2])
       1'b0 : begin
           busy_internal = busy_aax;
           done_internal = done_aax;
       end
       1'b1 :
          if(op[0]) begin
            busy_internal = busy_div;
            done_internal = done_div;
          end
          else begin
            busy_internal = busy_mult;
            done_internal = done_mult;
          end
       default :begin
          busy_internal = 1'bx;
          done_internal = 1'bx;
       end
     endcase
  end

  single_cycle add_and_xor(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .op(op), 
    .rst_n(rst_n), 
    .start(start_single), 
    .busy_aax(busy_aax), 
    .done_aax(done_aax), 
    .result_aax(result_aax));
  
  three_cycle_mult mult(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .rst_n(rst_n), 
    .start(start_mult), 
    .busy_mult(busy_mult), 
    .done_mult(done_mult), 
    .result_mult(result_mult));

  three_cycle_div div(
    .A(A), 
    .B(B), 
    .clk(clk), 
    .rst_n(rst_n), 
    .start(start_div), 
    .busy_div(busy_div), 
    .done_div(done_div), 
    .result_div(result_div));

  demo_reg_slave#(`ADDR_SIZE,`DATA_SIZE,`BASE_ADDR) i_demo_reg_slave(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(bus_vld), 
    .op(bus_op), 
    .addr(bus_addr), 
    .wdata(bus_wr_data), 
    .rdata(bus_rd_data), 
    .cfg_ctrl(cfg_ctrl), 
    .cfg_operands(cfg_operands), 
    .cfw_opcode(cfw_opcode), 
    .trigger(trigger), 
    .sta_result(sta_result), 
    .sta_status(sta_status), 
    .cnt_operation(cnt_operation), 
    .int_interrupt(int_interrupt), 
    .sta_status_wdata(sta_status_wdata),
    .sta_result_wdata(sta_result_wdata),
    .vld_cnt_operation(done_internal),
    .int_interrupt_wdata(int_interrupt_wdata));

  assign A  = cfg_operands[15:8];
  assign B  = cfg_operands[7:0];
  assign op = cfw_opcode[2:0];
  
  assign sta_result_wdata = (cfg_ctrl[0])? ~result_internal : result_internal;

  assign int_interrupt_wdata[`INT_INTERRUPT_REG_SIZE-1:1] = 'h0;
  assign int_interrupt_wdata[0] = ((B=='h0) && (op==3'b101));

  assign sta_status_wdata[`STA_STATUS_REG_SIZE-1:6] = 'h0;
  assign sta_status_wdata[0] = (A=='hff);
  assign sta_status_wdata[1] = (B=='hff);
  assign sta_status_wdata[2] = (A=='h0);
  assign sta_status_wdata[3] = (B=='h0);
  assign sta_status_wdata[4] = busy_internal;
  assign sta_status_wdata[5] = done_internal;
endmodule

                                                                                                                                                                                                                                                                                                                                                                          code/7.2/src/dut/ip_reg_cfg.v                                                                       0000664 0000765 0000765 00000002021 14350066243 013516  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module ip_reg_cfg(clk,rst_n,vld,op,addr,wdata,rdata,reg_field,rhit);

  parameter ADDR_SIZE   = 32;
  parameter DATA_SIZE   = 32;
  parameter REG_SIZE    = 32;
  parameter BASE_ADDR   = 0;
  parameter OFFSET_ADDR = 0;
  parameter RST_VALUE   = 0;
  
  input                      clk;
  input                      rst_n;
  input                      vld;
  input                      op;
  input [ADDR_SIZE-1:0]      addr;
  input [REG_SIZE-1:0]       wdata;
  output reg [DATA_SIZE-1:0] rdata;
  output reg                 rhit;
  output reg [REG_SIZE-1:0]  reg_field;
  
  //write
  always @(posedge clk)begin
    if(!rst_n)
      reg_field <= RST_VALUE;
    else if(vld && op && (addr == (BASE_ADDR + OFFSET_ADDR)))
      reg_field <= wdata;
  end

  //read
  always @(posedge clk)begin
    if(!rst_n)begin
      rdata <= 'h0;
      rhit  <= 'h0;
    end
    else if(vld && (!op) && (addr == (BASE_ADDR + OFFSET_ADDR)))begin
      rdata[REG_SIZE-1:0] <= reg_field;
      rhit <= 'h1;
    end
    else 
      rhit <= 'h0;
  end

endmodule
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               code/7.2/src/dut/demo_reg_slave.v                                                                   0000664 0000765 0000765 00000011014 14350074441 014406  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module demo_reg_slave(
  cfg_ctrl,
  cfg_operands,
  cfw_opcode,
  trigger,
  sta_result,
  sta_status,
  sta_status_wdata,
  sta_result_wdata,
  cnt_operation,
  vld_cnt_operation,
  int_interrupt,
  int_interrupt_wdata,
  clk,
  rst_n,
  vld,
  op,
  addr,
  wdata,
  rdata);

  parameter ADDR_SIZE = 32;
  parameter DATA_SIZE = 32;
  parameter BASE_ADDR = 0;

  input                       clk;
  input                       rst_n;
  input                       vld;
  input                       op;
  input [ADDR_SIZE-1:0]       addr;
  input [DATA_SIZE-1:0]       wdata;
  output reg[DATA_SIZE-1:0]       rdata;

  output reg[`CFG_CTRL_REG_SIZE-1:0]         cfg_ctrl;
  output reg[`CFG_OPERANDS_REG_SIZE-1:0]     cfg_operands;
  output reg[`CFG_OPERANDS_REG_SIZE-1:0]     cfw_opcode;
  output reg                                 trigger;
  output reg[`STA_STATUS_REG_SIZE-1:0]       sta_status;
  input  [`STA_STATUS_REG_SIZE-1:0]          sta_status_wdata;
  output reg[`STA_RESULT_REG_SIZE-1:0]       sta_result;
  input  [`STA_RESULT_REG_SIZE-1:0]          sta_result_wdata;
  output reg[`CNT_OPERATION_REG_SIZE-1:0]    cnt_operation;
  input vld_cnt_operation;
  output reg[`INT_INTERRUPT_REG_SIZE-1:0]    int_interrupt;
  input  [`INT_INTERRUPT_REG_SIZE-1:0]       int_interrupt_wdata;

  wire[DATA_SIZE*7-1:0]   rdata_bus;
  wire[6:0] rhit_bus;

  always @(rhit_bus or rdata_bus)begin
    case(rhit_bus)
      'b000_0001: rdata = rdata_bus[DATA_SIZE*1-1:DATA_SIZE*0];
      'b000_0010: rdata = rdata_bus[DATA_SIZE*2-1:DATA_SIZE*1];
      'b000_0100: rdata = rdata_bus[DATA_SIZE*3-1:DATA_SIZE*2];
      'b000_1000: rdata = rdata_bus[DATA_SIZE*4-1:DATA_SIZE*3];
      'b001_0000: rdata = rdata_bus[DATA_SIZE*5-1:DATA_SIZE*4];
      'b010_0000: rdata = rdata_bus[DATA_SIZE*6-1:DATA_SIZE*5];
      'b100_0000: rdata = rdata_bus[DATA_SIZE*7-1:DATA_SIZE*6];
      default: rdata = 'h0;
    endcase
  end

  ip_reg_cfg #(ADDR_SIZE, DATA_SIZE, `CFG_OPERANDS_REG_SIZE, BASE_ADDR, `CFG_OPERANDS_REG_OFFSET, `CFG_OPERANDS_REG_RST_VALUE) cfg_cfg_operands(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`CFG_OPERANDS_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*1-1:DATA_SIZE*0]),
    .rhit(rhit_bus[0]),
    .reg_field(cfg_operands)
  );

  ip_reg_cfw #(ADDR_SIZE, DATA_SIZE, `CFW_OPCODE_REG_SIZE, BASE_ADDR, `CFW_OPCODE_REG_OFFSET, `CFW_OPCODE_REG_RST_VALUE) cfw_cfw_opcode(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`CFW_OPCODE_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*2-1:DATA_SIZE*1]),
    .rhit(rhit_bus[1]),
    .reg_field(cfw_opcode),
    .trigger(trigger)
  );

  ip_reg_cfg #(ADDR_SIZE, DATA_SIZE, `CFG_CTRL_REG_SIZE, BASE_ADDR, `CFG_CTRL_REG_OFFSET, `CFG_CTRL_REG_RST_VALUE) cfg_cfg_ctrl(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`CFG_CTRL_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*3-1:DATA_SIZE*2]),
    .rhit(rhit_bus[2]),
    .reg_field(cfg_ctrl)
  );

  ip_reg_sta #(ADDR_SIZE, DATA_SIZE, `STA_STATUS_REG_SIZE, BASE_ADDR, `STA_STATUS_REG_OFFSET, `STA_STATUS_REG_RST_VALUE) sta_sta_status(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(sta_status_wdata), 
    .rdata(rdata_bus[DATA_SIZE*4-1:DATA_SIZE*3]),
    .rhit(rhit_bus[3]),
    .reg_field(sta_status)
  );

  ip_reg_sta #(ADDR_SIZE, DATA_SIZE, `STA_RESULT_REG_SIZE, BASE_ADDR, `STA_RESULT_REG_OFFSET, `STA_RESULT_REG_RST_VALUE) sta_sta_result(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(sta_result_wdata), 
    .rdata(rdata_bus[DATA_SIZE*5-1:DATA_SIZE*4]),
    .rhit(rhit_bus[4]),
    .reg_field(sta_result)
  );

  ip_reg_cnt #(ADDR_SIZE, DATA_SIZE, `CNT_OPERATION_REG_SIZE, BASE_ADDR, `CNT_OPERATION_REG_OFFSET, `CNT_OPERATION_REG_RST_VALUE) cnt_cnt_operation(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .vld_cnt(vld_cnt_operation), 
    .rdata(rdata_bus[DATA_SIZE*6-1:DATA_SIZE*5]),
    .rhit(rhit_bus[5]),
    .reg_field(cnt_operation)
  );

  ip_reg_int #(ADDR_SIZE, DATA_SIZE, `INT_INTERRUPT_REG_SIZE, BASE_ADDR, `INT_INTERRUPT_REG_OFFSET, `INT_INTERRUPT_REG_RST_VALUE) int_int_interrupt(
    .clk(clk), 
    .rst_n(rst_n), 
    .vld(vld), 
    .op(op), 
    .addr(addr), 
    .wdata(wdata[`INT_INTERRUPT_REG_SIZE-1:0]), 
    .int_data(int_interrupt_wdata[`INT_INTERRUPT_REG_SIZE-1:0]), 
    .rdata(rdata_bus[DATA_SIZE*7-1:DATA_SIZE*6]),
    .rhit(rhit_bus[6]),
    .reg_field(int_interrupt)
  );

endmodule
code/6.14.10/sim/filelist/dut.f                                                                     0000775 0000765 0000765 00000000064 14322666330 013541  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/A.v
$PWD/../src/B.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            code/6.14.10/sim/filelist/tb.f                                                                      0000775 0000765 0000765 00000000014 14346771602 013352  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     demo_tb.sv

code/6.10.3/sim/testbench/counter_intf.sv                                                           0000664 0000765 0000765 00000000551 14316715770 015735  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
interface counter_intf(input wire clk,input wire rst_n);
  logic load_enable;
  logic[7:0] load_counter;
  logic[7:0] dout;

  clocking cb @(posedge clk);
    default input #1step output #0;
    input dout;
    output load_enable,load_counter;
  endclocking

  modport dut(input load_enable,load_counter, output dout);
  modport tb(clocking cb);
endinterface

                                                                                                                                                       code/6.10.3/sim/testbench/testbench.sv                                                              0000664 0000765 0000765 00000000761 14316715770 015220  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module testbench(counter_intf intf);

  initial begin
    $display("%0t -> Start!!!",$time);
    @intf.cb;
    intf.cb.load_enable  <= 0;
    intf.cb.load_counter <= 0;
    #100;

    @intf.cb;
    intf.cb.load_enable  <= 1;
    intf.cb.load_counter <= $urandom_range(100,50);
    @intf.cb;
    $display("%0t -> load_counter is %0d",$time,intf.load_counter);
    #100;

    @intf.cb;
    intf.cb.load_enable <= 0;

    #300;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule
               code/6.10.3/sim/testbench/demo_tb.sv                                                                0000775 0000765 0000765 00000000447 14316715770 014656  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic clk;
  logic rst_n;

  counter_intf intf(clk,rst_n);
  counter DUT(intf.dut);
  testbench TB(intf.tb);

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #50;
    rst_n = 1;
  end
endmodule : top


                                                                                                                                                                                                                         code/6.10.3/sim/filelist/tb.f                                                                       0000775 0000765 0000765 00000000131 14316715770 013271  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/counter_intf.sv
testbench/testbench.sv
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                       code/6.10.3/sim/filelist/dut.f                                                                      0000775 0000765 0000765 00000000052 14316715770 013462  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/counter.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/6.10.1/sim/testbench/demo_tb.sv                                                                0000775 0000765 0000765 00000001327 14316555474 014655  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic clk;
  logic rst_n;
  counter_intf intf(clk,rst_n);
  counter DUT(.clk(clk),.rst_n(rst_n),.load_enable(intf.load_enable),.load_counter(intf.load_counter),.dout(intf.dout));

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #50;
    rst_n = 1;
  end

  initial begin
    $display("%0t -> Start!!!",$time);
    intf.load_enable = 0;
    intf.load_counter = 0;
    #100;

    intf.load_enable = 1;
    std::randomize(intf.load_counter);
    $display("%0t -> load_counter is %0d",$time,intf.load_counter);
    #100;

    intf.load_enable = 0;

    #300;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                                                                                                                                                                                                                                                                                         code/6.10.1/sim/testbench/counter_intf.sv                                                           0000664 0000765 0000765 00000000213 14316555474 015731  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
interface counter_intf(input wire clk,input wire rst_n);
  logic load_enable;
  logic[7:0] load_counter;
  logic[7:0] dout;
endinterface

                                                                                                                                                                                                                                                                                                                                                                                     code/6.10.1/sim/filelist/tb.f                                                                       0000775 0000765 0000765 00000000102 14316555356 013267  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/counter_intf.sv
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                              code/6.10.1/sim/filelist/dut.f                                                                      0000775 0000765 0000765 00000000052 14316450100 013437  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/counter.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/6.10.4/sim/testbench/testbench.sv                                                              0000664 0000765 0000765 00000001212 14316721305 015200  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module testbench(counter_intf intf);

  virtual counter_intf vif;
  initial begin
    vif = intf;
    fork
      begin
        $display("%0t -> Start!!!",$time);
        vif.drv_api(0,0);
        #100;

        vif.drv_api(1,$urandom_range(100,50));
        #100;

        vif.drv_api(0,0);
        #300;
        $display("%0t -> Finish!!!",$time);
      end
      begin
        logic load_enable_value;
        logic[7:0] load_counter_value;
        logic[7:0] dout_value;
        forever begin
          #30;
          vif.mon_api(load_enable_value,load_counter_value,dout_value);
        end
      end
    join_any
    $finish;
  end 

endmodule
                                                                                                                                                                                                                                                                                                                                                                                      code/6.10.4/sim/testbench/demo_tb.sv                                                                0000775 0000765 0000765 00000000447 14316706146 014654  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic clk;
  logic rst_n;

  counter_intf intf(clk,rst_n);
  counter DUT(intf.dut);
  testbench TB(intf.tb);

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #50;
    rst_n = 1;
  end
endmodule : top


                                                                                                                                                                                                                         code/6.10.4/sim/testbench/counter_intf.sv                                                           0000664 0000765 0000765 00000002422 14316721132 015722  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
interface counter_intf(input wire clk,input wire rst_n);
  logic load_enable;
  logic[7:0] load_counter;
  logic[7:0] dout;

  clocking cb @(posedge clk);
    default input #1step output #0;
    input dout;
    output load_enable,load_counter;
  endclocking

  clocking drv @(posedge clk);
    default input #1step output #0;
    output load_enable,load_counter,dout;
  endclocking

  clocking mon @(posedge clk);
    default input #1step output #0;
    input load_enable,load_counter,dout;
  endclocking

  modport dut(input load_enable,load_counter, output dout);
  modport tb(clocking cb);

  task drv_api(input logic load_enable_value,input logic[7:0] load_counter_value);
    @drv;
    drv.load_enable  <= load_enable_value;
    drv.load_counter <= load_counter_value;
    $display("%0t -> drv_api -> load_enable:%0b, load_counter:%0d",$time,load_enable_value,load_counter_value);
  endtask

  task mon_api(output logic load_enable_value,output logic[7:0] load_counter_value,output logic[7:0] dout_value);
    @mon;
    load_enable_value  = mon.load_enable;
    load_counter_value = mon.load_counter;
    dout_value = mon.dout;
    $display("%0t -> mon_api -> load_enable:%0b, load_counter:%0d, dout_value:%0b",$time,load_enable_value,load_counter_value,dout_value);
  endtask

endinterface

                                                                                                                                                                                                                                              code/6.10.4/sim/filelist/tb.f                                                                       0000775 0000765 0000765 00000000131 14316706146 013267  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/counter_intf.sv
testbench/testbench.sv
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                       code/6.10.4/sim/filelist/dut.f                                                                      0000775 0000765 0000765 00000000052 14316706146 013460  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/counter.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/6.10.2/sim/testbench/demo_tb.sv                                                                0000775 0000765 0000765 00000000447 14316557065 014656  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic clk;
  logic rst_n;

  counter_intf intf(clk,rst_n);
  counter DUT(intf.dut);
  testbench TB(intf.tb);

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #50;
    rst_n = 1;
  end
endmodule : top


                                                                                                                                                                                                                         code/6.10.2/sim/testbench/testbench.sv                                                              0000664 0000765 0000765 00000000643 14316557372 015220  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module testbench(counter_intf intf);

  initial begin
    $display("%0t -> Start!!!",$time);
    intf.load_enable = 0;
    intf.load_counter = 0;
    #100;

    intf.load_enable = 1;
    intf.load_counter = $urandom_range(100,50);
    $display("%0t -> load_counter is %0d",$time,intf.load_counter);
    #100;

    intf.load_enable = 0;

    #300;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule
                                                                                             code/6.10.2/sim/testbench/counter_intf.sv                                                           0000664 0000765 0000765 00000000403 14316560575 015731  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
interface counter_intf(input wire clk,input wire rst_n);
  logic load_enable;
  logic[7:0] load_counter;
  logic[7:0] dout;

  modport dut(input load_enable,load_counter, output dout);
  modport tb(output load_enable,load_counter, input dout);
endinterface

                                                                                                                                                                                                                                                             code/6.10.2/sim/filelist/tb.f                                                                       0000775 0000765 0000765 00000000131 14316557214 013265  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/counter_intf.sv
testbench/testbench.sv
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                       code/6.10.2/sim/filelist/dut.f                                                                      0000775 0000765 0000765 00000000052 14316556114 013454  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/counter.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/5.3/sim/testbench/demo_tb.sv                                                                   0000775 0000765 0000765 00000001320 14300153177 014413  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic clk;
  logic rst_n;
  logic load_enable;
  logic[7:0] load_counter;
  logic[7:0] dout;
  
  counter DUT(.clk(clk),.rst_n(rst_n),.load_enable(load_enable),.load_counter(load_counter),.dout(dout));

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #50;
    rst_n = 1;
  end

  initial begin
    $display("%0t -> Start!!!",$time);
    load_enable = 0;
    load_counter = 0;
    #100;

    load_enable = 1;
    std::randomize(load_counter);
    $display("%0t -> load_counter is %0d",$time,load_counter);
    #100;

    load_enable = 0;

    #300;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                                                                                                                                                                                                                                                                                                code/5.3/sim/filelist/dut.f                                                                         0000775 0000765 0000765 00000000052 14243117714 013233  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/counter.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/5.3/sim/filelist/tb.f                                                                          0000775 0000765 0000765 00000000050 14243117370 013040  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        code/5.4/sim/testbench/demo_tb.sv                                                                   0000775 0000765 0000765 00000002726 14302047610 014423  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic clk;
  logic rst_n;
  logic a,b;
  logic y1,z1;
  logic y2,z2;
  logic y3,z3;
  logic y4,z4;
  
  sell1 DUT1(.clk(clk),.rst_n(rst_n),.a(a),.b(b),.y(y1),.z(z1));
  sell2 DUT2(.clk(clk),.rst_n(rst_n),.a(a),.b(b),.y(y2),.z(z2));
  sell3 DUT3(.clk(clk),.rst_n(rst_n),.a(a),.b(b),.y(y3),.z(z3));
  sell_enum DUT4(.clk(clk),.rst_n(rst_n),.a(a),.b(b),.y(y4),.z(z4));

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #50;
    rst_n = 1;
  end

  initial begin
    $display("%10t -> Start!!!",$time);
    a = 0;
    b = 0;
    #80;
    $display("------------------------------------------");
    $display("%10t -> Scenario 1",$time);
    $display("%10t -> insert 5 cents",$time);
    a = 1;
    b = 0;
    #20;
    $display("%10t -> insert 5 cents",$time);
    a = 1;
    b = 0;
    #20;
    a = 0;
    b = 0;

    #100;
    $display("------------------------------------------");
    $display("%10t -> Scenario 2",$time);
    $display("%10t -> insert 5 cents",$time);
    a = 1;
    b = 0;
    #20;
    $display("%10t -> insert 10 cents",$time);
    a = 0;
    b = 1;
    #20;
    a = 0;
    b = 0;

    #100;
    $display("------------------------------------------");
    $display("%10t -> Scenario 3",$time);
    $display("%10t -> insert 10 cents",$time);
    a = 0;
    b = 1;
    #20;
    a = 0;
    b = 0;

    #100;
    $display("%10t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                          code/5.4/sim/filelist/dut.f                                                                         0000775 0000765 0000765 00000000100 14302047646 013230  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/sell.v
$PWD/../src/sell_enum.sv
                                                                                                                                                                                                                                                                                                                                                                                                                                                                code/5.4/sim/filelist/tb.f                                                                          0000775 0000765 0000765 00000000050 14243160736 013045  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        code/5.2/sim/testbench/demo_tb.sv                                                                   0000775 0000765 0000765 00000001272 14277646645 014444  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic clk;
  logic rst_n;
  logic load_enable;
  logic[7:0] load_data;
  logic[7:0] dout;
  
  shifter DUT(.clk(clk),.rst_n(rst_n),.load_enable(load_enable),.load_data(load_data),.dout(dout));

  initial begin
    clk = 0;
    forever begin
      #10;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #50;
    rst_n = 1;
  end

  initial begin
    $display("%0t -> Start!!!",$time);
    load_enable = 0;
    load_data = 0;
    #100;

    load_enable = 1;
    std::randomize(load_data);
    $display("%0t -> load_data is %b",$time,load_data);
    #100;

    load_enable = 0;

    #300;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                                                                                                                                                                                                                                                                                                                      code/5.2/sim/filelist/tb.f                                                                          0000775 0000765 0000765 00000000050 14243111023 013024  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        code/5.2/sim/filelist/dut.f                                                                         0000775 0000765 0000765 00000000052 14243117165 013232  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/shifter.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/5.1/sim/testbench/demo_tb.sv                                                                   0000775 0000765 0000765 00000001450 14277627324 014432  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic clk;
  logic rst_n;
  logic dff_din;
  logic dff_dout;
  logic dff_rst_dout;
  
  dff DUT_dff(.clk(clk),.din(dff_din),.dout(dff_dout));
  dff_rst DUT_dff_rst(.clk(clk),.rst_n(rst_n),.din(dff_din),.dout(dff_rst_dout));

  initial begin
    clk = 0;
    forever begin
      #10ns;
      clk = ~clk;
    end
  end

  initial begin
    rst_n = 0;
    #5ns;
    rst_n = 1;
    #120ns;
    rst_n = 0;
  end
  
  initial begin
    int random_delay;
    $display("%0t -> Start!!!",$time);
    repeat(10)begin
      dff_din = $urandom_range(1,0);
      random_delay = $urandom_range(17,0);
      $display("%0t -> dff_din is %0b,random delay is %0d",$time,dff_din,random_delay);
      #random_delay;
    end
    #100;
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top


                                                                                                                                                                                                                        code/5.1/sim/filelist/dut.f                                                                         0000775 0000765 0000765 00000000074 14243106222 013225  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/dff.v
$PWD/../src/dff_rst.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    code/5.1/sim/filelist/tb.f                                                                          0000775 0000765 0000765 00000000050 14243105317 013034  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        code/4.3/sim/testbench/demo_tb.sv                                                                   0000775 0000765 0000765 00000001530 14277612105 014421  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  localparam ADDR_WIDTH = 8;
  localparam DATA_WIDTH = 16;
  localparam MEM_DEPTH = 256;

  logic enable;
  logic rw;
  logic[ADDR_WIDTH-1:0] addr;
  wire[DATA_WIDTH-1:0] data;
  
  memory #(ADDR_WIDTH,DATA_WIDTH,MEM_DEPTH) DUT(.enable(enable),.rw(rw),.addr(addr),.data(data));
  
  initial begin
    int i=0;
    $display("%0t -> Start!!!",$time);
    enable = 0;
    #10ns;

    enable = 1;
    //write
    rw = 0;
    addr = 0;
    repeat(10)begin
      force data = i;
      #10ns;
      addr++;
      $display("%0t -> write addr: %h data: %h",$time,addr,data);
      release data;
      i++;
    end
    //read
    rw = 1;
    addr = 0;
    repeat(10)begin
      #10ns;
      addr++;
      $display("%0t -> read addr: %h data: %h",$time,addr,data);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                        code/4.3/sim/filelist/dut.f                                                                         0000775 0000765 0000765 00000000051 14243100560 013220  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/memory.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       code/4.3/sim/filelist/tb.f                                                                          0000775 0000765 0000765 00000000050 14243076771 013050  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        code/4.2/sim/testbench/demo_tb.sv                                                                   0000775 0000765 0000765 00000000755 14277574661 014446  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic a,b,carry_in;
  logic sum,carry_out;
  logic[2:0] tmp;
  
  full_adder DUT(.a(a),.b(b),.carry_in(carry_in),.sum(sum),.carry_out(carry_out));
  
  initial begin
    $display("%0t -> Start!!!",$time);
    tmp = 0;
    repeat(10)begin
      {a,b,carry_in} = tmp;
      #10ns;
      $display("%0t -> {a,b,carry_in}: %b {carry_out,sum}: %b",$time,{a,b,carry_in},{carry_out,sum});
      tmp++;
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule 




                   code/4.2/sim/filelist/tb.f                                                                          0000775 0000765 0000765 00000000050 14242664571 013047  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        code/4.2/sim/filelist/dut.f                                                                         0000775 0000765 0000765 00000000106 14242672031 013226  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/half_adder.v
$PWD/../src/full_adder.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                          code/4.1/sim/testbench/demo_tb.sv                                                                   0000775 0000765 0000765 00000001173 14277173540 014427  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  localparam SELECT_WIDTH = 2;
  localparam Z_WIDTH = (1 << SELECT_WIDTH);
  
  logic enable;
  logic[SELECT_WIDTH-1:0] select;
  logic[Z_WIDTH-1:0] z;
  
  decoder #(.SELECT_WIDTH(SELECT_WIDTH)) DUT(.enable(enable),.select(select),.z(z));
  
  initial begin
    $display("%0t -> Start!!!",$time);
    enable = 0;
    select = 0;

    #10ns;
    enable = 1;
    #10ns;
    $display("%0t -> select: %b z: %b",$time,select,z);
    repeat(10)begin
      select++; 
      #10ns;
      $display("%0t -> select: %b z: %b",$time,select,z);
    end
    $display("%0t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                                                                                                                                                                                                                                                                                                                                                                                     code/4.1/sim/filelist/tb.f                                                                          0000775 0000765 0000765 00000000050 14242633754 013045  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        code/4.1/sim/filelist/dut.f                                                                         0000775 0000765 0000765 00000000052 14242633644 013234  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/decoder.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      code/3.2.3/sim/testbench/demo_tb.sv                                                                 0000775 0000765 0000765 00000000740 14276062313 014561  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
module top;
  logic[2:0] a; 
  logic[3:0] b; 
  logic[15:0] z1,z2; 
  top_module DUT(.a(a),.b(b),.z1(z1),.z2(z2));
  defparam DUT.S1.A_WIDTH = 3;
  defparam DUT.S1.B_WIDTH = 4;

  initial begin
    $display("%t -> Start!!!",$time);
    a = 0;
    b = 0;
    repeat(10)begin
      a++;
      b++;
      #10ns;
      $display("%t -> a: %0d b: %0d z1: %0d z2: %0d",$time,a,b,z1,z2);
    end
    #10ns;
    $display("%t -> Finish!!!",$time);
    $finish;
  end 

endmodule : top




                                code/3.2.3/sim/filelist/tb.f                                                                        0000775 0000765 0000765 00000000050 14275716522 013207  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+testbench
testbench/demo_tb.sv

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        code/3.2.3/sim/filelist/dut.f                                                                       0000775 0000765 0000765 00000000106 14275724355 013403  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     +incdir+$PWD/../src
$PWD/../src/sub_module.v
$PWD/../src/top_module.v
                                                                                                                                                                                                                                                                                                                                                                                                                                                          code/7.1/sim/testbench/component/scoreboard.svh                                                     0000664 0000765 0000765 00000004133 14353040644 017303  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef SCOREBOARD
`define SCOREBOARD

class scoreboard;

  virtual alu_reg_interface reg_intf;
  mailbox mon2scb;
  int pass_cnt,fail_cnt;
  
  function new (virtual alu_reg_interface reg_intf_new,
                mailbox mon2scb_new);
    this.reg_intf = reg_intf_new;
    if(mon2scb_new == null)begin
      $display("%0t -> scoreboard : ERROR -> mon2scb is null",$time);
      $finish;
    end
    else
      this.mon2scb = mon2scb_new;
  endfunction 

  task get_ctrl_reg_value(output bit value);
    bit[15:0] rd_data;
    rd_data = reg_intf.peek("cfg_cfg_ctrl");
    value = rd_data[0];
    $display("%0t -> scoreboard : read CFG_CTRL_REG value : %0h",$time,rd_data);
  endtask

  task run();
    transaction exp_tr;
    transaction act_tr;
    string data_str;
    bit ctrl_reg_value;

    forever begin
      mon2scb.get(act_tr);
      get_ctrl_reg_value(ctrl_reg_value);
      exp_tr = predict_result(act_tr, ctrl_reg_value);
      data_str = {"\n \t Actual    ",  act_tr.convert2string(), 
                  "\n \t Predicted ",  exp_tr.convert2string()};
      if(act_tr.compare(exp_tr)) begin
        pass_cnt++;
        $display("%0t -> scoreboard : PASS => %s",$time,data_str);
      end
      else begin
        fail_cnt++;
        $display("%0t -> scoreboard : FAIL => %s",$time,data_str);
      end
    end
  endtask

  function transaction predict_result(transaction cmd, bit is_invert);
    transaction exp_tr;
    bit[15:0] result;
    exp_tr = new();
    exp_tr.A  = cmd.A;
    exp_tr.B  = cmd.B;
    exp_tr.op = cmd.op;
       
    case (cmd.op)
      add_op: result = cmd.A + cmd.B;
      and_op: result = cmd.A & cmd.B;
      xor_op: result = cmd.A ^ cmd.B;
      mul_op: result = cmd.A * cmd.B;
      div_op: if(cmd.B == 0)
                result = 'h0;
              else
                result = cmd.A / cmd.B;
    endcase 

    if(is_invert) 
      exp_tr.result = ~result;
    else
      exp_tr.result = result;
    $display("%0t -> scoreboard : op is %s, A is %h, B is %h, exp_result is %h",$time,cmd.op.name(),cmd.A,cmd.B,exp_tr.result);
    return exp_tr;
  endfunction : predict_result

endclass  

`endif
                                                                                                                                                                                                                                                                                                                                                                                                                                     code/7.1/sim/testbench/component/generator.svh                                                      0000664 0000765 0000765 00000001521 14353040754 017146  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef GENERATOR
`define GENERATOR

class generator;

  mailbox gen2drv;
  
  function new (mailbox gen2drv_new);
    if(gen2drv_new == null)begin
      $display("%0t -> generator : ERROR -> gen2drv is null",$time);
      $finish;
    end
    else
      this.gen2drv = gen2drv_new;
  endfunction 

  task run(int num_tr = 200);
    transaction tr;
    
    //random
    repeat(num_tr)begin
      tr = new();
      assert(tr.randomize());
      $display("%0t -> generator : tr is %s",$time,tr.convert2string_in());
      gen2drv.put(tr);
    end

    //constraint operand with 'h00 or 'hff
    repeat(num_tr)begin
      tr = new();
      assert(tr.randomize() with {A inside {'h0,'hff}; B inside {'h0,'hff};});
      $display("%0t -> generator : tr is %s",$time,tr.convert2string_in());
      gen2drv.put(tr);
    end

  endtask

endclass  

`endif
                                                                                                                                                                               code/7.1/sim/testbench/component/monitor.svh                                                        0000664 0000765 0000765 00000002610 14347266251 016654  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef MONITOR
`define MONITOR

class monitor;

  virtual alu_interface intf;
  mailbox mon2scb;
  mailbox mon2cov;

  int total_cnt = 0;
  
  function new (virtual alu_interface intf_new, 
                mailbox mon2cov_new,
                mailbox mon2scb_new);
    this.intf = intf_new;
    if(mon2cov_new == null)begin
      $display("%0t -> monitor : ERROR -> mon2cov is null",$time);
      $finish;
    end
    else if(mon2scb_new == null)begin
      $display("%0t -> monitor : ERROR -> mon2scb is null",$time);
      $finish;
    end
    else begin
      this.mon2cov = mon2cov_new;
      this.mon2scb = mon2scb_new;
    end
  endfunction 

  task run();
    transaction tr;

    forever begin
      @(intf.mon);
      if(intf.mon.done)begin
        tr = new();
        tr.A = intf.mon.A;
        tr.B = intf.mon.B;
        tr.op = intf.mon.op;
        tr.result = intf.mon.result;
        mon2scb.put(tr);
        mon2cov.put(tr);
        $display("%0t -> monitor : tr is %s",$time,tr.convert2string());
        total_cnt++;
      end
      if(intf.mon.start)begin
        if((intf.mon.op == no_op)|| (intf.mon.op == rst_op)) begin
          tr.A = intf.mon.A;
          tr.B = intf.mon.B;
          tr.op = intf.mon.op;
          mon2cov.put(tr);
          $display("%0t -> monitor : tr is %s",$time,tr.convert2string());
          total_cnt++;
        end
      end
    end
  endtask

endclass  

`endif
                                                                                                                        code/7.1/sim/testbench/component/coverage.svh                                                       0000664 0000765 0000765 00000006636 14347266251 016774  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef COVERAGE
`define COVERAGE

class coverage;

  mailbox mon2cov;
  bit[7:0]  A;
  bit[7:0]  B;
  operation_t  op_set;

  covergroup op_cov;
     coverpoint op_set {
        bins single_cycle[] = {[add_op : xor_op], rst_op,no_op};
        bins multi_cycle = {mul_op, div_op};

        bins opn_rst[] = ([add_op:div_op] => rst_op);
        bins rst_opn[] = (rst_op => [add_op:div_op]);

        bins sngl_mul[] = ([add_op:xor_op],no_op => mul_op);
        bins mul_sngl[] = (mul_op => [add_op:xor_op], no_op);

        bins sngl_div[] = ([add_op:xor_op],no_op => div_op);
        bins div_sngl[] = (div_op => [add_op:xor_op], no_op);

        bins mul_div[] = (mul_op => div_op);
        bins div_mul[] = (div_op => mul_op);

        bins twoops[] = ([add_op:div_op] [* 2]);

        bins manymul = (mul_op [* 3:5]);
        bins manydiv = (div_op [* 3:5]);
     }
  endgroup

  covergroup zeros_or_ones_on_ops;
    all_ops : coverpoint op_set {
      ignore_bins null_ops = {rst_op, no_op};}

    a_leg: coverpoint A {
      bins zeros = {'h00};
      bins others= {['h01:'hFE]};
      bins ones  = {'hFF};
    }

    b_leg: coverpoint B {
      bins zeros = {'h00};
      bins others= {['h01:'hFE]};
      bins ones  = {'hFF};
    }

    op_00_FF:  cross a_leg, b_leg, all_ops {
      bins add_00 = binsof (all_ops) intersect {add_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins add_FF = binsof (all_ops) intersect {add_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins and_00 = binsof (all_ops) intersect {and_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins and_FF = binsof (all_ops) intersect {and_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins xor_00 = binsof (all_ops) intersect {xor_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins xor_FF = binsof (all_ops) intersect {xor_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins mul_00 = binsof (all_ops) intersect {mul_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins mul_FF = binsof (all_ops) intersect {mul_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins mul_max = binsof (all_ops) intersect {mul_op} &&
                     (binsof (a_leg.ones) && binsof (b_leg.ones));

      bins div_00 = binsof (all_ops) intersect {div_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins div_FF = binsof (all_ops) intersect {div_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins div_max = binsof (all_ops) intersect {div_op} &&
                     (binsof (a_leg.ones) && binsof (b_leg.ones));

      ignore_bins others_only = binsof(a_leg.others) && binsof(b_leg.others);
     }
  endgroup
  
  function new (mailbox mon2cov_new);
    op_cov = new();
    zeros_or_ones_on_ops = new();

    if(mon2cov_new == null)begin
      $display("%0t -> coverage : ERROR -> mon2cov is null",$time);
      $finish;
    end
    else
      this.mon2cov = mon2cov_new;
  endfunction 

  task run();
    transaction tr;

    forever begin
      mon2cov.get(tr);
      A = tr.A;
      B = tr.B;
      op_set = tr.op;
      op_cov.sample();
      zeros_or_ones_on_ops.sample();
      $display("%0t -> coverage : tr is %s",$time,tr.convert2string());
    end
  endtask

endclass  

`endif
                                                                                                  code/7.1/sim/testbench/component/environment.svh                                                    0000664 0000765 0000765 00000006321 14347266251 017534  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ENV
`define ENV

class environment;
  virtual alu_interface intf;
  virtual alu_reg_interface reg_intf;

  generator gen;
  driver drv;
  monitor mon;
  scoreboard scb;
  coverage cov;

  mailbox gen2drv;
  mailbox mon2scb;
  mailbox mon2cov;
  
  function new (virtual alu_interface intf_new, 
                virtual alu_reg_interface reg_intf_new);
    this.intf = intf_new;
    this.reg_intf = reg_intf_new;
  endfunction 

  function void build();
    $display("%0t -> environment : start build() method",$time);
    gen2drv = new();
    mon2scb = new();
    mon2cov = new();

    gen = new(gen2drv);
    drv = new(intf, gen2drv);
    mon = new(intf, mon2cov, mon2scb);
    scb = new(reg_intf, mon2scb);
    cov = new(mon2cov);
    $display("%0t -> environment : finish build() method",$time);
  endfunction

  task reset();
    $display("%0t -> environment : start reset() method",$time);
    begin
      logic[15:0] alu_result;
      transaction tr = new();
      tr.op = rst_op;
      this.intf.send_op(tr,alu_result);
    end
    $display("%0t -> environment : finish reset() method",$time);
  endtask

  task config();
    $display("%0t -> environment : start config() method",$time);
    begin
      bit[15:0] rd_data;
      reg_transaction tr = new();
      tr.op = reg_wr;
      tr.addr = `BASE_ADDR + `CFG_CTRL_REG_OFFSET;
      tr.wr_data = 1'd1;
      this.reg_intf.send_op(tr,rd_data);
      $display("%0t -> write CFG_CTRL_REG value : %0h",$time,tr.wr_data);
      tr.op = reg_rd;
      this.reg_intf.send_op(tr,rd_data);
      $display("%0t -> read CFG_CTRL_REG value : %0h",$time,rd_data);
    end
    $display("%0t -> environment : finish config() method",$time);
  endtask

  task start();
    $display("%0t -> environment : start start() method",$time);
    fork
      gen.run();
      drv.run();
      mon.run();
      cov.run();
      scb.run();
    join_none
    $display("%0t -> environment : finish start() method",$time);
  endtask

  task wait_finish();
    $display("%0t -> environment : start wait_finish() method",$time);
    repeat(10000) @(posedge intf.clk);
    $display("%0t -> environment : finish wait_finish() method",$time);
  endtask

  task report();
    $display("%0t -> environment : start report() method",$time);
    $display("\n");
    if(scb.fail_cnt == 0)begin
      $display("************ Test PASSED ***************");
      $display("************ total: %0d  ***************",mon.total_cnt);
      $display("************ pass: %0d fail: 0 ***************",scb.pass_cnt);
    end
    else begin
      $display("************ Test FAIL ***************");
      $display("************ total: %0d  ***************",mon.total_cnt);
      $display("************ pass: %0d fail: %0d ***************",scb.pass_cnt,scb.fail_cnt);
    end
    $display("coverage op_cov: %g%%, zeros_or_ones_on_ops: %g%%",cov.op_cov.get_coverage(),cov.zeros_or_ones_on_ops.get_coverage());
    $display("\n");
    $display("%0t -> environment : finish report() method",$time);
  endtask
  
  task run();
    $display("%0t -> environment : start run() method",$time);
    build();
    reset();
    config();
    start();
    wait_finish();
    report();
    $display("%0t -> environment : finish run() method",$time);
  endtask
  
endclass  

`endif
                                                                                                                                                                                                                                                                                                               code/7.1/sim/testbench/component/driver.svh                                                         0000664 0000765 0000765 00000001200 14347266251 016452  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef DRIVER
`define DRIVER

class driver;

  virtual alu_interface intf;
  mailbox gen2drv;
  
  function new (virtual alu_interface intf_new, 
                mailbox gen2drv_new);
    this.intf = intf_new;
    if(gen2drv_new == null)begin
      $display("%0t -> driver : ERROR -> gen2drv is null",$time);
      $finish;
    end
    else
      this.gen2drv = gen2drv_new;
  endfunction 

  task run();
    transaction tr;
    bit[15:0] alu_result;

    forever begin
      gen2drv.get(tr);
      $display("%0t -> driver : tr is %s",$time,tr.convert2string_in());
      intf.send_op(tr,alu_result);
    end
  endtask

endclass  

`endif
                                                                                                                                                                                                                                                                                                                                                                                                code/7.1/sim/testbench/interface/alu_reg_interface.sv                                               0000600 0000765 0000765 00000004077 14351430020 020366  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_REG_INTERFACE
`define ALU_REG_INTERFACE

interface alu_reg_interface(input wire clk, input wire rst_n);
  import    alu_pkg::*;
  parameter tsu = 1ps;
  parameter tco = 0ps;
  
  logic        vld;
  logic        op;
  logic [15:0] wr_data;
  logic [15:0] addr;
  logic [15:0] rd_data;
  
  clocking drv@(posedge clk);
    output #tco vld;
    output #tco op;
    output #tco wr_data;
    output #tco addr;
    input  #tsu rd_data;
  endclocking
  
  clocking mon@(posedge clk);
    input #tsu vld;
    input #tsu op;
    input #tsu wr_data;
    input #tsu addr;
    input #tsu rd_data;
  endclocking

  task send_op(input reg_transaction req, output bit[15:0] o_rd_data);
    //drive vld cmd
    begin
      @(drv);
      drv.vld <= 1'b1;
      case(req.op.name())
       "reg_wr":   drv.op <= 1'b1;
       "reg_rd":   drv.op <= 1'b0;
      endcase
      drv.addr <= req.addr;
      case(req.op.name())
       "reg_rd":   drv.wr_data <= 16'h0;
       "reg_wr":   drv.wr_data <= req.wr_data;
      endcase
    end
    //drive idle cmd
    begin
      @(drv);
      drv.vld     <= 1'b0;
      drv.op      <= 1'b0;
      drv.addr    <= 16'h0;
      drv.wr_data <= 16'h0;
    end
    //monitor rd data
    begin
      @(drv);
      if(req.op.name()=="reg_rd")
        o_rd_data = drv.rd_data;
    end
  endtask 
  
  task init();
    vld     <= 0;
    op      <= 'dx;
    wr_data <= 'dx;
    addr    <= 'dx;
  endtask
  
  function reg_operation_t op2enum();
    case(op)
      1'b0 : return reg_rd;
      1'b1 : return reg_wr;
      default : $fatal("Illegal operation on reg interface");
    endcase
  endfunction
  
  function bit[15:0] peek(string reg_name);
    case(reg_name)
      "cfg_cfg_ctrl"     : return $root.top.DUT.i_demo_reg_slave.cfg_cfg_ctrl.reg_field;
      "sta_sta_status"   : return $root.top.DUT.i_demo_reg_slave.sta_sta_status.reg_field;
      "cnt_cnt_operation": return $root.top.DUT.i_demo_reg_slave.cnt_cnt_operation.reg_field;
      "int_int_interrupt": return $root.top.DUT.i_demo_reg_slave.int_int_interrupt.reg_field;
    endcase
  endfunction

endinterface 

`endif
   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 code/7.1/sim/testbench/interface/alu_interface.sv                                                   0000600 0000765 0000765 00000004251 14350215026 017531  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_INTERFACE
`define ALU_INTERFACE

interface alu_interface(input wire clk);
  import    alu_pkg::*;
  parameter tsu = 1ps;
  parameter tco = 0ps;
  
  logic[7:0]    A;
  logic[7:0]    B;
  logic[2:0]    op;
  logic         start;
  logic         done;
  logic [15:0]  result;
  logic rst_n;
  
  clocking drv@(posedge clk);
    output #tco A;
    output #tco B;
    output #tco op;
    output #tco start;
    input  #tsu done;
    input  #tsu result;
  endclocking
  
  clocking mon@(posedge clk);
    input #tsu A;
    input #tsu B;
    input #tsu op;
    input #tsu start;
    input #tsu done;
    input #tsu result;
  endclocking
  
  task send_op(input transaction req, output bit[15:0] alu_result);
    case(req.op.name())
      "no_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        drv.start <= 1'b1;
        @(drv);
        drv.start <= 1'b0;
        @(drv);
        alu_result = drv.result;
      end
      "rst_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        rst_n     <= 0;
        drv.start <= 1'b1;
        @(drv);
        rst_n     <= 1;
        drv.start <= 1'b0;
        @(drv);
        alu_result = drv.result;
      end
      "mul_op","div_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        drv.A     <= req.A;
        drv.B     <= req.B;
        drv.start <= 1'b1;
        repeat(2) begin
          @(drv);
        end
        @(drv);
        alu_result = drv.result;
        @(drv);
        drv.start <= 1'b0;
      end
      default: begin
       @(drv);
       drv.op    <= enum2op(req.op);
       drv.A     <= req.A;
       drv.B     <= req.B;
       drv.start <= 1'b1;
       @(drv);
       alu_result = drv.result;
       @(drv);
       drv.start <= 1'b0;
      end
    endcase
  endtask  
  
  task init();
    start <= 0;
    A     <= 'dx;
    B     <= 'dx;
    op    <= 'd0;
  endtask
  
  function bit[2:0] enum2op(operation_t op);
    case(op)
      no_op  : return 3'b000; 
      add_op : return 3'b001;
      and_op : return 3'b010;
      xor_op : return 3'b011;
      mul_op : return 3'b100;
      div_op : return 3'b101;
      rst_op : return 3'b111;
    endcase
  endfunction

endinterface 

`endif
   
                                                                                                                                                                                                                                                                                                                                                       code/7.1/sim/testbench/transaction/transaction.svh                                                  0000600 0000765 0000765 00000002625 14347530727 020033  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TRANSACTION
`define TRANSACTION

class transaction;
  
  rand bit[7:0]     A;
  rand bit[7:0]     B;
  rand operation_t  op;
  bit[15:0]         result;
  
  constraint opcode_c {op dist {no_op := 1, add_op:= 5, and_op:=5, 
                                xor_op:=5,mul_op:=5,div_op:=5, rst_op:=1};}

  constraint oprand_c { A dist {8'h00:=1, [8'h01 : 8'hFE]:=1, 8'hFF:=1};
                        B dist {8'h00:=1, [8'h01 : 8'hFE]:=1, 8'hFF:=1};} 
  
  function bit compare(transaction tr);
    bit same;
    if(tr == null)begin
      same = 0;
      $display("%0t -> transaction : ERROR -> tr is null",$time);
    end
    else if((this.A == tr.A) &&
            (this.B == tr.B) &&
            (this.op == tr.op) &&
            (this.result == tr.result))
      same = 1;
    else 
      same = 0;
      return same;
  endfunction

  function string convert2string_in();
    string            s;
    s = $sformatf("A: %2h  B: %2h   op: %s",
                  A, B, op.name());
    return s;
  endfunction 
  
  function string convert2string();
    string            s;
    s = $sformatf("A: %2h  B: %2h   op: %s = %4h",
                  A, B, op.name(), result);
    return s;
  endfunction 

  function transaction clone();
    clone        = new();
    clone.A      = this.A;
    clone.B      = this.B;
    clone.op     = this.op;
    clone.result = this.result;
    return clone;
  endfunction

endclass  

`endif
                                                                                                           code/7.1/sim/testbench/transaction/reg_transaction.svh                                              0000664 0000765 0000765 00000000674 14347530745 020704  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef REG_TRANSACTION
`define REG_TRANSACTION

class reg_transaction;

   rand bit[15:0]         wr_data;
   rand bit[15:0]         addr;
   rand reg_operation_t   op;
   bit[15:0]              rd_data;

   function string convert2string();
      string    s;
      s = $sformatf("op: %s   addr: %2h   rd_data: %4h    wr_data: %4h",
                    op.name(), addr, rd_data, wr_data);
      return s;
   endfunction 

endclass  

`endif
                                                                    code/7.1/sim/testbench/testcase/testcase.svh                                                        0000664 0000765 0000765 00000000654 14351430041 016600  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TESTCASE
`define TESTCASE

class testcase;
  virtual alu_interface intf;
  virtual alu_reg_interface reg_intf;
  
  environment  env;
  
  function new (virtual alu_interface intf_new, 
                virtual alu_reg_interface reg_intf_new);
    this.intf     = intf_new;
    this.reg_intf = reg_intf_new;
  endfunction 
  
  task run();
    env = new(intf, reg_intf);
    env.run();
  endtask
  
endclass 

`endif
   
                                                                                    code/7.3/sim/testbench/component/scoreboard.svh                                                     0000664 0000765 0000765 00000004133 14353041033 017276  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef SCOREBOARD
`define SCOREBOARD

class scoreboard;

  virtual alu_reg_interface reg_intf;
  mailbox mon2scb;
  int pass_cnt,fail_cnt;
  
  function new (virtual alu_reg_interface reg_intf_new,
                mailbox mon2scb_new);
    this.reg_intf = reg_intf_new;
    if(mon2scb_new == null)begin
      $display("%0t -> scoreboard : ERROR -> mon2scb is null",$time);
      $finish;
    end
    else
      this.mon2scb = mon2scb_new;
  endfunction 

  task get_ctrl_reg_value(output bit value);
    bit[15:0] rd_data;
    rd_data = reg_intf.peek("cfg_cfg_ctrl");
    value = rd_data[0];
    $display("%0t -> scoreboard : read CFG_CTRL_REG value : %0h",$time,rd_data);
  endtask

  task run();
    transaction exp_tr;
    transaction act_tr;
    string data_str;
    bit ctrl_reg_value;

    forever begin
      mon2scb.get(act_tr);
      get_ctrl_reg_value(ctrl_reg_value);
      exp_tr = predict_result(act_tr, ctrl_reg_value);
      data_str = {"\n \t Actual    ",  act_tr.convert2string(), 
                  "\n \t Predicted ",  exp_tr.convert2string()};
      if(act_tr.compare(exp_tr)) begin
        pass_cnt++;
        $display("%0t -> scoreboard : PASS => %s",$time,data_str);
      end
      else begin
        fail_cnt++;
        $display("%0t -> scoreboard : FAIL => %s",$time,data_str);
      end
    end
  endtask

  function transaction predict_result(transaction cmd, bit is_invert);
    transaction exp_tr;
    bit[15:0] result;
    exp_tr = new();
    exp_tr.A  = cmd.A;
    exp_tr.B  = cmd.B;
    exp_tr.op = cmd.op;
       
    case (cmd.op)
      add_op: result = cmd.A + cmd.B;
      and_op: result = cmd.A & cmd.B;
      xor_op: result = cmd.A ^ cmd.B;
      mul_op: result = cmd.A * cmd.B;
      div_op: if(cmd.B == 0)
                result = 'h0;
              else
                result = cmd.A / cmd.B;
    endcase 

    if(is_invert) 
      exp_tr.result = ~result;
    else
      exp_tr.result = result;
    $display("%0t -> scoreboard : op is %s, A is %h, B is %h, exp_result is %h",$time,cmd.op.name(),cmd.A,cmd.B,exp_tr.result);
    return exp_tr;
  endfunction : predict_result

endclass  

`endif
                                                                                                                                                                                                                                                                                                                                                                                                                                     code/7.3/sim/testbench/component/driver.svh                                                         0000664 0000765 0000765 00000004076 14351766343 016474  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef DRIVER
`define DRIVER

class driver;

  virtual alu_interface intf;
  virtual apb_interface apb_intf;
  mailbox gen2drv;
  
  function new (virtual alu_interface intf_new, 
                virtual apb_interface apb_intf_new, 
                mailbox gen2drv_new);
    this.intf     = intf_new;
    this.apb_intf = apb_intf_new;
    if(gen2drv_new == null)begin
      $display("%0t -> driver : ERROR -> gen2drv is null",$time);
      $finish;
    end
    else
      this.gen2drv = gen2drv_new;
  endfunction 

  task run();
    transaction tr;
    bit[15:0] alu_result;

    forever begin
      gen2drv.get(tr);
      drv2dut(tr);
    end
  endtask

  task drv2dut(input transaction req);
    bit[15:0] addr,data;
    bit busy;

    //drive operands
    addr = `ALU_BEGIN_ADDR + `BASE_ADDR + `CFG_OPERANDS_REG_OFFSET;
    data = {req.A,req.B};
    apb_intf.master_write(addr,data);

    //dirve opcode
    data = 0;
    case(req.op.name())
      "no_op": begin
        addr = `ALU_BEGIN_ADDR + `BASE_ADDR + `CFW_OPCODE_REG_OFFSET;
        data[`CFW_OPCODE_REG_SIZE-1:0] = intf.enum2op(req.op);
        apb_intf.master_write(addr,data);
      end
      "rst_op": begin
        @(intf.drv);
        intf.rst_n     <= 0;
        @(intf.drv);
        intf.rst_n     <= 1;
        addr = `ALU_BEGIN_ADDR + `BASE_ADDR + `CFW_OPCODE_REG_OFFSET;
        data[`CFW_OPCODE_REG_SIZE-1:0] = intf.enum2op(req.op);
        apb_intf.master_write(addr,data);
      end
      default: begin
        addr = `ALU_BEGIN_ADDR + `BASE_ADDR + `CFW_OPCODE_REG_OFFSET;
        data[`CFW_OPCODE_REG_SIZE-1:0] = intf.enum2op(req.op);
        apb_intf.master_write(addr,data);
      end
    endcase

    //wait idle
    do begin
      addr = `ALU_BEGIN_ADDR + `BASE_ADDR + `STA_STATUS_REG_OFFSET;
      apb_intf.master_read(addr,data);
      busy = data[4];
    end while(busy == 1'b1);

    //get result
    addr = `ALU_BEGIN_ADDR + `BASE_ADDR + `STA_RESULT_REG_OFFSET;
    apb_intf.master_read(addr,data);
    req.result = data;
    $display("%0t -> driver : tr is %s",$time,req.convert2string());

  endtask

endclass  

`endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  code/7.3/sim/testbench/component/monitor.svh                                                        0000664 0000765 0000765 00000005342 14351770543 016662  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef MONITOR
`define MONITOR

class monitor;

  virtual alu_interface     intf;
  virtual alu_reg_interface reg_intf;
  mailbox mon2scb;
  mailbox mon2cov;
  mailbox mb_local;

  int total_cnt = 0;
  
  function new (virtual alu_interface intf_new, 
                virtual alu_reg_interface reg_intf_new, 
                mailbox mon2cov_new,
                mailbox mon2scb_new);
    this.intf     = intf_new;
    this.reg_intf = reg_intf_new;
    if(mon2cov_new == null)begin
      $display("%0t -> monitor : ERROR -> mon2cov is null",$time);
      $finish;
    end
    else if(mon2scb_new == null)begin
      $display("%0t -> monitor : ERROR -> mon2scb is null",$time);
      $finish;
    end
    else begin
      this.mon2cov = mon2cov_new;
      this.mon2scb = mon2scb_new;
    end
  endfunction 

  task run();
    reg_transaction reg_tr = new();
    mb_local = new();

    fork
      //thread 1 : monitor reg_interface, then pack to reg_tr  
      forever begin
        bit vld;

        begin
          @(reg_intf.mon);
          if(reg_intf.mon.vld)begin
            reg_tr.op = reg_intf.op2enum(reg_intf.mon.op);
            reg_tr.addr = reg_intf.mon.addr;
            vld = reg_intf.mon.vld;
          end
        end

        if(vld)begin
          //monitor operands
          if((reg_tr.op == reg_wr) && (reg_tr.addr == `BASE_ADDR + `CFG_OPERANDS_REG_OFFSET))begin
              reg_tr.wr_data = reg_intf.mon.wr_data;
              mb_local.put(reg_tr);
          end
          //monitor opcode
          if((reg_tr.op == reg_wr) && (reg_tr.addr == `BASE_ADDR + `CFW_OPCODE_REG_OFFSET))begin
              reg_tr.wr_data = reg_intf.mon.wr_data;
              mb_local.put(reg_tr);
          end
          //monitor result
          if((reg_tr.op == reg_rd) && (reg_tr.addr == `BASE_ADDR + `STA_RESULT_REG_OFFSET))begin
              @(reg_intf.mon);
              reg_tr.rd_data = reg_intf.mon.rd_data;
              mb_local.put(reg_tr);
          end
        end
      end

      //thread 2 : convert reg_tr to tr, then send to scb & cov 
      forever begin
        transaction tr;
        reg_transaction reg_tr;

        //get monitor operands
        mb_local.get(reg_tr);
        tr = new();
        tr.A = reg_tr.wr_data[15:8];
        tr.B = reg_tr.wr_data[7:0];
        //get monitor opcode
        mb_local.get(reg_tr);
        tr.op = intf.op2enum(reg_tr.wr_data[2:0]);
        //get monitor result
        mb_local.get(reg_tr);
        tr.result = reg_tr.rd_data;
        //send to scb & cov
        if((tr.op != no_op) && (tr.op != rst_op))begin
          mon2scb.put(tr);
        end
        mon2cov.put(tr);
        $display("%0t -> monitor : tr is %s",$time,tr.convert2string());
        total_cnt++;
      end
    join
  endtask

endclass  

`endif
                                                                                                                                                                                                                                                                                              code/7.3/sim/testbench/component/coverage.svh                                                       0000664 0000765 0000765 00000006636 14351430636 016771  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef COVERAGE
`define COVERAGE

class coverage;

  mailbox mon2cov;
  bit[7:0]  A;
  bit[7:0]  B;
  operation_t  op_set;

  covergroup op_cov;
     coverpoint op_set {
        bins single_cycle[] = {[add_op : xor_op], rst_op,no_op};
        bins multi_cycle = {mul_op, div_op};

        bins opn_rst[] = ([add_op:div_op] => rst_op);
        bins rst_opn[] = (rst_op => [add_op:div_op]);

        bins sngl_mul[] = ([add_op:xor_op],no_op => mul_op);
        bins mul_sngl[] = (mul_op => [add_op:xor_op], no_op);

        bins sngl_div[] = ([add_op:xor_op],no_op => div_op);
        bins div_sngl[] = (div_op => [add_op:xor_op], no_op);

        bins mul_div[] = (mul_op => div_op);
        bins div_mul[] = (div_op => mul_op);

        bins twoops[] = ([add_op:div_op] [* 2]);

        bins manymul = (mul_op [* 3:5]);
        bins manydiv = (div_op [* 3:5]);
     }
  endgroup

  covergroup zeros_or_ones_on_ops;
    all_ops : coverpoint op_set {
      ignore_bins null_ops = {rst_op, no_op};}

    a_leg: coverpoint A {
      bins zeros = {'h00};
      bins others= {['h01:'hFE]};
      bins ones  = {'hFF};
    }

    b_leg: coverpoint B {
      bins zeros = {'h00};
      bins others= {['h01:'hFE]};
      bins ones  = {'hFF};
    }

    op_00_FF:  cross a_leg, b_leg, all_ops {
      bins add_00 = binsof (all_ops) intersect {add_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins add_FF = binsof (all_ops) intersect {add_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins and_00 = binsof (all_ops) intersect {and_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins and_FF = binsof (all_ops) intersect {and_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins xor_00 = binsof (all_ops) intersect {xor_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins xor_FF = binsof (all_ops) intersect {xor_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins mul_00 = binsof (all_ops) intersect {mul_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins mul_FF = binsof (all_ops) intersect {mul_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins mul_max = binsof (all_ops) intersect {mul_op} &&
                     (binsof (a_leg.ones) && binsof (b_leg.ones));

      bins div_00 = binsof (all_ops) intersect {div_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins div_FF = binsof (all_ops) intersect {div_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins div_max = binsof (all_ops) intersect {div_op} &&
                     (binsof (a_leg.ones) && binsof (b_leg.ones));

      ignore_bins others_only = binsof(a_leg.others) && binsof(b_leg.others);
     }
  endgroup
  
  function new (mailbox mon2cov_new);
    op_cov = new();
    zeros_or_ones_on_ops = new();

    if(mon2cov_new == null)begin
      $display("%0t -> coverage : ERROR -> mon2cov is null",$time);
      $finish;
    end
    else
      this.mon2cov = mon2cov_new;
  endfunction 

  task run();
    transaction tr;

    forever begin
      mon2cov.get(tr);
      A = tr.A;
      B = tr.B;
      op_set = tr.op;
      op_cov.sample();
      zeros_or_ones_on_ops.sample();
      $display("%0t -> coverage : tr is %s",$time,tr.convert2string());
    end
  endtask

endclass  

`endif
                                                                                                  code/7.3/sim/testbench/component/generator.svh                                                      0000664 0000765 0000765 00000001521 14353545243 017153  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef GENERATOR
`define GENERATOR

class generator;

  mailbox gen2drv;
  
  function new (mailbox gen2drv_new);
    if(gen2drv_new == null)begin
      $display("%0t -> generator : ERROR -> gen2drv is null",$time);
      $finish;
    end
    else
      this.gen2drv = gen2drv_new;
  endfunction 

  task run(int num_tr = 200);
    transaction tr;
    
    //random
    repeat(num_tr)begin
      tr = new();
      assert(tr.randomize());
      $display("%0t -> generator : tr is %s",$time,tr.convert2string_in());
      gen2drv.put(tr);
    end

    //constraint operand with 'h00 or 'hff
    repeat(num_tr)begin
      tr = new();
      assert(tr.randomize() with {A inside {'h0,'hff}; B inside {'h0,'hff};});
      $display("%0t -> generator : tr is %s",$time,tr.convert2string_in());
      gen2drv.put(tr);
    end

  endtask

endclass  

`endif
                                                                                                                                                                               code/7.3/sim/testbench/component/environment.svh                                                    0000664 0000765 0000765 00000006500 14353545363 017536  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ENV
`define ENV

class environment;
  virtual alu_interface intf;
  virtual alu_reg_interface reg_intf;
  virtual apb_interface apb_intf;

  generator gen;
  driver drv;
  monitor mon;
  scoreboard scb;
  coverage cov;

  mailbox gen2drv;
  mailbox mon2scb;
  mailbox mon2cov;
  
  function new (virtual alu_interface intf_new, 
                virtual apb_interface apb_intf_new, 
                virtual alu_reg_interface reg_intf_new);
    this.intf     = intf_new;
    this.apb_intf = apb_intf_new;
    this.reg_intf = reg_intf_new;
  endfunction 

  function void build();
    $display("%0t -> environment : start build() method",$time);
    gen2drv = new();
    mon2scb = new();
    mon2cov = new();

    gen = new(gen2drv);
    drv = new(intf, apb_intf, gen2drv);
    mon = new(intf, reg_intf, mon2cov, mon2scb);
    scb = new(reg_intf, mon2scb);
    cov = new(mon2cov);
    $display("%0t -> environment : finish build() method",$time);
  endfunction

  task reset();
    $display("%0t -> environment : start reset() method",$time);
    begin
      logic[15:0] alu_result;
      transaction tr = new();
      tr.op = rst_op;
      this.intf.send_op(tr,alu_result);
    end
    $display("%0t -> environment : finish reset() method",$time);
  endtask

  task config();
    #100;
    $display("%0t -> environment : start config() method",$time);
    begin
      data_t data;
      addr_t addr;
      addr = `ALU_BEGIN_ADDR + `BASE_ADDR + `CFG_CTRL_REG_OFFSET;
      data[`CFG_CTRL_REG_SIZE-1:0] = 1'd1;
      apb_intf.master_write(addr,data);
      $display("%0t -> write CFG_CTRL_REG value : %0h",$time,data);
      apb_intf.master_read(addr,data);
      $display("%0t -> read CFG_CTRL_REG value : %0h",$time,data);
    end
    $display("%0t -> environment : finish config() method",$time);
  endtask

  task start();
    $display("%0t -> environment : start start() method",$time);
    fork
      gen.run();
      drv.run();
      mon.run();
      cov.run();
      scb.run();
    join_none
    $display("%0t -> environment : finish start() method",$time);
  endtask

  task wait_finish();
    $display("%0t -> environment : start wait_finish() method",$time);
    repeat(10000) @(posedge intf.clk);
    $display("%0t -> environment : finish wait_finish() method",$time);
  endtask

  task report();
    $display("%0t -> environment : start report() method",$time);
    $display("\n");
    if(scb.fail_cnt == 0)begin
      $display("************ Test PASSED ***************");
      $display("************ total: %0d  ***************",mon.total_cnt);
      $display("************ pass: %0d fail: 0 ***************",scb.pass_cnt);
    end
    else begin
      $display("************ Test FAIL ***************");
      $display("************ total: %0d  ***************",mon.total_cnt);
      $display("************ pass: %0d fail: %0d ***************",scb.pass_cnt,scb.fail_cnt);
    end
    $display("coverage op_cov: %g%%, zeros_or_ones_on_ops: %g%%",cov.op_cov.get_coverage(),cov.zeros_or_ones_on_ops.get_coverage());
    $display("\n");
    $display("%0t -> environment : finish report() method",$time);
  endtask
  
  task run();
    $display("%0t -> environment : start run() method",$time);
    build();
    reset();
    config();
    start();
    wait_finish();
    report();
    $display("%0t -> environment : finish run() method",$time);
  endtask
  
endclass  

`endif
                                                                                                                                                                                                code/7.3/sim/testbench/interface/alu_interface.sv                                                   0000600 0000765 0000765 00000005021 14351430636 017536  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_INTERFACE
`define ALU_INTERFACE

interface alu_interface(input wire clk);
  import    alu_pkg::*;
  parameter tsu = 1ps;
  parameter tco = 0ps;
  
  logic[7:0]    A;
  logic[7:0]    B;
  logic[2:0]    op;
  logic         start;
  logic         done;
  logic [15:0]  result;
  logic rst_n;
  
  clocking drv@(posedge clk);
    output #tco A;
    output #tco B;
    output #tco op;
    output #tco start;
    input  #tsu done;
    input  #tsu result;
  endclocking
  
  clocking mon@(posedge clk);
    input #tsu A;
    input #tsu B;
    input #tsu op;
    input #tsu start;
    input #tsu done;
    input #tsu result;
  endclocking
  
  task send_op(input transaction req, output bit[15:0] alu_result);
    case(req.op.name())
      "no_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        drv.start <= 1'b1;
        @(drv);
        drv.start <= 1'b0;
        @(drv);
        alu_result = drv.result;
      end
      "rst_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        rst_n     <= 0;
        drv.start <= 1'b1;
        @(drv);
        rst_n     <= 1;
        drv.start <= 1'b0;
        @(drv);
        alu_result = drv.result;
      end
      "mul_op","div_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        drv.A     <= req.A;
        drv.B     <= req.B;
        drv.start <= 1'b1;
        repeat(2) begin
          @(drv);
        end
        @(drv);
        alu_result = drv.result;
        @(drv);
        drv.start <= 1'b0;
      end
      default: begin
       @(drv);
       drv.op    <= enum2op(req.op);
       drv.A     <= req.A;
       drv.B     <= req.B;
       drv.start <= 1'b1;
       @(drv);
       alu_result = drv.result;
       @(drv);
       drv.start <= 1'b0;
      end
    endcase
  endtask  
  
  task init();
    start <= 0;
    A     <= 'dx;
    B     <= 'dx;
    op    <= 'd0;
  endtask
  
  function bit[2:0] enum2op(operation_t op);
    case(op)
      no_op  : return 3'b000; 
      add_op : return 3'b001;
      and_op : return 3'b010;
      xor_op : return 3'b011;
      mul_op : return 3'b100;
      div_op : return 3'b101;
      rst_op : return 3'b111;
    endcase
  endfunction

  function operation_t op2enum(bit[2:0] op);
    case(op)
      3'b000  : return no_op; 
      3'b001  : return add_op;
      3'b010  : return and_op;
      3'b011  : return xor_op;
      3'b100  : return mul_op;
      3'b101  : return div_op;
      3'b111  : return rst_op;
      default : $fatal("Illegal operation on interface");
    endcase
  endfunction

endinterface 

`endif
   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               code/7.3/sim/testbench/interface/alu_reg_interface.sv                                               0000600 0000765 0000765 00000006354 14351602443 020402  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_REG_INTERFACE
`define ALU_REG_INTERFACE

interface alu_reg_interface(input wire clk, input wire rst_n);
  import    alu_pkg::*;
  parameter tsu = 1ps;
  parameter tco = 0ps;
  
  logic        vld;
  logic        op;
  logic [15:0] wr_data;
  logic [15:0] addr;
  logic [15:0] rd_data;
  
  clocking drv@(posedge clk);
    output #tco vld;
    output #tco op;
    output #tco wr_data;
    output #tco addr;
    input  #tsu rd_data;
  endclocking
  
  clocking mon@(posedge clk);
    input #tsu vld;
    input #tsu op;
    input #tsu wr_data;
    input #tsu addr;
    input #tsu rd_data;
  endclocking

  task reg_write(bit[15:0] addr, bit[15:0] data);
    //drive vld cmd
    begin
      @(drv);
      drv.vld     <= 1'b1;
      drv.op      <= 1'b1;
      drv.addr    <= addr;
      drv.wr_data <= data;
    end
    //drive idle cmd
    begin
      @(drv);
      drv.vld     <= 1'b0;
      drv.op      <= 1'b0;
      drv.addr    <= 16'h0;
      drv.wr_data <= 16'h0;
    end
  endtask

  task reg_read(bit[15:0] addr, output bit[15:0] data);
    //drive vld cmd
    begin
      @(drv);
      drv.vld     <= 1'b1;
      drv.op      <= 1'b0;
      drv.addr    <= addr;
      drv.wr_data <= 16'h0;
    end
    //drive idle cmd
    begin
      @(drv);
      drv.vld     <= 1'b0;
      drv.op      <= 1'b0;
      drv.addr    <= 16'h0;
      drv.wr_data <= 16'h0;
    end
    //monitor rd data
    begin
      @(drv);
      data = drv.rd_data;
    end
  endtask

  task send_op(input reg_transaction req, output bit[15:0] o_rd_data);
    //drive vld cmd
    begin
      @(drv);
      drv.vld <= 1'b1;
      case(req.op.name())
       "reg_wr":   drv.op <= 1'b1;
       "reg_rd":   drv.op <= 1'b0;
      endcase
      drv.addr <= req.addr;
      case(req.op.name())
       "reg_rd":   drv.wr_data <= 16'h0;
       "reg_wr":   drv.wr_data <= req.wr_data;
      endcase
    end
    //drive idle cmd
    begin
      @(drv);
      drv.vld     <= 1'b0;
      drv.op      <= 1'b0;
      drv.addr    <= 16'h0;
      drv.wr_data <= 16'h0;
    end
    //monitor rd data
    begin
      @(drv);
      if(req.op.name()=="reg_rd")
        o_rd_data = drv.rd_data;
    end
  endtask 

  task init();
    vld     <= 0;
    op      <= 'dx;
    wr_data <= 'dx;
    addr    <= 'dx;
  endtask
  
  function reg_operation_t op2enum(bit op);
    case(op)
      1'b0 : return reg_rd;
      1'b1 : return reg_wr;
      default : $fatal("Illegal operation on reg interface");
    endcase
  endfunction
  
  function bit[15:0] peek(string reg_name);
    case(reg_name)
      "cfg_cfg_ctrl"     : return $root.top.DUT.alu_core.i_demo_reg_slave.cfg_cfg_ctrl.reg_field;
      "cfg_cfg_operands" : return $root.top.DUT.alu_core.i_demo_reg_slave.cfg_cfg_operands.reg_field;
      "cfw_cfw_opcode"   : return $root.top.DUT.alu_core.i_demo_reg_slave.cfw_cfw_opcode.reg_field;
      "sta_sta_result"   : return $root.top.DUT.alu_core.i_demo_reg_slave.sta_sta_result.reg_field;
      "sta_sta_status"   : return $root.top.DUT.alu_core.i_demo_reg_slave.sta_sta_status.reg_field;
      "cnt_cnt_operation": return $root.top.DUT.alu_core.i_demo_reg_slave.cnt_cnt_operation.reg_field;
      "int_int_interrupt": return $root.top.DUT.alu_core.i_demo_reg_slave.int_int_interrupt.reg_field;
    endcase
  endfunction

endinterface 

`endif
   
                                                                                                                                                                                                                                                                                    code/7.3/sim/testbench/interface/apb_interface.sv                                                   0000600 0000765 0000765 00000004555 14353545233 017534  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef APB_INTERFACE
`define APB_INTERFACE

interface apb_interface 
  #(parameter addr_width = 16, data_width = 16, tsu = 1ps, tco = 0ps)(
  input wire pclk,
  input wire prst_n
);
  typedef logic [addr_width-1:0] addr_t;
  typedef logic [data_width-1:0] data_t;
  
  logic     psel;
  logic     penable;
  logic     pwrite;
  addr_t    paddr;
  data_t    pwdata;
  logic     pready;
  data_t    prdata;

  clocking master_drv@(posedge pclk);
    output #tco psel;
    output #tco penable;
    output #tco pwrite;
    output #tco paddr;
    output #tco pwdata;
    input  #tsu pready;
    input  #tsu prdata;
  endclocking

  clocking slave_drv@(posedge pclk);
    input  #tsu psel;
    input  #tsu penable;
    input  #tsu pwrite;
    input  #tsu paddr;
    input  #tsu pwdata;
    output #tco pready;
    output #tco prdata;
  endclocking

  clocking mon@(posedge pclk);
    input  #tsu psel;
    input  #tsu penable;
    input  #tsu pwrite;
    input  #tsu paddr;
    input  #tsu pwdata;
    input  #tsu pready;
    input  #tsu prdata;
  endclocking

  modport master(clocking master_drv,input pclk,prst_n);
  modport slave (clocking slave_drv,input pclk,prst_n);

  task master_write(input addr_t addr, input data_t data);
    // setup 
    @(master_drv);
    master_drv.penable <= 1'b0;
    master_drv.psel    <= 1'b1;
    master_drv.pwrite  <= 1'b1;
    master_drv.paddr   <= addr;
    master_drv.pwdata  <= data;

    // access 
    @(master_drv);
    master_drv.penable   <= 1'b1;

    do begin
      @(master_drv);
    end while(master_drv.pready == 1'b0);
    // idle 
    master_drv.penable  <= 1'b0;
    master_drv.psel     <= 1'b0;
    master_drv.pwrite   <= 1'b0;
    master_drv.paddr    <= 'd0;
    master_drv.pwdata   <= 'd0;
  endtask

  task master_read(input addr_t addr, output data_t data);
    // setup 
    @(master_drv);
    master_drv.penable <= 1'b0;
    master_drv.psel    <= 1'b1;
    master_drv.pwrite  <= 1'b0;
    master_drv.paddr   <= addr;
    master_drv.pwdata  <= 'd0;

    // access 
    @(master_drv);
    master_drv.penable  <= 1'b1;

    do begin
      @(master_drv);
    end while(master_drv.pready == 1'b0);
    // get prdata
    data = master_drv.prdata;

    // idle 
    master_drv.penable  <= 1'b0;
    master_drv.psel     <= 1'b0;
    master_drv.pwrite   <= 1'b0;
    master_drv.paddr    <= 'd0;
    master_drv.pwdata   <= 'd0;
  endtask

endinterface 

`endif
   
                                                                                                                                                   code/7.3/sim/testbench/transaction/reg_transaction.svh                                              0000664 0000765 0000765 00000000670 14351430636 020673  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef REG_TRANSACTION
`define REG_TRANSACTION

class reg_transaction;

   rand bit[15:0]        wr_data;
   rand bit[15:0]        addr;
   rand reg_operation_t  op;
   bit[15:0]             rd_data;

   function string convert2string();
      string    s;
      s = $sformatf("op: %s   addr: %2h   rd_data: %4h    wr_data: %4h",
                    op.name(), addr, rd_data, wr_data);
      return s;
   endfunction 

endclass  

`endif
                                                                        code/7.3/sim/testbench/transaction/transaction.svh                                                  0000600 0000765 0000765 00000002631 14351430636 020023  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TRANSACTION
`define TRANSACTION

class transaction;
  
  rand bit[7:0]      A;
  rand bit[7:0]      B;
  rand operation_t   op;
  bit[15:0]          result;
  
  constraint opcode_c {op dist {no_op := 1, add_op:= 5, and_op:=5, 
                                xor_op:=5,mul_op:=5,div_op:=5, rst_op:=1};}

  constraint oprand_c { A dist {8'h00:=1, [8'h01 : 8'hFE]:=1, 8'hFF:=1};
                        B dist {8'h00:=1, [8'h01 : 8'hFE]:=1, 8'hFF:=1};} 
  
  function bit compare(transaction tr);
    bit same;
    if(tr == null)begin
      same = 0;
      $display("%0t -> transaction : ERROR -> tr is null",$time);
    end
    else if((this.A == tr.A) &&
            (this.B == tr.B) &&
            (this.op == tr.op) &&
            (this.result == tr.result))
      same = 1;
    else 
      same = 0;
      return same;
  endfunction

  function string convert2string_in();
    string            s;
    s = $sformatf("A: %2h  B: %2h   op: %s",
                  A, B, op.name());
    return s;
  endfunction 
  
  function string convert2string();
    string            s;
    s = $sformatf("A: %2h  B: %2h   op: %s = %4h",
                  A, B, op.name(), result);
    return s;
  endfunction 

  function transaction clone();
    clone        = new();
    clone.A      = this.A;
    clone.B      = this.B;
    clone.op     = this.op;
    clone.result = this.result;
    return clone;
  endfunction

endclass  

`endif
                                                                                                       code/7.3/sim/testbench/testcase/testcase.svh                                                        0000664 0000765 0000765 00000001057 14351637551 016617  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TESTCASE
`define TESTCASE

class testcase;
  virtual alu_interface intf;
  virtual alu_reg_interface reg_intf;
  virtual apb_interface apb_intf;
  
  environment  env;
  
  function new (virtual alu_interface intf_new, 
                virtual apb_interface apb_intf_new, 
                virtual alu_reg_interface reg_intf_new);
    this.intf     = intf_new;
    this.apb_intf = apb_intf_new;
    this.reg_intf = reg_intf_new;
  endfunction 
  
  task run();
    env = new(intf, apb_intf, reg_intf);
    env.run();
  endtask
  
endclass 

`endif
   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 code/7.2/sim/testbench/component/scoreboard.svh                                                     0000664 0000765 0000765 00000004133 14353041005 017274  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef SCOREBOARD
`define SCOREBOARD

class scoreboard;

  virtual alu_reg_interface reg_intf;
  mailbox mon2scb;
  int pass_cnt,fail_cnt;
  
  function new (virtual alu_reg_interface reg_intf_new,
                mailbox mon2scb_new);
    this.reg_intf = reg_intf_new;
    if(mon2scb_new == null)begin
      $display("%0t -> scoreboard : ERROR -> mon2scb is null",$time);
      $finish;
    end
    else
      this.mon2scb = mon2scb_new;
  endfunction 

  task get_ctrl_reg_value(output bit value);
    bit[15:0] rd_data;
    rd_data = reg_intf.peek("cfg_cfg_ctrl");
    value = rd_data[0];
    $display("%0t -> scoreboard : read CFG_CTRL_REG value : %0h",$time,rd_data);
  endtask

  task run();
    transaction exp_tr;
    transaction act_tr;
    string data_str;
    bit ctrl_reg_value;

    forever begin
      mon2scb.get(act_tr);
      get_ctrl_reg_value(ctrl_reg_value);
      exp_tr = predict_result(act_tr, ctrl_reg_value);
      data_str = {"\n \t Actual    ",  act_tr.convert2string(), 
                  "\n \t Predicted ",  exp_tr.convert2string()};
      if(act_tr.compare(exp_tr)) begin
        pass_cnt++;
        $display("%0t -> scoreboard : PASS => %s",$time,data_str);
      end
      else begin
        fail_cnt++;
        $display("%0t -> scoreboard : FAIL => %s",$time,data_str);
      end
    end
  endtask

  function transaction predict_result(transaction cmd, bit is_invert);
    transaction exp_tr;
    bit[15:0] result;
    exp_tr = new();
    exp_tr.A  = cmd.A;
    exp_tr.B  = cmd.B;
    exp_tr.op = cmd.op;
       
    case (cmd.op)
      add_op: result = cmd.A + cmd.B;
      and_op: result = cmd.A & cmd.B;
      xor_op: result = cmd.A ^ cmd.B;
      mul_op: result = cmd.A * cmd.B;
      div_op: if(cmd.B == 0)
                result = 'h0;
              else
                result = cmd.A / cmd.B;
    endcase 

    if(is_invert) 
      exp_tr.result = ~result;
    else
      exp_tr.result = result;
    $display("%0t -> scoreboard : op is %s, A is %h, B is %h, exp_result is %h",$time,cmd.op.name(),cmd.A,cmd.B,exp_tr.result);
    return exp_tr;
  endfunction : predict_result

endclass  

`endif
                                                                                                                                                                                                                                                                                                                                                                                                                                     code/7.2/sim/testbench/component/driver.svh                                                         0000664 0000765 0000765 00000003704 14351766400 016462  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef DRIVER
`define DRIVER

class driver;

  virtual alu_interface intf;
  virtual alu_reg_interface reg_intf;
  mailbox gen2drv;
  
  function new (virtual alu_interface intf_new, 
                virtual alu_reg_interface reg_intf_new, 
                mailbox gen2drv_new);
    this.intf = intf_new;
    this.reg_intf = reg_intf_new;
    if(gen2drv_new == null)begin
      $display("%0t -> driver : ERROR -> gen2drv is null",$time);
      $finish;
    end
    else
      this.gen2drv = gen2drv_new;
  endfunction 

  task run();
    transaction tr;
    bit[15:0] alu_result;

    forever begin
      gen2drv.get(tr);
      drv2dut(tr);
    end
  endtask

  task drv2dut(input transaction req);
    bit[15:0] addr,data;
    bit busy;

    //drive operands
    addr = `BASE_ADDR + `CFG_OPERANDS_REG_OFFSET;
    data = {req.A,req.B};
    reg_intf.reg_write(addr,data);

    //dirve opcode
    data = 0;
    case(req.op.name())
      "no_op": begin
        addr = `BASE_ADDR + `CFW_OPCODE_REG_OFFSET;
        data[`CFW_OPCODE_REG_SIZE-1:0] = intf.enum2op(req.op);
        reg_intf.reg_write(addr,data);
      end
      "rst_op": begin
        @(intf.drv);
        intf.rst_n     <= 0;
        @(intf.drv);
        intf.rst_n     <= 1;
        addr = `BASE_ADDR + `CFW_OPCODE_REG_OFFSET;
        data[`CFW_OPCODE_REG_SIZE-1:0] = intf.enum2op(req.op);
        reg_intf.reg_write(addr,data);
      end
      default: begin
        addr = `BASE_ADDR + `CFW_OPCODE_REG_OFFSET;
        data[`CFW_OPCODE_REG_SIZE-1:0] = intf.enum2op(req.op);
        reg_intf.reg_write(addr,data);
      end
    endcase

    //wait idle
    do begin
      addr = `BASE_ADDR + `STA_STATUS_REG_OFFSET;
      reg_intf.reg_read(addr,data);
      busy = data[4];
    end while(busy == 1'b1);

    //get result
    addr = `BASE_ADDR + `STA_RESULT_REG_OFFSET;
    reg_intf.reg_read(addr,data);
    req.result = data;
    $display("%0t -> driver : tr is %s",$time,req.convert2string());

  endtask

endclass  

`endif
                                                            code/7.2/sim/testbench/component/coverage.svh                                                       0000664 0000765 0000765 00000006636 14347317340 016771  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef COVERAGE
`define COVERAGE

class coverage;

  mailbox mon2cov;
  bit[7:0]  A;
  bit[7:0]  B;
  operation_t  op_set;

  covergroup op_cov;
     coverpoint op_set {
        bins single_cycle[] = {[add_op : xor_op], rst_op,no_op};
        bins multi_cycle = {mul_op, div_op};

        bins opn_rst[] = ([add_op:div_op] => rst_op);
        bins rst_opn[] = (rst_op => [add_op:div_op]);

        bins sngl_mul[] = ([add_op:xor_op],no_op => mul_op);
        bins mul_sngl[] = (mul_op => [add_op:xor_op], no_op);

        bins sngl_div[] = ([add_op:xor_op],no_op => div_op);
        bins div_sngl[] = (div_op => [add_op:xor_op], no_op);

        bins mul_div[] = (mul_op => div_op);
        bins div_mul[] = (div_op => mul_op);

        bins twoops[] = ([add_op:div_op] [* 2]);

        bins manymul = (mul_op [* 3:5]);
        bins manydiv = (div_op [* 3:5]);
     }
  endgroup

  covergroup zeros_or_ones_on_ops;
    all_ops : coverpoint op_set {
      ignore_bins null_ops = {rst_op, no_op};}

    a_leg: coverpoint A {
      bins zeros = {'h00};
      bins others= {['h01:'hFE]};
      bins ones  = {'hFF};
    }

    b_leg: coverpoint B {
      bins zeros = {'h00};
      bins others= {['h01:'hFE]};
      bins ones  = {'hFF};
    }

    op_00_FF:  cross a_leg, b_leg, all_ops {
      bins add_00 = binsof (all_ops) intersect {add_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins add_FF = binsof (all_ops) intersect {add_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins and_00 = binsof (all_ops) intersect {and_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins and_FF = binsof (all_ops) intersect {and_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins xor_00 = binsof (all_ops) intersect {xor_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins xor_FF = binsof (all_ops) intersect {xor_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins mul_00 = binsof (all_ops) intersect {mul_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins mul_FF = binsof (all_ops) intersect {mul_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins mul_max = binsof (all_ops) intersect {mul_op} &&
                     (binsof (a_leg.ones) && binsof (b_leg.ones));

      bins div_00 = binsof (all_ops) intersect {div_op} &&
                    (binsof (a_leg.zeros) || binsof (b_leg.zeros));

      bins div_FF = binsof (all_ops) intersect {div_op} &&
                    (binsof (a_leg.ones) || binsof (b_leg.ones));

      bins div_max = binsof (all_ops) intersect {div_op} &&
                     (binsof (a_leg.ones) && binsof (b_leg.ones));

      ignore_bins others_only = binsof(a_leg.others) && binsof(b_leg.others);
     }
  endgroup
  
  function new (mailbox mon2cov_new);
    op_cov = new();
    zeros_or_ones_on_ops = new();

    if(mon2cov_new == null)begin
      $display("%0t -> coverage : ERROR -> mon2cov is null",$time);
      $finish;
    end
    else
      this.mon2cov = mon2cov_new;
  endfunction 

  task run();
    transaction tr;

    forever begin
      mon2cov.get(tr);
      A = tr.A;
      B = tr.B;
      op_set = tr.op;
      op_cov.sample();
      zeros_or_ones_on_ops.sample();
      $display("%0t -> coverage : tr is %s",$time,tr.convert2string());
    end
  endtask

endclass  

`endif
                                                                                                  code/7.2/sim/testbench/component/environment.svh                                                    0000664 0000765 0000765 00000006400 14350311525 017520  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ENV
`define ENV

class environment;
  virtual alu_interface intf;
  virtual alu_reg_interface reg_intf;

  generator gen;
  driver drv;
  monitor mon;
  scoreboard scb;
  coverage cov;

  mailbox gen2drv;
  mailbox mon2scb;
  mailbox mon2cov;
  
  function new (virtual alu_interface intf_new, 
                virtual alu_reg_interface reg_intf_new);
    this.intf = intf_new;
    this.reg_intf = reg_intf_new;
  endfunction 

  function void build();
    $display("%0t -> environment : start build() method",$time);
    gen2drv = new();
    mon2scb = new();
    mon2cov = new();

    gen = new(gen2drv);
    drv = new(intf, reg_intf, gen2drv);
    mon = new(intf, reg_intf, mon2cov, mon2scb);
    scb = new(reg_intf, mon2scb);
    cov = new(mon2cov);
    $display("%0t -> environment : finish build() method",$time);
  endfunction

  task reset();
    $display("%0t -> environment : start reset() method",$time);
    begin
      logic[15:0] alu_result;
      transaction tr = new();
      tr.op = rst_op;
      this.intf.send_op(tr,alu_result);
    end
    $display("%0t -> environment : finish reset() method",$time);
  endtask

  task config();
    $display("%0t -> environment : start config() method",$time);
    begin
      bit[15:0] rd_data;
      reg_transaction tr = new();
      tr.op = reg_wr;
      tr.addr = `BASE_ADDR + `CFG_CTRL_REG_OFFSET;
      //tr.wr_data = 1'd1;
      tr.wr_data = 1'd0;
      this.reg_intf.send_op(tr,rd_data);
      $display("%0t -> write CFG_CTRL_REG value : %0h",$time,tr.wr_data);
      tr.op = reg_rd;
      this.reg_intf.send_op(tr,rd_data);
      $display("%0t -> read CFG_CTRL_REG value : %0h",$time,rd_data);
    end
    $display("%0t -> environment : finish config() method",$time);
  endtask

  task start();
    $display("%0t -> environment : start start() method",$time);
    fork
      gen.run();
      drv.run();
      mon.run();
      cov.run();
      scb.run();
    join_none
    $display("%0t -> environment : finish start() method",$time);
  endtask

  task wait_finish();
    $display("%0t -> environment : start wait_finish() method",$time);
    repeat(10000) @(posedge intf.clk);
    $display("%0t -> environment : finish wait_finish() method",$time);
  endtask

  task report();
    $display("%0t -> environment : start report() method",$time);
    $display("\n");
    if(scb.fail_cnt == 0)begin
      $display("************ Test PASSED ***************");
      $display("************ total: %0d  ***************",mon.total_cnt);
      $display("************ pass: %0d fail: 0 ***************",scb.pass_cnt);
    end
    else begin
      $display("************ Test FAIL ***************");
      $display("************ total: %0d  ***************",mon.total_cnt);
      $display("************ pass: %0d fail: %0d ***************",scb.pass_cnt,scb.fail_cnt);
    end
    $display("coverage op_cov: %g%%, zeros_or_ones_on_ops: %g%%",cov.op_cov.get_coverage(),cov.zeros_or_ones_on_ops.get_coverage());
    $display("\n");
    $display("%0t -> environment : finish report() method",$time);
  endtask
  
  task run();
    $display("%0t -> environment : start run() method",$time);
    build();
    reset();
    config();
    start();
    wait_finish();
    report();
    $display("%0t -> environment : finish run() method",$time);
  endtask
  
endclass  

`endif
                                                                                                                                                                                                                                                                code/7.2/sim/testbench/component/generator.svh                                                      0000664 0000765 0000765 00000001521 14351226310 017137  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef GENERATOR
`define GENERATOR

class generator;

  mailbox gen2drv;
  
  function new (mailbox gen2drv_new);
    if(gen2drv_new == null)begin
      $display("%0t -> generator : ERROR -> gen2drv is null",$time);
      $finish;
    end
    else
      this.gen2drv = gen2drv_new;
  endfunction 

  task run(int num_tr = 200);
    transaction tr;
    
    //random
    repeat(num_tr)begin
      tr = new();
      assert(tr.randomize());
      $display("%0t -> generator : tr is %s",$time,tr.convert2string_in());
      gen2drv.put(tr);
    end

    //constraint operand with 'h00 or 'hff
    repeat(num_tr)begin
      tr = new();
      assert(tr.randomize() with {A inside {'h0,'hff}; B inside {'h0,'hff};});
      $display("%0t -> generator : tr is %s",$time,tr.convert2string_in());
      gen2drv.put(tr);
    end

  endtask

endclass  

`endif
                                                                                                                                                                               code/7.2/sim/testbench/component/monitor.svh                                                        0000664 0000765 0000765 00000005342 14351771570 016662  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef MONITOR
`define MONITOR

class monitor;

  virtual alu_interface     intf;
  virtual alu_reg_interface reg_intf;
  mailbox mon2scb;
  mailbox mon2cov;
  mailbox mb_local;

  int total_cnt = 0;
  
  function new (virtual alu_interface intf_new, 
                virtual alu_reg_interface reg_intf_new, 
                mailbox mon2cov_new,
                mailbox mon2scb_new);
    this.intf     = intf_new;
    this.reg_intf = reg_intf_new;
    if(mon2cov_new == null)begin
      $display("%0t -> monitor : ERROR -> mon2cov is null",$time);
      $finish;
    end
    else if(mon2scb_new == null)begin
      $display("%0t -> monitor : ERROR -> mon2scb is null",$time);
      $finish;
    end
    else begin
      this.mon2cov = mon2cov_new;
      this.mon2scb = mon2scb_new;
    end
  endfunction 

  task run();
    reg_transaction reg_tr = new();
    mb_local = new();

    fork
      //thread 1 : monitor reg_interface, then pack to reg_tr  
      forever begin
        bit vld;

        begin
          @(reg_intf.mon);
          if(reg_intf.mon.vld)begin
            reg_tr.op = reg_intf.op2enum(reg_intf.mon.op);
            reg_tr.addr = reg_intf.mon.addr;
            vld = reg_intf.mon.vld;
          end
        end

        if(vld)begin
          //monitor operands
          if((reg_tr.op == reg_wr) && (reg_tr.addr == `BASE_ADDR + `CFG_OPERANDS_REG_OFFSET))begin
              reg_tr.wr_data = reg_intf.mon.wr_data;
              mb_local.put(reg_tr);
          end
          //monitor opcode
          if((reg_tr.op == reg_wr) && (reg_tr.addr == `BASE_ADDR + `CFW_OPCODE_REG_OFFSET))begin
              reg_tr.wr_data = reg_intf.mon.wr_data;
              mb_local.put(reg_tr);
          end
          //monitor result
          if((reg_tr.op == reg_rd) && (reg_tr.addr == `BASE_ADDR + `STA_RESULT_REG_OFFSET))begin
              @(reg_intf.mon);
              reg_tr.rd_data = reg_intf.mon.rd_data;
              mb_local.put(reg_tr);
          end
        end
      end

      //thread 2 : convert reg_tr to tr, then send to scb & cov 
      forever begin
        transaction tr;
        reg_transaction reg_tr;

        //get monitor operands
        mb_local.get(reg_tr);
        tr = new();
        tr.A = reg_tr.wr_data[15:8];
        tr.B = reg_tr.wr_data[7:0];
        //get monitor opcode
        mb_local.get(reg_tr);
        tr.op = intf.op2enum(reg_tr.wr_data[2:0]);
        //get monitor result
        mb_local.get(reg_tr);
        tr.result = reg_tr.rd_data;
        //send to scb & cov
        if((tr.op != no_op) && (tr.op != rst_op))begin
          mon2scb.put(tr);
        end
        mon2cov.put(tr);
        $display("%0t -> monitor : tr is %s",$time,tr.convert2string());
        total_cnt++;
      end
    join
  endtask

endclass  

`endif
                                                                                                                                                                                                                                                                                              code/7.2/sim/testbench/interface/alu_reg_interface.sv                                               0000600 0000765 0000765 00000006255 14351430371 020400  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_REG_INTERFACE
`define ALU_REG_INTERFACE

interface alu_reg_interface(input wire clk, input wire rst_n);
  import    alu_pkg::*;
  parameter tsu = 1ps;
  parameter tco = 0ps;
  
  logic        vld;
  logic        op;
  logic [15:0] wr_data;
  logic [15:0] addr;
  logic [15:0] rd_data;
  
  clocking drv@(posedge clk);
    output #tco vld;
    output #tco op;
    output #tco wr_data;
    output #tco addr;
    input  #tsu rd_data;
  endclocking
  
  clocking mon@(posedge clk);
    input #tsu vld;
    input #tsu op;
    input #tsu wr_data;
    input #tsu addr;
    input #tsu rd_data;
  endclocking

  task reg_write(bit[15:0] addr, bit[15:0] data);
    //drive vld cmd
    begin
      @(drv);
      drv.vld     <= 1'b1;
      drv.op      <= 1'b1;
      drv.addr    <= addr;
      drv.wr_data <= data;
    end
    //drive idle cmd
    begin
      @(drv);
      drv.vld     <= 1'b0;
      drv.op      <= 1'b0;
      drv.addr    <= 16'h0;
      drv.wr_data <= 16'h0;
    end
  endtask

  task reg_read(bit[15:0] addr, output bit[15:0] data);
    //drive vld cmd
    begin
      @(drv);
      drv.vld     <= 1'b1;
      drv.op      <= 1'b0;
      drv.addr    <= addr;
      drv.wr_data <= 16'h0;
    end
    //drive idle cmd
    begin
      @(drv);
      drv.vld     <= 1'b0;
      drv.op      <= 1'b0;
      drv.addr    <= 16'h0;
      drv.wr_data <= 16'h0;
    end
    //monitor rd data
    begin
      @(drv);
      data = drv.rd_data;
    end
  endtask

  task send_op(input reg_transaction req, output bit[15:0] o_rd_data);
    //drive vld cmd
    begin
      @(drv);
      drv.vld <= 1'b1;
      case(req.op.name())
       "reg_wr":   drv.op <= 1'b1;
       "reg_rd":   drv.op <= 1'b0;
      endcase
      drv.addr <= req.addr;
      case(req.op.name())
       "reg_rd":   drv.wr_data <= 16'h0;
       "reg_wr":   drv.wr_data <= req.wr_data;
      endcase
    end
    //drive idle cmd
    begin
      @(drv);
      drv.vld     <= 1'b0;
      drv.op      <= 1'b0;
      drv.addr    <= 16'h0;
      drv.wr_data <= 16'h0;
    end
    //monitor rd data
    begin
      @(drv);
      if(req.op.name()=="reg_rd")
        o_rd_data = drv.rd_data;
    end
  endtask 

  task init();
    vld     <= 0;
    op      <= 'dx;
    wr_data <= 'dx;
    addr    <= 'dx;
  endtask
  
  function reg_operation_t op2enum(bit op);
    case(op)
      1'b0 : return reg_rd;
      1'b1 : return reg_wr;
      default : $fatal("Illegal operation on reg interface");
    endcase
  endfunction
  
  function bit[15:0] peek(string reg_name);
    case(reg_name)
      "cfg_cfg_ctrl"     : return $root.top.DUT.i_demo_reg_slave.cfg_cfg_ctrl.reg_field;
      "cfg_cfg_operands" : return $root.top.DUT.i_demo_reg_slave.cfg_cfg_operands.reg_field;
      "cfw_cfw_opcode"   : return $root.top.DUT.i_demo_reg_slave.cfw_cfw_opcode.reg_field;
      "sta_sta_result"   : return $root.top.DUT.i_demo_reg_slave.sta_sta_result.reg_field;
      "sta_sta_status"   : return $root.top.DUT.i_demo_reg_slave.sta_sta_status.reg_field;
      "cnt_cnt_operation": return $root.top.DUT.i_demo_reg_slave.cnt_cnt_operation.reg_field;
      "int_int_interrupt": return $root.top.DUT.i_demo_reg_slave.int_int_interrupt.reg_field;
    endcase
  endfunction

endinterface 

`endif
   
                                                                                                                                                                                                                                                                                                                                                   code/7.2/sim/testbench/interface/alu_interface.sv                                                   0000600 0000765 0000765 00000005021 14350252741 017533  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef ALU_INTERFACE
`define ALU_INTERFACE

interface alu_interface(input wire clk);
  import    alu_pkg::*;
  parameter tsu = 1ps;
  parameter tco = 0ps;
  
  logic[7:0]    A;
  logic[7:0]    B;
  logic[2:0]    op;
  logic         start;
  logic         done;
  logic [15:0]  result;
  logic rst_n;
  
  clocking drv@(posedge clk);
    output #tco A;
    output #tco B;
    output #tco op;
    output #tco start;
    input  #tsu done;
    input  #tsu result;
  endclocking
  
  clocking mon@(posedge clk);
    input #tsu A;
    input #tsu B;
    input #tsu op;
    input #tsu start;
    input #tsu done;
    input #tsu result;
  endclocking
  
  task send_op(input transaction req, output bit[15:0] alu_result);
    case(req.op.name())
      "no_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        drv.start <= 1'b1;
        @(drv);
        drv.start <= 1'b0;
        @(drv);
        alu_result = drv.result;
      end
      "rst_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        rst_n     <= 0;
        drv.start <= 1'b1;
        @(drv);
        rst_n     <= 1;
        drv.start <= 1'b0;
        @(drv);
        alu_result = drv.result;
      end
      "mul_op","div_op": begin
        @(drv);
        drv.op    <= enum2op(req.op);
        drv.A     <= req.A;
        drv.B     <= req.B;
        drv.start <= 1'b1;
        repeat(2) begin
          @(drv);
        end
        @(drv);
        alu_result = drv.result;
        @(drv);
        drv.start <= 1'b0;
      end
      default: begin
       @(drv);
       drv.op    <= enum2op(req.op);
       drv.A     <= req.A;
       drv.B     <= req.B;
       drv.start <= 1'b1;
       @(drv);
       alu_result = drv.result;
       @(drv);
       drv.start <= 1'b0;
      end
    endcase
  endtask  
  
  task init();
    start <= 0;
    A     <= 'dx;
    B     <= 'dx;
    op    <= 'd0;
  endtask
  
  function bit[2:0] enum2op(operation_t op);
    case(op)
      no_op  : return 3'b000; 
      add_op : return 3'b001;
      and_op : return 3'b010;
      xor_op : return 3'b011;
      mul_op : return 3'b100;
      div_op : return 3'b101;
      rst_op : return 3'b111;
    endcase
  endfunction

  function operation_t op2enum(bit[2:0] op);
    case(op)
      3'b000  : return no_op; 
      3'b001  : return add_op;
      3'b010  : return and_op;
      3'b011  : return xor_op;
      3'b100  : return mul_op;
      3'b101  : return div_op;
      3'b111  : return rst_op;
      default : $fatal("Illegal operation on interface");
    endcase
  endfunction

endinterface 

`endif
   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               code/7.2/sim/testbench/transaction/reg_transaction.svh                                              0000664 0000765 0000765 00000000670 14350263646 020676  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     
`ifndef REG_TRANSACTION
`define REG_TRANSACTION

class reg_transaction;

   rand bit[15:0]        wr_data;
   rand bit[15:0]        addr;
   rand reg_operation_t  op;
   bit[15:0]             rd_data;

   function string convert2string();
      string    s;
      s = $sformatf("op: %s   addr: %2h   rd_data: %4h    wr_data: %4h",
                    op.name(), addr, rd_data, wr_data);
      return s;
   endfunction 

endclass  

`endif
                                                                        code/7.2/sim/testbench/transaction/transaction.svh                                                  0000600 0000765 0000765 00000002631 14347530677 020035  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TRANSACTION
`define TRANSACTION

class transaction;
  
  rand bit[7:0]      A;
  rand bit[7:0]      B;
  rand operation_t   op;
  bit[15:0]          result;
  
  constraint opcode_c {op dist {no_op := 1, add_op:= 5, and_op:=5, 
                                xor_op:=5,mul_op:=5,div_op:=5, rst_op:=1};}

  constraint oprand_c { A dist {8'h00:=1, [8'h01 : 8'hFE]:=1, 8'hFF:=1};
                        B dist {8'h00:=1, [8'h01 : 8'hFE]:=1, 8'hFF:=1};} 
  
  function bit compare(transaction tr);
    bit same;
    if(tr == null)begin
      same = 0;
      $display("%0t -> transaction : ERROR -> tr is null",$time);
    end
    else if((this.A == tr.A) &&
            (this.B == tr.B) &&
            (this.op == tr.op) &&
            (this.result == tr.result))
      same = 1;
    else 
      same = 0;
      return same;
  endfunction

  function string convert2string_in();
    string            s;
    s = $sformatf("A: %2h  B: %2h   op: %s",
                  A, B, op.name());
    return s;
  endfunction 
  
  function string convert2string();
    string            s;
    s = $sformatf("A: %2h  B: %2h   op: %s = %4h",
                  A, B, op.name(), result);
    return s;
  endfunction 

  function transaction clone();
    clone        = new();
    clone.A      = this.A;
    clone.B      = this.B;
    clone.op     = this.op;
    clone.result = this.result;
    return clone;
  endfunction

endclass  

`endif
                                                                                                       code/7.2/sim/testbench/testcase/testcase.svh                                                        0000664 0000765 0000765 00000000654 14351430421 016603  0                                                                                                    ustar   IC                              IC                                                                                                                                                                                                                     `ifndef TESTCASE
`define TESTCASE

class testcase;
  virtual alu_interface intf;
  virtual alu_reg_interface reg_intf;
  
  environment  env;
  
  function new (virtual alu_interface intf_new, 
                virtual alu_reg_interface reg_intf_new);
    this.intf     = intf_new;
    this.reg_intf = reg_intf_new;
  endfunction 
  
  task run();
    env = new(intf, reg_intf);
    env.run();
  endtask
  
endclass 

`endif
   
